{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useButton = useButton;\n\nvar _react = require(\"react\");\n\nfunction useButton(props, _ref) {\n  var _props$accessible, _props$accessibilityR, _props$accessibilityS;\n\n  var _ref2 = (0, _react.useState)(false),\n      _ref3 = _slicedToArray(_ref2, 2),\n      isPressed = _ref3[0],\n      setIsPressed = _ref3[1];\n\n  var disabled = !!props.isDisabled;\n\n  var buttonProps = _objectSpread({\n    accessible: (_props$accessible = props.accessible) !== null && _props$accessible !== void 0 ? _props$accessible : true,\n    accessibilityRole: (_props$accessibilityR = props.accessibilityRole) !== null && _props$accessibilityR !== void 0 ? _props$accessibilityR : 'button',\n    accessibilityState: (_props$accessibilityS = props.accessibilityState) !== null && _props$accessibilityS !== void 0 ? _props$accessibilityS : {\n      disabled: disabled\n    },\n    disabled: disabled\n  }, props, {\n    onPress: function onPress(e) {\n      props.onPress && props.onPress(e);\n    },\n    onPressIn: function onPressIn() {\n      setIsPressed(true);\n    },\n    onPressOut: function onPressOut() {\n      setIsPressed(false);\n    }\n  });\n\n  var newProps = {\n    isPressed: isPressed,\n    buttonProps: buttonProps\n  };\n  return newProps;\n}","map":{"version":3,"sources":["useButton.tsx"],"names":["disabled","props","buttonProps","accessible","accessibilityRole","accessibilityState","onPress","e","onPressIn","setIsPressed","onPressOut","newProps","isPressed"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAqBO,SAAA,SAAA,CAAA,KAAA,EAAA,IAAA,EAGO;AAAA,MAAA,iBAAA,EAAA,qBAAA,EAAA,qBAAA;;AAAA,cACsB,CAAA,GAAA,MAAA,CAAA,QAAA,EAAlC,KAAkC,CADtB;AAAA;AAAA,MACN,SADM;AAAA,MACN,YADM;;AAEZ,MAAMA,QAAQ,GAAG,CAAC,CAACC,KAAK,CAAxB,UAAA;;AAEA,MAAMC,WAAW;AACfC,IAAAA,UAAU,EAAA,CAAA,iBAAA,GAAEF,KAAK,CAAP,UAAA,MAAA,IAAA,IAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,iBAAA,GADQ,IAAH;AAEfG,IAAAA,iBAAiB,EAAA,CAAA,qBAAA,GAAEH,KAAK,CAAP,iBAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAFC,QAAH;AAGfI,IAAAA,kBAAkB,EAAA,CAAA,qBAAA,GAAEJ,KAAK,CAAP,kBAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAA8B;AAC9CD,MAAAA,QAAAA,EAAAA;AAD8C,KAHjC;AAMfA,IAAAA,QANkB,EAMlBA;AANe,KAAG,KAAH;AAQfM,IAAAA,OAAO,EAAGC,iBAAAA,CAAD,EAA8B;AACrCN,MAAAA,KAAK,CAALA,OAAAA,IAAiBA,KAAK,CAALA,OAAAA,CAAjBA,CAAiBA,CAAjBA;AATgB,KAAH;AAWfO,IAAAA,SAAS,EAAE,qBAAM;AACfC,MAAAA,YAAY,CAAZA,IAAY,CAAZA;AAZgB,KAAH;AAcfC,IAAAA,UAAU,EAAE,sBAAM;AAChBD,MAAAA,YAAY,CAAZA,KAAY,CAAZA;AACD;AAhBc,IAAjB;;AAmBA,MAAME,QAAQ,GAAG;AACfC,IAAAA,SADe,EACfA,SADe;AAEfV,IAAAA,WAAAA,EAAAA;AAFe,GAAjB;AAKA,SAAA,QAAA;AACD","sourcesContent":["import { RefObject, useState } from 'react';\nimport type { GestureResponderEvent } from 'react-native';\nimport type { IButtonAccessibilityProps } from './props';\n\ntype IUseButtonProps = {\n  isDisabled: boolean;\n  onPress: any;\n} & IButtonAccessibilityProps;\n\nexport interface ButtonAria {\n  /** Props for the button element. */\n  buttonProps: {\n    onPress: any;\n    onPressIn: any;\n    onPressOut: any;\n    disabled: boolean;\n  } & IButtonAccessibilityProps;\n  /** Whether the button is currently pressed. */\n  isPressed: boolean;\n}\n\nexport function useButton(\n  props: Partial<IUseButtonProps>,\n  _ref: RefObject<any>\n): ButtonAria {\n  const [isPressed, setIsPressed] = useState(false);\n  const disabled = !!props.isDisabled;\n\n  const buttonProps = {\n    accessible: props.accessible ?? true,\n    accessibilityRole: props.accessibilityRole ?? 'button',\n    accessibilityState: props.accessibilityState ?? {\n      disabled,\n    },\n    disabled,\n    ...props,\n    onPress: (e: GestureResponderEvent) => {\n      props.onPress && props.onPress(e);\n    },\n    onPressIn: () => {\n      setIsPressed(true);\n    },\n    onPressOut: () => {\n      setIsPressed(false);\n    },\n  };\n\n  const newProps = {\n    isPressed,\n    buttonProps,\n  };\n\n  return newProps;\n}\n"]},"metadata":{},"sourceType":"script"}