{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getContainerStyles = getContainerStyles;\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar SCREEN_INDENT = 0;\n\nfunction getContainerStyles(top, left, menuSizeAnimation, menuWidth, menuHeight, buttonWidth, buttonHeight, opacityAnimation) {\n  var isRTL = _reactNative.I18nManager.isRTL;\n\n  var dimensions = _reactNative.Dimensions.get('window');\n\n  var windowWidth = dimensions.width;\n  var windowHeight = dimensions.height - (_reactNative.StatusBar.currentHeight || 0);\n  var menuSize = {\n    width: menuSizeAnimation.x,\n    height: menuSizeAnimation.y\n  };\n  var transforms = [];\n\n  if (isRTL && left + buttonWidth - menuWidth > SCREEN_INDENT || !isRTL && left + menuWidth > windowWidth - SCREEN_INDENT) {\n    transforms.push({\n      translateX: _reactNative.Animated.multiply(menuSizeAnimation.x, -1)\n    });\n    left = Math.min(windowWidth, left + buttonWidth);\n  }\n\n  if (top > windowHeight - menuHeight - SCREEN_INDENT) {\n    transforms.push({\n      translateY: _reactNative.Animated.multiply(menuSizeAnimation.y, -1)\n    });\n    top = windowHeight - SCREEN_INDENT;\n    top = Math.min(windowHeight - menuHeight + SCREEN_INDENT + (_reactNative.Platform.OS === 'android' ? 3 : 2) * buttonHeight, top + buttonHeight);\n  }\n\n  var menuContainerStyle = _objectSpread({\n    opacity: opacityAnimation,\n    transform: transforms,\n    top: top\n  }, isRTL ? {\n    right: left\n  } : {\n    left: left\n  });\n\n  return {\n    menuContainerStyle: menuContainerStyle,\n    menuSize: menuSize\n  };\n}","map":{"version":3,"sources":["getContainerStyles.ts"],"names":["SCREEN_INDENT","isRTL","I18nManager","dimensions","Dimensions","width","windowWidth","windowHeight","StatusBar","menuSize","menuSizeAnimation","height","y","transforms","left","translateX","Animated","Math","top","translateY","Platform","menuContainerStyle","opacity","transform","right"],"mappings":";;;;;;;;;;;;;;;AAOA,IAAMA,aAAa,GAAnB,CAAA;;AAEO,SAAA,kBAAA,CAAA,GAAA,EAAA,IAAA,EAAA,iBAAA,EAAA,SAAA,EAAA,UAAA,EAAA,WAAA,EAAA,YAAA,EAAA,gBAAA,EASL;AAAA,MACQC,KADR,GACkBC,YAAAA,CAAlB,WADA,CACQD,KADR;;AAEA,MAAME,UAAU,GAAGC,YAAAA,CAAAA,UAAAA,CAAAA,GAAAA,CAAnB,QAAmBA,CAAnB;;AAFA,MAGeE,WAHf,GAGA,UAHA,CAGQD,KAHR;AAIA,MAAME,YAAY,GAAGJ,UAAU,CAAVA,MAAAA,IAAqBK,YAAAA,CAAAA,SAAAA,CAAAA,aAAAA,IAA1C,CAAqBL,CAArB;AAEA,MAAMM,QAAQ,GAAG;AACfJ,IAAAA,KAAK,EAAEK,iBAAiB,CADT,CAAA;AAEfC,IAAAA,MAAM,EAAED,iBAAiB,CAACE;AAFX,GAAjB;AAKA,MAAMC,UAAU,GAAhB,EAAA;;AAEA,MACGZ,KAAK,IAAIa,IAAI,GAAJA,WAAAA,GAAAA,SAAAA,GAAV,aAACb,IACA,CAAA,KAAA,IAAUa,IAAI,GAAJA,SAAAA,GAAmBR,WAAW,GAF3C,aAAA,EAGE;AACAO,IAAAA,UAAU,CAAVA,IAAAA,CAAgB;AACdE,MAAAA,UAAU,EAAEC,YAAAA,CAAAA,QAAAA,CAAAA,QAAAA,CAAkBN,iBAAiB,CAAnCM,CAAAA,EAAuC,CAAvCA,CAAAA;AADE,KAAhBH;AAGAC,IAAAA,IAAI,GAAGG,IAAI,CAAJA,GAAAA,CAAAA,WAAAA,EAAsBH,IAAI,GAAjCA,WAAOG,CAAPH;AApBF;;AAwBA,MAAII,GAAG,GAAGX,YAAY,GAAZA,UAAAA,GAAV,aAAA,EAAqD;AACnDM,IAAAA,UAAU,CAAVA,IAAAA,CAAgB;AACdM,MAAAA,UAAU,EAAEH,YAAAA,CAAAA,QAAAA,CAAAA,QAAAA,CAAkBN,iBAAiB,CAAnCM,CAAAA,EAAuC,CAAvCA,CAAAA;AADE,KAAhBH;AAGAK,IAAAA,GAAG,GAAGX,YAAY,GAAlBW,aAAAA;AACAA,IAAAA,GAAG,GAAGD,IAAI,CAAJA,GAAAA,CACJV,YAAY,GAAZA,UAAAA,GAAAA,aAAAA,GAGE,CAACa,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KAAAA,SAAAA,GAAAA,CAAAA,GAAD,CAAA,IAJEH,YAAAA,EAKJC,GAAG,GALLA,YAAMD,CAANC;AAOD;;AACD,MAAMG,kBAAkB;AACtBC,IAAAA,OAAO,EADkB,gBAAH;AAEtBC,IAAAA,SAAS,EAFgB,UAAH;AAGtBL,IAAAA,GAHyB,EAGzBA;AAHsB,KAKlBjB,KAAK,GAAG;AAAEuB,IAAAA,KAAK,EAAEV;AAAT,GAAH,GAAqB;AAAEA,IAAAA,IAAAA,EAAAA;AAAF,GALR,CAAxB;;AAOA,SAAO;AAAEO,IAAAA,kBAAF,EAAEA,kBAAF;AAAsBZ,IAAAA,QAAAA,EAAAA;AAAtB,GAAP;AACD","sourcesContent":["import {\n  Animated,\n  I18nManager,\n  Dimensions,\n  StatusBar,\n  Platform,\n} from 'react-native';\nconst SCREEN_INDENT = 0;\n\nexport function getContainerStyles(\n  top: any,\n  left: any,\n  menuSizeAnimation: any,\n  menuWidth: any,\n  menuHeight: any,\n  buttonWidth: any,\n  buttonHeight: any,\n  opacityAnimation: any\n) {\n  const { isRTL } = I18nManager;\n  const dimensions = Dimensions.get('window');\n  const { width: windowWidth } = dimensions;\n  const windowHeight = dimensions.height - (StatusBar.currentHeight || 0);\n\n  const menuSize = {\n    width: menuSizeAnimation.x,\n    height: menuSizeAnimation.y,\n  };\n  // Adjust position of menu\n  const transforms = [];\n\n  if (\n    (isRTL && left + buttonWidth - menuWidth > SCREEN_INDENT) ||\n    (!isRTL && left + menuWidth > windowWidth - SCREEN_INDENT)\n  ) {\n    transforms.push({\n      translateX: Animated.multiply(menuSizeAnimation.x, -1),\n    });\n    left = Math.min(windowWidth, left + buttonWidth);\n  }\n\n  // Flip by Y axis if menu hits bottom screen border\n  if (top > windowHeight - menuHeight - SCREEN_INDENT) {\n    transforms.push({\n      translateY: Animated.multiply(menuSizeAnimation.y, -1),\n    });\n    top = windowHeight - SCREEN_INDENT;\n    top = Math.min(\n      windowHeight -\n        menuHeight +\n        SCREEN_INDENT +\n        (Platform.OS === 'android' ? 3 : 2) * buttonHeight,\n      top + buttonHeight\n    );\n  }\n  const menuContainerStyle = {\n    opacity: opacityAnimation,\n    transform: transforms,\n    top,\n    // Switch left to right for rtl devices\n    ...(isRTL ? { right: left } : { left }),\n  };\n  return { menuContainerStyle, menuSize };\n}\n"]},"metadata":{},"sourceType":"script"}