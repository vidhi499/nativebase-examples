{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SimpleGrid = SimpleGrid;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _primitives = require(\"../../primitives\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar DEBUG_STYLES = false ? {\n  rows: {\n    border: '1px solid black'\n  },\n  cols: {\n    border: '1px solid red'\n  }\n} : {\n  rows: {},\n  cols: {}\n};\n\nfunction SimpleGrid(_ref) {\n  var columns = _ref.columns,\n      spacing = _ref.spacing,\n      spacingX = _ref.spacingX,\n      spacingY = _ref.spacingY,\n      minChildWidth = _ref.minChildWidth,\n      children = _ref.children;\n  var cellSpacing = spacing !== null && spacing !== void 0 ? spacing : 0;\n  var cellSpacingX = spacingX !== null && spacingX !== void 0 ? spacingX : cellSpacing;\n  var cellSpacingY = spacingY !== null && spacingY !== void 0 ? spacingY : cellSpacing;\n\n  var childrenArray = _react[\"default\"].Children.toArray(children);\n\n  if (columns) {\n    var rowSlices = [];\n\n    for (var i = 0; i < childrenArray.length; i = i + columns) {\n      rowSlices.push(childrenArray.slice(i, i + columns));\n    }\n\n    return _react[\"default\"].createElement(_primitives.VStack, _extends({}, DEBUG_STYLES.rows, {\n      space: cellSpacingY\n    }), rowSlices.map(function (row, rowIndex) {\n      return _react[\"default\"].createElement(_primitives.HStack, {\n        space: cellSpacingX,\n        key: rowIndex\n      }, row.map(function (col) {\n        return _react[\"default\"].createElement(_primitives.Box, _extends({}, DEBUG_STYLES.cols, {\n          key: col.key\n        }), col);\n      }));\n    }));\n  } else if (minChildWidth) {\n      return _react[\"default\"].createElement(_primitives.Box, {\n        flexDirection: \"row\",\n        flexWrap: \"wrap\",\n        justifyContent: \"center\"\n      }, childrenArray.map(function (col) {\n        return _react[\"default\"].createElement(_primitives.Box, _extends({}, DEBUG_STYLES.cols, {\n          mx: cellSpacingX,\n          my: cellSpacingY,\n          key: col.key,\n          minWidth: minChildWidth\n        }), col);\n      }));\n    }\n\n  return _react[\"default\"].createElement(_react[\"default\"].Fragment, null);\n}","map":{"version":3,"sources":["SimpleGrid.tsx"],"names":["DEBUG_STYLES","rows","border","cols","children","cellSpacing","spacing","cellSpacingX","spacingX","cellSpacingY","spacingY","childrenArray","React","rowSlices","i","rowIndex","col","key","minChildWidth"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Box, HStack, VStack } from '../../primitives';\nimport type { ISimpleGridProps } from './props';\n// const isDebug = process.env.NODE_ENV !== 'production';\n\nconst DEBUG_STYLES = false\n  ? {\n      rows: {\n        border: '1px solid black',\n      },\n      cols: {\n        border: '1px solid red',\n      },\n    }\n  : {\n      rows: {},\n      cols: {},\n    };\n\nexport function SimpleGrid({\n  columns,\n  spacing,\n  spacingX,\n  spacingY,\n  minChildWidth,\n  children,\n}: ISimpleGridProps): JSX.Element {\n  let cellSpacing = spacing ?? 0;\n  let cellSpacingX = spacingX ?? cellSpacing;\n  let cellSpacingY = spacingY ?? cellSpacing;\n\n  const childrenArray = React.Children.toArray(children);\n  if (columns) {\n    let rowSlices = [];\n    for (let i = 0; i < childrenArray.length; i = i + columns) {\n      rowSlices.push(childrenArray.slice(i, i + columns));\n    }\n\n    return (\n      <VStack {...DEBUG_STYLES.rows} space={cellSpacingY}>\n        {rowSlices.map((row, rowIndex) => {\n          return (\n            <HStack space={cellSpacingX} key={rowIndex}>\n              {row.map((col: any) => {\n                return (\n                  <Box {...DEBUG_STYLES.cols} key={col.key}>\n                    {col}\n                  </Box>\n                );\n              })}\n            </HStack>\n          );\n        })}\n      </VStack>\n    );\n  }\n  // Needs more work for empty spacing i.e. auto-fit. Current workaround is to use wrap and let the columns be created dynamically\n  // https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\n  else if (minChildWidth) {\n    return (\n      <Box flexDirection=\"row\" flexWrap=\"wrap\" justifyContent=\"center\">\n        {childrenArray.map((col: any) => {\n          return (\n            <Box\n              {...DEBUG_STYLES.cols}\n              mx={cellSpacingX}\n              my={cellSpacingY}\n              key={col.key}\n              minWidth={minChildWidth}\n            >\n              {col}\n            </Box>\n          );\n        })}\n      </Box>\n    );\n  }\n\n  return <></>;\n}\n"]},"metadata":{},"sourceType":"script"}