{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/vidhi/Sites/Projects/examples/test/dashboard-next/node_modules/react-native-gesture-handler/touchables/TouchableHighlight.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport GenericTouchable, { TOUCHABLE_STATE } from \"./GenericTouchable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PropTypes from 'prop-types';\n\nvar TouchableHighlight = function (_Component) {\n  _inherits(TouchableHighlight, _Component);\n\n  var _super = _createSuper(TouchableHighlight);\n\n  function TouchableHighlight(props) {\n    var _this;\n\n    _classCallCheck(this, TouchableHighlight);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"showUnderlay\", function () {\n      if (!_this.hasPressHandler()) {\n        return;\n      }\n\n      _this.setState({\n        extraChildStyle: {\n          opacity: _this.props.activeOpacity\n        },\n        extraUnderlayStyle: {\n          backgroundColor: _this.props.underlayColor\n        }\n      });\n\n      _this.props.onShowUnderlay && _this.props.onShowUnderlay();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"hasPressHandler\", function () {\n      return _this.props.onPress || _this.props.onPressIn || _this.props.onPressOut || _this.props.onLongPress;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"hideUnderlay\", function () {\n      _this.setState({\n        extraChildStyle: null,\n        extraUnderlayStyle: null\n      });\n\n      _this.props.onHideUnderlay && _this.props.onHideUnderlay();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onStateChange\", function (from, to) {\n      if (to === TOUCHABLE_STATE.BEGAN) {\n        _this.showUnderlay();\n      } else if (to === TOUCHABLE_STATE.UNDETERMINED || to === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n        _this.hideUnderlay();\n      }\n    });\n\n    _this.state = {\n      extraChildStyle: null,\n      extraUnderlayStyle: null\n    };\n    return _this;\n  }\n\n  _createClass(TouchableHighlight, [{\n    key: \"renderChildren\",\n    value: function renderChildren() {\n      if (!this.props.children) {\n        var _jsx;\n\n        return __jsx(View, (_jsx = {\n          __self: this\n        }, _defineProperty(_jsx, \"__self\", this), _defineProperty(_jsx, \"__source\", {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 14\n        }), _jsx));\n      }\n\n      var child = React.Children.only(this.props.children);\n      return React.cloneElement(child, {\n        style: StyleSheet.compose(child.props.style, this.state.extraChildStyle)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _extends2;\n\n      var _this$props = this.props,\n          _this$props$style = _this$props.style,\n          style = _this$props$style === void 0 ? {} : _this$props$style,\n          rest = _objectWithoutProperties(_this$props, [\"style\"]);\n\n      var extraUnderlayStyle = this.state.extraUnderlayStyle;\n      return __jsx(GenericTouchable, _extends({}, rest, (_extends2 = {\n        style: [style, extraUnderlayStyle],\n        onStateChange: this.onStateChange,\n        __self: this\n      }, _defineProperty(_extends2, \"__self\", this), _defineProperty(_extends2, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }), _extends2)), this.renderChildren());\n    }\n  }]);\n\n  return TouchableHighlight;\n}(Component);\n\n_defineProperty(TouchableHighlight, \"defaultProps\", _objectSpread({}, GenericTouchable.defaultProps, {\n  activeOpacity: 0.85,\n  delayPressOut: 100,\n  underlayColor: 'black'\n}));\n\n_defineProperty(TouchableHighlight, \"propTypes\", _objectSpread({}, GenericTouchable.publicPropTypes, {\n  activeOpacity: PropTypes.number,\n  underlayColor: PropTypes.string,\n  style: PropTypes.any,\n  onShowUnderlay: PropTypes.func,\n  onHideUnderlay: PropTypes.func\n}));\n\nexport { TouchableHighlight as default };","map":{"version":3,"sources":["/Users/vidhi/Sites/Projects/examples/test/dashboard-next/node_modules/react-native-gesture-handler/touchables/TouchableHighlight.js"],"names":["React","Component","GenericTouchable","TOUCHABLE_STATE","PropTypes","TouchableHighlight","props","hasPressHandler","setState","extraChildStyle","opacity","activeOpacity","extraUnderlayStyle","backgroundColor","underlayColor","onShowUnderlay","onPress","onPressIn","onPressOut","onLongPress","onHideUnderlay","from","to","BEGAN","showUnderlay","UNDETERMINED","MOVED_OUTSIDE","hideUnderlay","state","children","child","Children","only","cloneElement","style","StyleSheet","compose","rest","onStateChange","renderChildren","defaultProps","delayPressOut","publicPropTypes","number","string","any","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport GenericTouchable, { TOUCHABLE_STATE } from './GenericTouchable';\nimport { StyleSheet, View } from 'react-native';\nimport PropTypes from 'prop-types';\n\n/**\n * TouchableHighlight follows RN's implementation\n */\nexport default class TouchableHighlight extends Component {\n  static defaultProps = {\n    ...GenericTouchable.defaultProps,\n    activeOpacity: 0.85,\n    delayPressOut: 100,\n    underlayColor: 'black',\n  };\n\n  static propTypes = {\n    ...GenericTouchable.publicPropTypes,\n    activeOpacity: PropTypes.number,\n    underlayColor: PropTypes.string,\n    style: PropTypes.any,\n    onShowUnderlay: PropTypes.func,\n    onHideUnderlay: PropTypes.func,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      extraChildStyle: null,\n      extraUnderlayStyle: null,\n    };\n  }\n\n  // Copied from RN\n  showUnderlay = () => {\n    if (!this.hasPressHandler()) {\n      return;\n    }\n    this.setState({\n      extraChildStyle: {\n        opacity: this.props.activeOpacity,\n      },\n      extraUnderlayStyle: {\n        backgroundColor: this.props.underlayColor,\n      },\n    });\n    this.props.onShowUnderlay && this.props.onShowUnderlay();\n  };\n\n  hasPressHandler = () =>\n    this.props.onPress ||\n    this.props.onPressIn ||\n    this.props.onPressOut ||\n    this.props.onLongPress;\n\n  hideUnderlay = () => {\n    this.setState({\n      extraChildStyle: null,\n      extraUnderlayStyle: null,\n    });\n    this.props.onHideUnderlay && this.props.onHideUnderlay();\n  };\n\n  renderChildren() {\n    if (!this.props.children) {\n      return <View />;\n    }\n\n    const child = React.Children.only(this.props.children);\n    return React.cloneElement(child, {\n      style: StyleSheet.compose(\n        child.props.style,\n        this.state.extraChildStyle\n      ),\n    });\n  }\n\n  onStateChange = (from, to) => {\n    if (to === TOUCHABLE_STATE.BEGAN) {\n      this.showUnderlay();\n    } else if (\n      to === TOUCHABLE_STATE.UNDETERMINED ||\n      to === TOUCHABLE_STATE.MOVED_OUTSIDE\n    ) {\n      this.hideUnderlay();\n    }\n  };\n\n  render() {\n    const { style = {}, ...rest } = this.props;\n    const { extraUnderlayStyle } = this.state;\n    return (\n      <GenericTouchable\n        {...rest}\n        style={[style, extraUnderlayStyle]}\n        onStateChange={this.onStateChange}>\n        {this.renderChildren()}\n      </GenericTouchable>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}