{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/vidhi/Sites/Projects/examples/test/dashboard-next/node_modules/react-native-gesture-handler/touchables/GenericTouchable.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { State, BaseButton } from \"../GestureHandler\";\nimport PropTypes from 'prop-types';\nexport var TOUCHABLE_STATE = {\n  UNDETERMINED: 0,\n  BEGAN: 1,\n  MOVED_OUTSIDE: 2\n};\nvar PublicPropTypes = {\n  accessible: PropTypes.bool,\n  accessibilityLabel: PropTypes.node,\n  accessibilityHint: PropTypes.string,\n  hitSlop: PropTypes.shape({\n    top: PropTypes.number,\n    left: PropTypes.number,\n    bottom: PropTypes.number,\n    right: PropTypes.number\n  }),\n  disabled: PropTypes.bool,\n  onPress: PropTypes.func,\n  onPressIn: PropTypes.func,\n  onPressOut: PropTypes.func,\n  onLayout: PropTypes.func,\n  onLongPress: PropTypes.func,\n  nativeID: PropTypes.string,\n  testID: PropTypes.string,\n  delayPressIn: PropTypes.number,\n  delayPressOut: PropTypes.number,\n  delayLongPress: PropTypes.number,\n  shouldActivateOnStart: PropTypes.bool,\n  disallowInterruption: PropTypes.bool\n};\nvar InternalPropTypes = {\n  extraButtonProps: PropTypes.object,\n  onStateChange: PropTypes.func\n};\n\nvar GenericTouchable = function (_Component) {\n  _inherits(GenericTouchable, _Component);\n\n  var _super = _createSuper(GenericTouchable);\n\n  function GenericTouchable() {\n    var _this;\n\n    _classCallCheck(this, GenericTouchable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"pressInTimeout\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"pressOutTimeout\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"longPressTimeout\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"longPressDetected\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"pointerInside\", true);\n\n    _defineProperty(_assertThisInitialized(_this), \"STATE\", TOUCHABLE_STATE.UNDETERMINED);\n\n    _defineProperty(_assertThisInitialized(_this), \"onGestureEvent\", function (_ref) {\n      var pointerInside = _ref.nativeEvent.pointerInside;\n\n      if (_this.pointerInside !== pointerInside) {\n        if (pointerInside) {\n          _this.onMoveIn();\n        } else {\n          _this.onMoveOut();\n        }\n      }\n\n      _this.pointerInside = pointerInside;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onHandlerStateChange\", function (_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n      var state = nativeEvent.state;\n\n      if (state === State.CANCELLED || state === State.FAILED) {\n        _this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n      } else if (state === (Platform.OS !== 'android' ? State.ACTIVE : State.BEGAN) && _this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n        _this.handlePressIn();\n      } else if (state === State.END) {\n        var shouldCallOnPress = !_this.longPressDetected && _this.STATE !== TOUCHABLE_STATE.MOVED_OUTSIDE && _this.pressOutTimeout === null;\n\n        _this.handleGoToUndetermined();\n\n        if (shouldCallOnPress) {\n          _this.props.onPress && _this.props.onPress();\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onLongPressDetected\", function () {\n      _this.longPressDetected = true;\n\n      _this.props.onLongPress();\n    });\n\n    return _this;\n  }\n\n  _createClass(GenericTouchable, [{\n    key: \"handlePressIn\",\n    value: function handlePressIn() {\n      var _this2 = this;\n\n      if (this.props.delayPressIn) {\n        this.pressInTimeout = setTimeout(function () {\n          _this2.moveToState(TOUCHABLE_STATE.BEGAN);\n\n          _this2.pressInTimeout = null;\n        }, this.props.delayPressIn);\n      } else {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n      }\n\n      if (this.props.onLongPress) {\n        var time = (this.props.delayPressIn || 0) + (this.props.delayLongPress || 0);\n        this.longPressTimeout = setTimeout(this.onLongPressDetected, time);\n      }\n    }\n  }, {\n    key: \"handleMoveOutside\",\n    value: function handleMoveOutside() {\n      var _this3 = this;\n\n      if (this.props.delayPressOut) {\n        this.pressOutTimeout = this.pressOutTimeout || setTimeout(function () {\n          _this3.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n\n          _this3.pressOutTimeout = null;\n        }, this.props.delayPressOut);\n      } else {\n        this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n      }\n    }\n  }, {\n    key: \"handleGoToUndetermined\",\n    value: function handleGoToUndetermined() {\n      var _this4 = this;\n\n      clearTimeout(this.pressOutTimeout);\n\n      if (this.props.delayPressOut) {\n        this.pressOutTimeout = setTimeout(function () {\n          if (_this4.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n            _this4.moveToState(TOUCHABLE_STATE.BEGAN);\n          }\n\n          _this4.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n\n          _this4.pressOutTimeout = null;\n        }, this.props.delayPressOut);\n      } else {\n        if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n          this.moveToState(TOUCHABLE_STATE.BEGAN);\n        }\n\n        this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.reset();\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.longPressDetected = false;\n      this.pointerInside = true;\n      clearTimeout(this.pressInTimeout);\n      clearTimeout(this.pressOutTimeout);\n      clearTimeout(this.longPressTimeout);\n      this.pressOutTimeout = null;\n      this.longPressTimeout = null;\n      this.pressInTimeout = null;\n    }\n  }, {\n    key: \"moveToState\",\n    value: function moveToState(newState) {\n      if (newState === this.STATE) {\n        return;\n      }\n\n      if (newState === TOUCHABLE_STATE.BEGAN) {\n        this.props.onPressIn && this.props.onPressIn();\n      } else if (newState === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n        this.props.onPressOut && this.props.onPressOut();\n      } else if (newState === TOUCHABLE_STATE.UNDETERMINED) {\n        this.reset();\n\n        if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n          this.props.onPressOut && this.props.onPressOut();\n        }\n      }\n\n      this.props.onStateChange && this.props.onStateChange(this.STATE, newState);\n      this.STATE = newState;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.reset();\n    }\n  }, {\n    key: \"onMoveIn\",\n    value: function onMoveIn() {\n      if (this.STATE === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n      }\n    }\n  }, {\n    key: \"onMoveOut\",\n    value: function onMoveOut() {\n      clearTimeout(this.longPressTimeout);\n      this.longPressTimeout = null;\n\n      if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n        this.handleMoveOutside();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _extends2, _extends3;\n\n      var coreProps = {\n        accessible: this.props.accessible !== false,\n        accessibilityLabel: this.props.accessibilityLabel,\n        accessibilityHint: this.props.accessibilityHint,\n        accessibilityComponentType: this.props.accessibilityComponentType,\n        accessibilityRole: this.props.accessibilityRole,\n        accessibilityStates: this.props.accessibilityStates,\n        accessibilityTraits: this.props.accessibilityTraits,\n        nativeID: this.props.nativeID,\n        onLayout: this.props.onLayout,\n        hitSlop: this.props.hitSlop\n      };\n      return __jsx(BaseButton, _extends({\n        style: this.props.containerStyle,\n        onHandlerStateChange: this.props.disabled ? null : this.onHandlerStateChange,\n        onGestureEvent: this.onGestureEvent,\n        hitSlop: this.props.hitSlop,\n        shouldActivateOnStart: this.props.shouldActivateOnStart,\n        disallowInterruption: this.props.disallowInterruption,\n        testID: this.props.testID\n      }, this.props.extraButtonProps, (_extends3 = {\n        __self: this\n      }, _defineProperty(_extends3, \"__self\", this), _defineProperty(_extends3, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 7\n      }), _extends3)), __jsx(Animated.View, _extends({}, coreProps, (_extends2 = {\n        style: this.props.style,\n        __self: this\n      }, _defineProperty(_extends2, \"__self\", this), _defineProperty(_extends2, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }), _extends2)), this.props.children));\n    }\n  }]);\n\n  return GenericTouchable;\n}(Component);\n\n_defineProperty(GenericTouchable, \"publicPropTypes\", PublicPropTypes);\n\n_defineProperty(GenericTouchable, \"internalPropTypes\", InternalPropTypes);\n\n_defineProperty(GenericTouchable, \"propTypes\", _objectSpread({}, InternalPropTypes, {}, PublicPropTypes));\n\n_defineProperty(GenericTouchable, \"defaultProps\", {\n  delayLongPress: 600,\n  extraButtonProps: {\n    rippleColor: 'transparent'\n  }\n});\n\nexport { GenericTouchable as default };","map":{"version":3,"sources":["/Users/vidhi/Sites/Projects/examples/test/dashboard-next/node_modules/react-native-gesture-handler/touchables/GenericTouchable.js"],"names":["React","Component","State","BaseButton","PropTypes","TOUCHABLE_STATE","UNDETERMINED","BEGAN","MOVED_OUTSIDE","PublicPropTypes","accessible","bool","accessibilityLabel","node","accessibilityHint","string","hitSlop","shape","top","number","left","bottom","right","disabled","onPress","func","onPressIn","onPressOut","onLayout","onLongPress","nativeID","testID","delayPressIn","delayPressOut","delayLongPress","shouldActivateOnStart","disallowInterruption","InternalPropTypes","extraButtonProps","object","onStateChange","GenericTouchable","pointerInside","nativeEvent","onMoveIn","onMoveOut","state","CANCELLED","FAILED","moveToState","Platform","OS","ACTIVE","STATE","handlePressIn","END","shouldCallOnPress","longPressDetected","pressOutTimeout","handleGoToUndetermined","props","pressInTimeout","setTimeout","time","longPressTimeout","onLongPressDetected","clearTimeout","reset","newState","handleMoveOutside","coreProps","accessibilityComponentType","accessibilityRole","accessibilityStates","accessibilityTraits","containerStyle","onHandlerStateChange","onGestureEvent","style","children","rippleColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Animated, Platform } from 'react-native';\nimport { State, BaseButton } from '../GestureHandler';\nimport PropTypes from 'prop-types';\n\n/**\n * Each touchable is a states' machine which preforms transitions.\n * On very beginning (and on the very end or recognition) touchable is\n * UNDETERMINED. Then it moves to BEGAN. If touchable recognizes that finger\n * travel outside it transits to special MOVED_OUTSIDE state. Gesture recognition\n * finishes in UNDETERMINED state.\n */\nexport const TOUCHABLE_STATE = {\n  UNDETERMINED: 0,\n  BEGAN: 1,\n  MOVED_OUTSIDE: 2,\n};\n\nconst PublicPropTypes = {\n  // Decided to drop not used fields from RN's implementation.\n  // e.g. onBlur and onFocus as well as deprecated props.\n  accessible: PropTypes.bool,\n  accessibilityLabel: PropTypes.node,\n  accessibilityHint: PropTypes.string,\n  hitSlop: PropTypes.shape({\n    top: PropTypes.number,\n    left: PropTypes.number,\n    bottom: PropTypes.number,\n    right: PropTypes.number,\n  }),\n  disabled: PropTypes.bool,\n  onPress: PropTypes.func,\n  onPressIn: PropTypes.func,\n  onPressOut: PropTypes.func,\n  onLayout: PropTypes.func,\n  onLongPress: PropTypes.func,\n  nativeID: PropTypes.string,\n  testID: PropTypes.string,\n  delayPressIn: PropTypes.number,\n  delayPressOut: PropTypes.number,\n  delayLongPress: PropTypes.number,\n  shouldActivateOnStart: PropTypes.bool,\n  disallowInterruption: PropTypes.bool,\n};\n\nconst InternalPropTypes = {\n  extraButtonProps: PropTypes.object,\n  onStateChange: PropTypes.func,\n};\n\n/**\n * GenericTouchable is not intented to be used as it.\n * Should be treated as a source for the rest of touchables\n */\n\nexport default class GenericTouchable extends Component {\n  static publicPropTypes = PublicPropTypes;\n  static internalPropTypes = InternalPropTypes;\n\n  // The prop type collections have to be outside of the class, as metro\n  // at this time does not compile `this.foo` correctly if HMR is enabled.\n  // https://github.com/software-mansion/react-native-gesture-handler/pull/406#issuecomment-453779977\n  static propTypes = {\n    ...InternalPropTypes,\n    ...PublicPropTypes,\n  };\n\n  static defaultProps = {\n    delayLongPress: 600,\n    extraButtonProps: {\n      rippleColor: 'transparent',\n    },\n  };\n\n  // timeout handlers\n  pressInTimeout;\n  pressOutTimeout;\n  longPressTimeout;\n\n  // This flag is required since recognition of longPress implies not-invoking onPress\n  longPressDetected = false;\n\n  pointerInside = true;\n\n  // State of touchable\n  STATE = TOUCHABLE_STATE.UNDETERMINED;\n\n  // handlePressIn in called on first touch on traveling inside component.\n  // Handles state transition with delay.\n  handlePressIn() {\n    if (this.props.delayPressIn) {\n      this.pressInTimeout = setTimeout(() => {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n        this.pressInTimeout = null;\n      }, this.props.delayPressIn);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n    if (this.props.onLongPress) {\n      const time =\n        (this.props.delayPressIn || 0) + (this.props.delayLongPress || 0);\n      this.longPressTimeout = setTimeout(this.onLongPressDetected, time);\n    }\n  }\n  // handleMoveOutside in called on traveling outside component.\n  // Handles state transition with delay.\n  handleMoveOutside() {\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout =\n        this.pressOutTimeout ||\n        setTimeout(() => {\n          this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n          this.pressOutTimeout = null;\n        }, this.props.delayPressOut);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n    }\n  }\n\n  // handleGoToUndetermined transits to UNDETERMINED state with proper delay\n  handleGoToUndetermined() {\n    clearTimeout(this.pressOutTimeout);\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout = setTimeout(() => {\n        if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n          this.moveToState(TOUCHABLE_STATE.BEGAN);\n        }\n        this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n        this.pressOutTimeout = null;\n      }, this.props.delayPressOut);\n    } else {\n      if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n      }\n      this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n    }\n  }\n\n  componentDidMount() {\n    this.reset();\n  }\n  // reset timeout to prevent memory leaks.\n  reset() {\n    this.longPressDetected = false;\n    this.pointerInside = true;\n    clearTimeout(this.pressInTimeout);\n    clearTimeout(this.pressOutTimeout);\n    clearTimeout(this.longPressTimeout);\n    this.pressOutTimeout = null;\n    this.longPressTimeout = null;\n    this.pressInTimeout = null;\n  }\n\n  // All states' transitions are defined here.\n  moveToState(newState) {\n    if (newState === this.STATE) {\n      // Ignore dummy transitions\n      return;\n    }\n    if (newState === TOUCHABLE_STATE.BEGAN) {\n      // First touch and moving inside\n      this.props.onPressIn && this.props.onPressIn();\n    } else if (newState === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      // Moving outside\n      this.props.onPressOut && this.props.onPressOut();\n    } else if (newState === TOUCHABLE_STATE.UNDETERMINED) {\n      // Need to reset each time on transition to UNDETERMINED\n      this.reset();\n      if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n        // ... and if it happens inside button.\n        this.props.onPressOut && this.props.onPressOut();\n      }\n    }\n    // Finally call lister (used by subclasses)\n    this.props.onStateChange && this.props.onStateChange(this.STATE, newState);\n    // ... and make transition.\n    this.STATE = newState;\n  }\n\n  onGestureEvent = ({ nativeEvent: { pointerInside } }) => {\n    if (this.pointerInside !== pointerInside) {\n      if (pointerInside) {\n        this.onMoveIn();\n      } else {\n        this.onMoveOut();\n      }\n    }\n    this.pointerInside = pointerInside;\n  };\n\n  onHandlerStateChange = ({ nativeEvent }) => {\n    const { state } = nativeEvent;\n    if (state === State.CANCELLED || state === State.FAILED) {\n      // Need to handle case with external cancellation (e.g. by ScrollView)\n      this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n    } else if (\n      // This platform check is an implication of slightly different behavior of handlers on different platform.\n      // And Android \"Active\" state is achieving on first move of a finger, not on press in.\n      // On iOS event on \"Began\" is not delivered.\n      state === (Platform.OS !== 'android' ? State.ACTIVE : State.BEGAN) &&\n      this.STATE === TOUCHABLE_STATE.UNDETERMINED\n    ) {\n      // Moving inside requires\n      this.handlePressIn();\n    } else if (state === State.END) {\n      const shouldCallOnPress =\n        !this.longPressDetected &&\n        this.STATE !== TOUCHABLE_STATE.MOVED_OUTSIDE &&\n        this.pressOutTimeout === null;\n      this.handleGoToUndetermined();\n      if (shouldCallOnPress) {\n        // Calls only inside component whether no long press was called previously\n        this.props.onPress && this.props.onPress();\n      }\n    }\n  };\n\n  onLongPressDetected = () => {\n    this.longPressDetected = true;\n    this.props.onLongPress();\n  };\n\n  componentWillUnmount() {\n    // to prevent memory leaks\n    this.reset();\n  }\n\n  onMoveIn() {\n    if (this.STATE === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      // This call is not throttled with delays (like in RN's implementation).\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n  }\n\n  onMoveOut() {\n    // long press should no longer be detected\n    clearTimeout(this.longPressTimeout);\n    this.longPressTimeout = null;\n    if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n      this.handleMoveOutside();\n    }\n  }\n\n  render() {\n    const coreProps = {\n      accessible: this.props.accessible !== false,\n      accessibilityLabel: this.props.accessibilityLabel,\n      accessibilityHint: this.props.accessibilityHint,\n      accessibilityComponentType: this.props.accessibilityComponentType,\n      accessibilityRole: this.props.accessibilityRole,\n      accessibilityStates: this.props.accessibilityStates,\n      accessibilityTraits: this.props.accessibilityTraits,\n      nativeID: this.props.nativeID,\n      onLayout: this.props.onLayout,\n      hitSlop: this.props.hitSlop,\n    };\n\n    return (\n      <BaseButton\n        style={this.props.containerStyle}\n        onHandlerStateChange={\n          this.props.disabled ? null : this.onHandlerStateChange\n        }\n        onGestureEvent={this.onGestureEvent}\n        hitSlop={this.props.hitSlop}\n        shouldActivateOnStart={this.props.shouldActivateOnStart}\n        disallowInterruption={this.props.disallowInterruption}\n        testID={this.props.testID}\n        {...this.props.extraButtonProps}>\n        <Animated.View {...coreProps} style={this.props.style}>\n          {this.props.children}\n        </Animated.View>\n      </BaseButton>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}