{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/vidhi/Sites/Projects/examples/test/dashboard-next/node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/lib/create-icon-set.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ensureNativeModuleAvailable from \"./ensure-native-module-available\";\nimport createIconButtonComponent from \"./icon-button\";\nimport createTabBarItemIOSComponent from \"./tab-bar-item-ios\";\nimport createToolbarAndroidComponent from \"./toolbar-android\";\nexport var NativeIconAPI = NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\nexport var DEFAULT_ICON_SIZE = 12;\nexport var DEFAULT_ICON_COLOR = 'black';\nexport default function createIconSet(glyphMap, fontFamily, fontFile, fontStyle) {\n  var fontBasename = fontFile ? fontFile.replace(/\\.(otf|ttf)$/, '') : fontFamily;\n  var fontReference = Platform.select({\n    windows: \"Assets/\".concat(fontFile, \"#\").concat(fontFamily),\n    android: fontBasename,\n    web: fontBasename,\n    \"default\": fontFamily\n  });\n  var IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  var Icon = function (_PureComponent) {\n    _inherits(Icon, _PureComponent);\n\n    var _super = _createSuper(Icon);\n\n    function Icon() {\n      var _this;\n\n      _classCallCheck(this, Icon);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n\n      _defineProperty(_assertThisInitialized(_this), \"root\", null);\n\n      _defineProperty(_assertThisInitialized(_this), \"handleRef\", function (ref) {\n        _this.root = ref;\n      });\n\n      return _this;\n    }\n\n    _createClass(Icon, [{\n      key: \"setNativeProps\",\n      value: function setNativeProps(nativeProps) {\n        if (this.root) {\n          this.root.setNativeProps(nativeProps);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _extends2;\n\n        var _this$props = this.props,\n            name = _this$props.name,\n            size = _this$props.size,\n            color = _this$props.color,\n            style = _this$props.style,\n            children = _this$props.children,\n            props = _objectWithoutProperties(_this$props, [\"name\", \"size\", \"color\", \"style\", \"children\"]);\n\n        var glyph = name ? glyphMap[name] || '?' : '';\n\n        if (typeof glyph === 'number') {\n          glyph = String.fromCharCode(glyph);\n        }\n\n        var styleDefaults = {\n          fontSize: size,\n          color: color\n        };\n        var styleOverrides = {\n          fontFamily: fontReference,\n          fontWeight: 'normal',\n          fontStyle: 'normal'\n        };\n        props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n        props.ref = this.handleRef;\n        return __jsx(Text, _extends({}, props, (_extends2 = {\n          __self: this\n        }, _defineProperty(_extends2, \"__self\", this), _defineProperty(_extends2, \"__source\", {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }), _extends2)), glyph, children);\n      }\n    }]);\n\n    return Icon;\n  }(PureComponent);\n\n  _defineProperty(Icon, \"propTypes\", {\n    allowFontScaling: PropTypes.bool,\n    name: IconNamePropType,\n    size: PropTypes.number,\n    color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    children: PropTypes.node,\n    style: PropTypes.any\n  });\n\n  _defineProperty(Icon, \"defaultProps\", {\n    size: DEFAULT_ICON_SIZE,\n    allowFontScaling: false\n  });\n\n  var imageSourceCache = {};\n\n  function getImageSource(name) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;\n    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;\n    ensureNativeModuleAvailable();\n    var glyph = glyphMap[name] || '?';\n\n    if (typeof glyph === 'number') {\n      glyph = String.fromCharCode(glyph);\n    }\n\n    var processedColor = processColor(color);\n    var cacheKey = \"\".concat(glyph, \":\").concat(size, \":\").concat(processedColor);\n    var scale = PixelRatio.get();\n    return new Promise(function (resolve, reject) {\n      var cached = imageSourceCache[cacheKey];\n\n      if (typeof cached !== 'undefined') {\n        if (!cached || cached instanceof Error) {\n          reject(cached);\n        } else {\n          resolve({\n            uri: cached,\n            scale: scale\n          });\n        }\n      } else {\n        NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor, function (err, image) {\n          var error = typeof err === 'string' ? new Error(err) : err;\n          imageSourceCache[cacheKey] = image || error || false;\n\n          if (!error && image) {\n            resolve({\n              uri: image,\n              scale: scale\n            });\n          } else {\n            reject(error);\n          }\n        });\n      }\n    });\n  }\n\n  function loadFont() {\n    var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;\n\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n\n      if (!file) {\n        return Promise.reject(new Error('Unable to load font, because no file was specified. '));\n      }\n\n      return NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI, _toConsumableArray(file.split('.')));\n    }\n\n    return Promise.resolve();\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.TabBarItem = createTabBarItemIOSComponent(IconNamePropType, getImageSource);\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.ToolbarAndroid = createToolbarAndroidComponent(IconNamePropType, getImageSource);\n  Icon.getImageSource = getImageSource;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n  return Icon;\n}","map":{"version":3,"sources":["/Users/vidhi/Sites/Projects/examples/test/dashboard-next/node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/lib/create-icon-set.js"],"names":["React","PureComponent","PropTypes","ensureNativeModuleAvailable","createIconButtonComponent","createTabBarItemIOSComponent","createToolbarAndroidComponent","NativeIconAPI","NativeModules","RNVectorIconsManager","RNVectorIconsModule","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","createIconSet","glyphMap","fontFamily","fontFile","fontStyle","fontBasename","replace","fontReference","Platform","select","windows","android","web","IconNamePropType","oneOf","Object","keys","Icon","ref","root","nativeProps","setNativeProps","props","name","size","color","style","children","glyph","String","fromCharCode","styleDefaults","fontSize","styleOverrides","fontWeight","handleRef","allowFontScaling","bool","number","oneOfType","string","node","any","imageSourceCache","getImageSource","processedColor","processColor","cacheKey","scale","PixelRatio","get","Promise","resolve","reject","cached","Error","uri","getImageForFont","err","image","error","loadFont","file","OS","loadFontWithFileName","split","hasIcon","prototype","hasOwnProperty","call","getRawGlyphMap","getFontFamily","Button","TabBarItem","TabBarItemIOS","ToolbarAndroid"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { NativeModules, Platform, PixelRatio, processColor, Text } from 'react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconButtonComponent from './icon-button';\nimport createTabBarItemIOSComponent from './tab-bar-item-ios';\nimport createToolbarAndroidComponent from './toolbar-android';\n\nexport const NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends PureComponent {\n    static propTypes = {\n      allowFontScaling: PropTypes.bool,\n      name: IconNamePropType,\n      size: PropTypes.number,\n      color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      children: PropTypes.node,\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    };\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    root = null;\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCharCode(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n\n      return (\n        <Text {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = {};\n\n  function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    let glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      glyph = String.fromCharCode(glyph);\n    }\n\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n    const scale = PixelRatio.get();\n\n    return new Promise((resolve, reject) => {\n      const cached = imageSourceCache[cacheKey];\n      if (typeof cached !== 'undefined') {\n        if (!cached || cached instanceof Error) {\n          reject(cached);\n        } else {\n          resolve({ uri: cached, scale });\n        }\n      } else {\n        NativeIconAPI.getImageForFont(\n          fontReference,\n          glyph,\n          size,\n          processedColor,\n          (err, image) => {\n            const error = typeof err === 'string' ? new Error(err) : err;\n            imageSourceCache[cacheKey] = image || error || false;\n            if (!error && image) {\n              resolve({ uri: image, scale });\n            } else {\n              reject(error);\n            }\n          }\n        );\n      }\n    });\n  }\n\n  function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        return Promise.reject(\n          new Error('Unable to load font, because no file was specified. ')\n        );\n      }\n      return NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n    return Promise.resolve();\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.TabBarItem = createTabBarItemIOSComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.ToolbarAndroid = createToolbarAndroidComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.getImageSource = getImageSource;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"]},"metadata":{},"sourceType":"module"}