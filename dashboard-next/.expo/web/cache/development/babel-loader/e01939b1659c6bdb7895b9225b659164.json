{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _native = _interopRequireDefault(require(\"styled-components/native\"));\n\nvar _styledSystem = require(\"styled-system\");\n\nvar _customProps = require(\"../../../utils/customProps\");\n\nvar _hooks = require(\"../../../hooks\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar StyledDivider = (0, _native[\"default\"])(_reactNative.View)(_styledSystem.color, _styledSystem.space, _styledSystem.layout, _styledSystem.flexbox, _styledSystem.border, _customProps.customBorder, _customProps.customBackground, _customProps.customOutline, _customProps.customShadow, _customProps.customExtra, _customProps.customLayout);\n\nvar Divider = function Divider(_ref) {\n  var style = _ref.style,\n      orientation = _ref.orientation,\n      props = _objectWithoutProperties(_ref, [\"style\", \"orientation\"]);\n\n  var orientationProps = orientation === 'vertical' ? {\n    width: 0,\n    height: '100%'\n  } : {\n    width: '100%',\n    height: 0\n  };\n  var newProps = (0, _hooks.usePropsConfig)('Divider', props);\n  return _react[\"default\"].createElement(StyledDivider, _extends({}, orientationProps, newProps, {\n    style: style\n  }));\n};\n\nvar _default = Divider;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["index.tsx"],"names":["StyledDivider","View","color","space","layout","flexbox","border","customBorder","customBackground","customOutline","customShadow","customExtra","customLayout","Divider","props","orientationProps","width","height","newProps","style"],"mappings":";;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAEA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,8BAAA;;AAUA,IAAA,MAAA,GAAA,OAAA,kBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,aAAa,GAAG,CAAA,GAAA,OAAA,WAAA,EAAOC,YAAAA,CAAP,IAAA,EACpBC,aAAAA,CADoB,KAAA,EAEpBC,aAAAA,CAFoB,KAAA,EAGpBC,aAAAA,CAHoB,MAAA,EAIpBC,aAAAA,CAJoB,OAAA,EAKpBC,aAAAA,CALoB,MAAA,EAMpBC,YAAAA,CANoB,YAAA,EAOpBC,YAAAA,CAPoB,gBAAA,EAQpBC,YAAAA,CARoB,aAAA,EASpBC,YAAAA,CAToB,YAAA,EAUpBC,YAAAA,CAVoB,WAAA,EAWpBC,YAAAA,CAXF,YAAsB,CAAtB;;AAaA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAqD;AAAA,MAApD,KAAoD,QAApD,KAAoD;AAAA,MAApD,WAAoD,QAApD,WAAoD;AAAA,MAA3BC,KAA2B;;AACnE,MAAIC,gBAAgB,GAClB,WAAW,KAAX,UAAA,GACI;AACEC,IAAAA,KAAK,EADP,CAAA;AAEEC,IAAAA,MAAM,EAAE;AAFV,GADJ,GAKI;AACED,IAAAA,KAAK,EADP,MAAA;AAEEC,IAAAA,MAAM,EAAE;AAFV,GANN;AAUA,MAAIC,QAAQ,GAAG,CAAA,GAAA,MAAA,CAAA,cAAA,EAAA,SAAA,EAAf,KAAe,CAAf;AAEA,SAAO,MAAA,WAAA,CAAA,aAAA,CAAA,aAAA,EAAA,QAAA,CAAA,EAAA,EAAA,gBAAA,EAAA,QAAA,EAAA;AAAmD,IAAA,KAAK,EAAEC;AAA1D,GAAA,CAAA,CAAP;AAbF,CAAA;;eAgBeN,O","sourcesContent":["import React from 'react';\nimport { View } from 'react-native';\nimport styled from 'styled-components/native';\nimport { border, color, flexbox, layout, space } from 'styled-system';\nimport {\n  customBorder,\n  customBackground,\n  customOutline,\n  customLayout,\n  customExtra,\n  customShadow,\n} from '../../../utils/customProps';\n\nimport type { IDividerProps } from './props';\nimport { usePropsConfig } from '../../../hooks';\n\nconst StyledDivider = styled(View)<IDividerProps>(\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  customBorder,\n  customBackground,\n  customOutline,\n  customShadow,\n  customExtra,\n  customLayout\n);\nconst Divider = ({ style, orientation, ...props }: IDividerProps) => {\n  let orientationProps =\n    orientation === 'vertical'\n      ? {\n          width: 0,\n          height: '100%',\n        }\n      : {\n          width: '100%',\n          height: 0,\n        };\n  let newProps = usePropsConfig('Divider', props);\n\n  return <StyledDivider {...orientationProps} {...newProps} style={style} />;\n};\n\nexport default Divider;\nexport type { IDividerProps };\n"]},"metadata":{},"sourceType":"script"}