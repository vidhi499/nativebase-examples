{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _Box = _interopRequireDefault(require(\"../../primitives/Box\"));\n\nvar _Context = require(\"./Context\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar AccordionItem = function AccordionItem(_ref) {\n  var children = _ref.children,\n      _ref$index = _ref.index,\n      pIndex = _ref$index === void 0 ? 0 : _ref$index,\n      isDisabled = _ref.isDisabled,\n      props = _objectWithoutProperties(_ref, [\"children\", \"index\", \"isDisabled\"]);\n\n  var _react$default$useCon = _react[\"default\"].useContext(_Context.AccordionContext),\n      cIndex = _react$default$useCon.index,\n      changeHandler = _react$default$useCon.changeHandler;\n\n  var isOpen = cIndex === null || cIndex === void 0 ? void 0 : cIndex.includes(pIndex);\n\n  var onClose = function onClose(cb) {\n    changeHandler && changeHandler(false, pIndex);\n    cb && cb();\n  };\n\n  var onOpen = function onOpen(cb) {\n    changeHandler && changeHandler(true, pIndex);\n    cb && cb();\n  };\n\n  var childSetter = function childSetter() {\n    if (typeof children === 'function') return children({\n      isExpanded: isOpen,\n      isDisabled: isDisabled\n    });\n    return children;\n  };\n\n  return _react[\"default\"].createElement(_Context.AccordionItemContext.Provider, {\n    value: {\n      isOpen: isOpen,\n      isDisabled: isDisabled,\n      onClose: onClose,\n      onOpen: onOpen\n    }\n  }, _react[\"default\"].createElement(_Box[\"default\"], props, childSetter()));\n};\n\nvar _default = AccordionItem;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["AccordionItem.tsx"],"names":["AccordionItem","index","pIndex","props","changeHandler","React","AccordionContext","isOpen","cIndex","onClose","cb","onOpen","childSetter","children","isExpanded","isDisabled"],"mappings":";;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,wBAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,aAAA;;;;;;;;AAGA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,OAKK;AAAA,MALJ,QAKI,QALJ,QAKI;AAAA,wBAHzBC,KAGyB;AAAA,MAHlBC,MAGkB,2BALJ,CAKI;AAAA,MALJ,UAKI,QALJ,UAKI;AAAA,MADtBC,KACsB;;AAAA,8BAIGE,MAAAA,WAAAA,CAAAA,UAAAA,CAAiBC,QAAAA,CAH7C,gBAG4BD,CAJH;AAAA,MACnB,MADmB,yBAEvBJ,KAFuB;AAAA,MAGvBG,aAHuB,yBAGvBA,aAHuB;;AAKzB,MAAMG,MAAM,GAAGC,MAAH,KAAA,IAAGA,IAAAA,MAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAAA,MAAM,CAANA,QAAAA,CAAf,MAAeA,CAAf;;AACA,MAAMC,OAAO,GAAIC,SAAXD,OAAWC,CAAAA,EAAD,EAAqB;AACnCN,IAAAA,aAAa,IAAIA,aAAa,CAAA,KAAA,EAA9BA,MAA8B,CAA9BA;AACAM,IAAAA,EAAE,IAAIA,EAANA,EAAAA;AAFF,GAAA;;AAIA,MAAMC,MAAM,GAAID,SAAVC,MAAUD,CAAAA,EAAD,EAAqB;AAClCN,IAAAA,aAAa,IAAIA,aAAa,CAAA,IAAA,EAA9BA,MAA8B,CAA9BA;AACAM,IAAAA,EAAE,IAAIA,EAANA,EAAAA;AAFF,GAAA;;AAIA,MAAME,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,QAAI,OAAA,QAAA,KAAJ,UAAA,EACE,OAAOC,QAAQ,CAAC;AAAEC,MAAAA,UAAU,EAAZ,MAAA;AAAsBC,MAAAA,UAAAA,EAAAA;AAAtB,KAAD,CAAf;AACF,WAAA,QAAA;AAHF,GAAA;;AAKA,SACE,MAAA,WAAA,CAAA,aAAA,CAAC,QAAA,CAAD,oBAAC,CAAD,QAAA,EAAA;AACE,IAAA,KAAK,EAAE;AACLR,MAAAA,MADK,EACLA,MADK;AAELQ,MAAAA,UAFK,EAELA,UAFK;AAGLN,MAAAA,OAHK,EAGLA,OAHK;AAILE,MAAAA,MAAAA,EAAAA;AAJK;AADT,GAAA,EAQE,MAAA,WAAA,CAAA,aAAA,CAAC,IAAD,WAAA,EAAA,KAAA,EAAiBC,WATrB,EASI,CARF,CADF;AAxBF,CAAA;;eAsCeZ,a","sourcesContent":["import React from 'react';\nimport Box from '../../primitives/Box';\nimport { AccordionContext, AccordionItemContext } from './Context';\nimport type { IAccordionItemProps, IAccordionContextProps } from './props';\n\nconst AccordionItem = ({\n  children,\n  index: pIndex = 0,\n  isDisabled,\n  ...props\n}: IAccordionItemProps) => {\n  const {\n    index: cIndex,\n    changeHandler,\n  }: IAccordionContextProps = React.useContext(AccordionContext);\n  const isOpen = cIndex?.includes(pIndex);\n  const onClose = (cb?: () => void) => {\n    changeHandler && changeHandler(false, pIndex);\n    cb && cb();\n  };\n  const onOpen = (cb?: () => void) => {\n    changeHandler && changeHandler(true, pIndex);\n    cb && cb();\n  };\n  const childSetter = () => {\n    if (typeof children === 'function')\n      return children({ isExpanded: isOpen, isDisabled });\n    return children;\n  };\n  return (\n    <AccordionItemContext.Provider\n      value={{\n        isOpen,\n        isDisabled,\n        onClose,\n        onOpen,\n      }}\n    >\n      <Box {...props}>{childSetter()}</Box>\n    </AccordionItemContext.Provider>\n  );\n};\n\nexport default AccordionItem;\n"]},"metadata":{},"sourceType":"script"}