{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useCheckboxGroup = useCheckboxGroup;\n\nvar _hooks = require(\"../../../hooks\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction useCheckboxGroup(props, _state, _ref) {\n  var propValue = props.value,\n      defaultValue = props.defaultValue,\n      onChangeProp = props.onChange;\n\n  var _react$default$useSta = _react[\"default\"].useState(defaultValue || []),\n      _react$default$useSta2 = _slicedToArray(_react$default$useSta, 2),\n      stateValue = _react$default$useSta2[0],\n      setStateValue = _react$default$useSta2[1];\n\n  var _ref2 = (0, _hooks.useControllableProp)(propValue, stateValue),\n      _ref3 = _slicedToArray(_ref2, 2),\n      isControlled = _ref3[0],\n      value = _ref3[1];\n\n  var onChange = function onChange(checkboxValue, isChecked) {\n    var valuesSet = new Set(value);\n    if (isChecked) valuesSet.add(checkboxValue);else valuesSet[\"delete\"](checkboxValue);\n\n    if (!isControlled) {\n      setStateValue(_toConsumableArray(valuesSet));\n    }\n\n    onChangeProp && onChangeProp(_toConsumableArray(valuesSet));\n  };\n\n  return {\n    checkboxGroupProps: {\n      onChange: onChange,\n      values: value\n    }\n  };\n}","map":{"version":3,"sources":["useCheckboxGroup.tsx"],"names":["value","onChange","onChangeProp","React","defaultValue","valuesSet","setStateValue","checkboxGroupProps","values"],"mappings":";;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,kBAAA;;AACA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;;;;;AAOO,SAAA,gBAAA,CAAA,KAAA,EAAA,MAAA,EAAA,IAAA,EAIwB;AAAA,MACvB,SADuB,GAC7B,KAD6B,CACrBA,KADqB;AAAA,MACvB,YADuB,GAC7B,KAD6B,CACvB,YADuB;AAAA,MACqBE,YADrB,GAC7B,KAD6B,CACWD,QADX;;AAAA,8BAGOE,MAAAA,WAAAA,CAAAA,QAAAA,CAAeC,YAAY,IAA/D,EAAoCD,CAHP;AAAA;AAAA,MAGvB,UAHuB;AAAA,MAGvB,aAHuB;;AAAA,cAKC,CAAA,GAAA,MAAA,CAAA,mBAAA,EAAA,SAAA,EAA9B,UAA8B,CALD;AAAA;AAAA,MAKvB,YALuB;AAAA,MAKvB,KALuB;;AAO7B,MAAMF,QAAQ,GAAG,SAAXA,QAAW,CAAA,aAAA,EAAA,SAAA,EAAuD;AACtE,QAAMI,SAAS,GAAG,IAAA,GAAA,CAAlB,KAAkB,CAAlB;AACA,QAAA,SAAA,EAAeA,SAAS,CAATA,GAAAA,CAAf,aAAeA,EAAf,KACKA,SAAAA,UAAAA,CAAAA,aAAAA;;AAEL,QAAI,CAAJ,YAAA,EAAmB;AACjBC,MAAAA,aAAa,oBAAbA,SAAa,EAAbA;AACD;;AAEDJ,IAAAA,YAAY,IAAIA,YAAY,oBAA5BA,SAA4B,EAA5BA;AATF,GAAA;;AAYA,SAAO;AACLK,IAAAA,kBAAkB,EAAE;AAClBN,MAAAA,QADkB,EAClBA,QADkB;AAElBO,MAAAA,MAAM,EAFY;AAAA;AADf,GAAP;AASD","sourcesContent":["import { useControllableProp } from '../../../hooks';\nimport React from 'react';\nimport type {\n  ICheckboxGroupProps,\n  ICheckboxValue,\n  IUseCheckboxGroupReturnType,\n} from './props';\n\nexport function useCheckboxGroup(\n  props: ICheckboxGroupProps,\n  _state: any,\n  _ref?: any\n): IUseCheckboxGroupReturnType {\n  const { value: propValue, defaultValue, onChange: onChangeProp } = props;\n\n  const [stateValue, setStateValue] = React.useState(defaultValue || []);\n\n  const [isControlled, value] = useControllableProp(propValue, stateValue);\n\n  const onChange = (checkboxValue: ICheckboxValue, isChecked: boolean) => {\n    const valuesSet = new Set(value);\n    if (isChecked) valuesSet.add(checkboxValue);\n    else valuesSet.delete(checkboxValue);\n\n    if (!isControlled) {\n      setStateValue([...valuesSet]);\n    }\n\n    onChangeProp && onChangeProp([...valuesSet]);\n  };\n\n  return {\n    checkboxGroupProps: {\n      onChange,\n      values: value,\n      // No checkbox group role\n      // https://reactnative.dev/docs/accessibility#accessibilityrole\n      // accessibilityRole: 'checkboxgroup',\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}