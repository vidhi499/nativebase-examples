{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ColorModeProvider = ColorModeProvider;\nexports.useColorModeValue = useColorModeValue;\nexports.useColorMode = exports.ColorModeContext = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar ColorModeContext = _react[\"default\"].createContext({});\n\nexports.ColorModeContext = ColorModeContext;\n\nfunction ColorModeProvider(props) {\n  var value = props.value,\n      children = props.children,\n      initialColorMode = props.options.initialColorMode,\n      colorModeManager = props.colorModeManager;\n\n  var _react$default$useSta = _react[\"default\"].useState(colorModeManager ? colorModeManager.get(initialColorMode) : initialColorMode),\n      _react$default$useSta2 = _slicedToArray(_react$default$useSta, 2),\n      colorMode = _react$default$useSta2[0],\n      rawSetColorMode = _react$default$useSta2[1];\n\n  var setColorMode = _react[\"default\"].useCallback(function (val) {\n    if (colorModeManager) {\n      colorModeManager.set(val);\n    }\n\n    rawSetColorMode(val);\n  }, [colorModeManager]);\n\n  var toggleColorMode = _react[\"default\"].useCallback(function () {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]);\n\n  var context = {\n    colorMode: value !== null && value !== void 0 ? value : colorMode,\n    toggleColorMode: value ? function () {} : toggleColorMode,\n    setColorMode: value ? function () {} : setColorMode\n  };\n  return _react[\"default\"].createElement(ColorModeContext.Provider, {\n    value: context\n  }, children);\n}\n\nvar useColorMode = function useColorMode() {\n  var context = _react[\"default\"].useContext(ColorModeContext);\n\n  if (context === undefined) {\n    throw new Error('useColorMode must be used within a ColorModeProvider');\n  }\n\n  return context;\n};\n\nexports.useColorMode = useColorMode;\n\nfunction useColorModeValue(light, dark) {\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return colorMode === 'light' ? light : dark;\n}","map":{"version":3,"sources":["provider.tsx"],"names":["ColorModeContext","React","options","initialColorMode","colorModeManager","setColorMode","val","rawSetColorMode","toggleColorMode","colorMode","context","value","useColorMode"],"mappings":";;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;;;;;AAoBO,IAAMA,gBAAgB,GAAGC,MAAAA,WAAAA,CAAAA,aAAAA,CAAzB,EAAyBA,CAAzB;;;;AAEA,SAAA,iBAAA,CAAA,KAAA,EAAuC;AAAA,MACtC,KADsC,GAC5C,KAD4C,CACtC,KADsC;AAAA,MACtC,QADsC,GAC5C,KAD4C,CACtC,QADsC;AAAA,MAI/BE,gBAJ+B,GAC5C,KAD4C,CAI1CD,OAJ0C,CAI/BC,gBAJ+B;AAAA,MAK1CC,gBAL0C,GAC5C,KAD4C,CAK1CA,gBAL0C;;AAAA,8BAQPH,MAAAA,WAAAA,CAAAA,QAAAA,CACnCG,gBAAgB,GAAGA,gBAAgB,CAAhBA,GAAAA,CAAH,gBAAGA,CAAH,GADlB,gBAAqCH,CARO;AAAA;AAAA,MAQtC,SARsC;AAAA,MAQtC,eARsC;;AAW5C,MAAMI,YAAY,GAAG,MAAA,WAAA,CAAA,WAAA,CAClBC,UAAAA,GAAD,EAAoB;AAClB,QAAA,gBAAA,EAAsB;AACpBF,MAAAA,gBAAgB,CAAhBA,GAAAA,CAAAA,GAAAA;AACD;;AACDG,IAAAA,eAAe,CAAfA,GAAe,CAAfA;AALiB,GAAA,EAOnB,CAPF,gBAOE,CAPmB,CAArB;;AAUA,MAAMC,eAAe,GAAG,MAAA,WAAA,CAAA,WAAA,CAAkB,YAAM;AAC9CH,IAAAA,YAAY,CAACI,SAAS,KAATA,OAAAA,GAAAA,MAAAA,GAAbJ,OAAY,CAAZA;AADsB,GAAA,EAErB,CAAA,SAAA,EAFH,YAEG,CAFqB,CAAxB;;AAIA,MAAMK,OAAO,GAAG;AACdD,IAAAA,SAAS,EAAGE,KAAH,KAAA,IAAGA,IAAAA,KAAH,KAAA,KAAA,CAAGA,GAAH,KAAGA,GADE,SAAA;AAEdH,IAAAA,eAAe,EAAEG,KAAK,GAAG,YAAM,CAAT,CAAA,GAFR,eAAA;AAGdN,IAAAA,YAAY,EAAEM,KAAK,GAAG,YAAM,CAAT,CAAA,GAAcN;AAHnB,GAAhB;AAKA,SACE,MAAA,WAAA,CAAA,aAAA,CAAC,gBAAD,CAAA,QAAA,EAAA;AAA2B,IAAA,KAAK,EAAEK;AAAlC,GAAA,EADF,QACE,CADF;AAKD;;AAEM,IAAME,YAAY,GAAG,SAAfA,YAAe,GAAM;AAChC,MAAMF,OAAO,GAAGT,MAAAA,WAAAA,CAAAA,UAAAA,CAAhB,gBAAgBA,CAAhB;;AACA,MAAIS,OAAO,KAAX,SAAA,EAA2B;AACzB,UAAM,IAAA,KAAA,CAAN,sDAAM,CAAN;AACD;;AACD,SAAA,OAAA;AALK,CAAA;;;;AAQA,SAAA,iBAAA,CAAA,KAAA,EAAA,IAAA,EAAkD;AAAA,sBACjCE,YAAtB,EADuD;AAAA,MAC/CH,SAD+C,iBAC/CA,SAD+C;;AAEvD,SAAOA,SAAS,KAATA,OAAAA,GAAAA,KAAAA,GAAP,IAAA;AACD","sourcesContent":["import React from 'react';\nimport type { ColorMode, StorageManager } from './utils';\nexport interface ColorModeOptions {\n  initialColorMode?: ColorMode;\n  useSystemColorMode?: boolean;\n}\n\nexport type IColorModeProviderProps = {\n  value?: ColorMode;\n  children?: React.ReactNode;\n  options: ColorModeOptions;\n  colorModeManager?: StorageManager;\n};\n\ninterface ColorModeContextType {\n  colorMode: ColorMode;\n  toggleColorMode: () => void;\n  setColorMode: (value: any) => void;\n}\n\nexport const ColorModeContext = React.createContext({} as ColorModeContextType);\n\nexport function ColorModeProvider(props: any) {\n  const {\n    value,\n    children,\n    options: { initialColorMode },\n    colorModeManager,\n  } = props;\n\n  const [colorMode, rawSetColorMode] = React.useState<ColorMode | undefined>(\n    colorModeManager ? colorModeManager.get(initialColorMode) : initialColorMode\n  );\n  const setColorMode = React.useCallback(\n    (val: ColorMode) => {\n      if (colorModeManager) {\n        colorModeManager.set(val);\n      }\n      rawSetColorMode(val);\n    },\n    [colorModeManager]\n  );\n\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]);\n\n  const context = {\n    colorMode: (value ?? colorMode) as ColorMode,\n    toggleColorMode: value ? () => {} : toggleColorMode,\n    setColorMode: value ? () => {} : setColorMode,\n  };\n  return (\n    <ColorModeContext.Provider value={context}>\n      {children}\n    </ColorModeContext.Provider>\n  );\n}\n\nexport const useColorMode = () => {\n  const context = React.useContext(ColorModeContext);\n  if (context === undefined) {\n    throw new Error('useColorMode must be used within a ColorModeProvider');\n  }\n  return context;\n};\n\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode();\n  return colorMode === 'light' ? light : dark;\n}\n"]},"metadata":{},"sourceType":"script"}