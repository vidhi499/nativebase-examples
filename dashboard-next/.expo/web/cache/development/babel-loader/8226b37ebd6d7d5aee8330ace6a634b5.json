{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"PinInputField\", {\n  enumerable: true,\n  get: function get() {\n    return _PinInputField[\"default\"];\n  }\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _Stack = require(\"../../primitives/Stack\");\n\nvar _hooks = require(\"../../../hooks\");\n\nvar _FormControl = require(\"../FormControl\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _isNil = _interopRequireDefault(require(\"lodash/isNil\"));\n\nvar _Context = require(\"./Context\");\n\nvar _PinInputField = _interopRequireDefault(require(\"./PinInputField\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar PinInput = function PinInput(_ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, [\"children\"]);\n\n  var _ref2 = (0, _hooks.usePropsConfig)('PinInput', props),\n      manageFocus = _ref2.manageFocus,\n      defaultValue = _ref2.defaultValue,\n      value = _ref2.value,\n      space = _ref2.space,\n      newProps = _objectWithoutProperties(_ref2, [\"manageFocus\", \"defaultValue\", \"value\", \"space\"]);\n\n  var formControlContext = _react[\"default\"].useContext(_FormControl.FormControlContext);\n\n  var RefList = [];\n\n  var setRefList = function setRefList(ref, index) {\n    RefList[index] = ref;\n  };\n\n  var _react$default$useSta = _react[\"default\"].useState(value || defaultValue),\n      _react$default$useSta2 = _slicedToArray(_react$default$useSta, 2),\n      pinInputValue = _react$default$useSta2[0],\n      setPinInputValue = _react$default$useSta2[1];\n\n  var handleChange = function handleChange(newValue, fieldIndex) {\n    var temp = pinInputValue && _toConsumableArray(pinInputValue) || [];\n    temp[fieldIndex] = newValue;\n    setPinInputValue(temp.join(''));\n    if (!(0, _isNil[\"default\"])(newValue) && manageFocus && fieldIndex + 1 < RefList.length) RefList[fieldIndex + 1].current.focus();\n    if ((0, _isNil[\"default\"])(newValue) && manageFocus && fieldIndex - 1 > -1) RefList[fieldIndex - 1].current.focus();\n    return temp.join('');\n  };\n\n  var handleMultiValueChange = function handleMultiValueChange(newValue, fieldIndex) {\n    var pinFieldLength = RefList.length;\n    var newValueLength = newValue.length;\n\n    if (newValueLength >= pinFieldLength && newValueLength > 2) {\n      var splicedValue = newValue ? _toConsumableArray(newValue) : [];\n      splicedValue.splice(pinFieldLength);\n      RefList[pinFieldLength - 1].current.focus();\n      setPinInputValue(splicedValue.join(''));\n    }\n\n    if (_reactNative.Platform.OS === 'android' && newValue) {\n      var temp = pinInputValue ? _toConsumableArray(pinInputValue) : [];\n      temp[fieldIndex] = JSON.stringify(parseInt(newValue, 10) % 10);\n      if (newValue && manageFocus && fieldIndex + 1 < RefList.length) RefList[fieldIndex + 1].current.focus();\n      setPinInputValue(temp.join(''));\n    }\n  };\n\n  var indexSetter = function indexSetter(allChildren) {\n    var pinInputFiledCounter = -1;\n    return _react[\"default\"].Children.map(allChildren, function (child) {\n      if (child.type.name !== 'PinInputFiled') return child;else {\n        pinInputFiledCounter++;\n        return _react[\"default\"].cloneElement(child, {\n          fieldIndex: pinInputFiledCounter\n        }, child.props.children);\n      }\n    });\n  };\n\n  return _react[\"default\"].createElement(_Context.PinInputContext.Provider, {\n    value: _objectSpread({}, formControlContext, {}, newProps, {\n      setRefList: setRefList,\n      handleChange: handleChange,\n      handleMultiValueChange: handleMultiValueChange,\n      value: pinInputValue\n    })\n  }, children && _react[\"default\"].createElement(_Stack.HStack, {\n    flexDirection: \"row\",\n    space: space\n  }, indexSetter(children)));\n};\n\nvar _default = PinInput;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["index.tsx"],"names":["PinInput","props","newProps","formControlContext","React","FormControlContext","RefList","setRefList","value","handleChange","temp","pinInputValue","setPinInputValue","fieldIndex","handleMultiValueChange","pinFieldLength","newValueLength","newValue","splicedValue","Platform","JSON","parseInt","indexSetter","allChildren","pinInputFiledCounter","child","children","space"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { HStack } from '../../primitives/Stack';\nimport { usePropsConfig } from '../../../hooks';\nimport type {\n  IPinInputProps,\n  IPinInputFieldProps,\n  IPinInputContext,\n} from './props';\nimport { FormControlContext, IFormControlContext } from '../FormControl';\nimport { Platform } from 'react-native';\nimport isNil from 'lodash/isNil';\nimport { PinInputContext } from './Context';\n\nconst PinInput = ({ children, ...props }: IPinInputProps) => {\n  const {\n    manageFocus,\n    defaultValue,\n    value,\n    space,\n    ...newProps\n  } = usePropsConfig('PinInput', props);\n  const formControlContext: IFormControlContext = React.useContext(\n    FormControlContext\n  );\n  const RefList: Array<any> = [];\n  const setRefList = (ref: any, index: number) => {\n    RefList[index] = ref;\n  };\n  const [pinInputValue, setPinInputValue] = React.useState(\n    value || defaultValue\n  );\n  const handleChange = (newValue: string, fieldIndex: number) => {\n    let temp = (pinInputValue && [...pinInputValue]) || [];\n    temp[fieldIndex] = newValue;\n    setPinInputValue(temp.join(''));\n    if (!isNil(newValue) && manageFocus && fieldIndex + 1 < RefList.length)\n      RefList[fieldIndex + 1].current.focus();\n    if (isNil(newValue) && manageFocus && fieldIndex - 1 > -1)\n      RefList[fieldIndex - 1].current.focus();\n    return temp.join('');\n  };\n  const handleMultiValueChange = (newValue: string, fieldIndex: number) => {\n    const pinFieldLength = RefList.length;\n    const newValueLength = newValue.length;\n    if (newValueLength >= pinFieldLength && newValueLength > 2) {\n      let splicedValue = newValue ? [...newValue] : [];\n      splicedValue.splice(pinFieldLength);\n      RefList[pinFieldLength - 1].current.focus();\n      setPinInputValue(splicedValue.join(''));\n    }\n    if (Platform.OS === 'android' && newValue) {\n      const temp = pinInputValue ? [...pinInputValue] : [];\n      temp[fieldIndex] = JSON.stringify(parseInt(newValue, 10) % 10);\n      if (newValue && manageFocus && fieldIndex + 1 < RefList.length)\n        RefList[fieldIndex + 1].current.focus();\n      // Backward focus is handled by handle change function.\n      setPinInputValue(temp.join(''));\n    }\n  };\n\n  const indexSetter = (allChildren: JSX.Element | JSX.Element[]) => {\n    let pinInputFiledCounter = -1;\n    return React.Children.map(allChildren, (child: JSX.Element) => {\n      if (child.type.name !== 'PinInputFiled') return child;\n      else {\n        pinInputFiledCounter++;\n        return React.cloneElement(\n          child,\n          {\n            fieldIndex: pinInputFiledCounter,\n          },\n          child.props.children\n        );\n      }\n    });\n  };\n\n  return (\n    <PinInputContext.Provider\n      value={{\n        ...formControlContext,\n        ...newProps,\n        setRefList,\n        handleChange,\n        handleMultiValueChange,\n        value: pinInputValue,\n      }}\n    >\n      {children && (\n        <HStack flexDirection=\"row\" space={space}>\n          {indexSetter(children)}\n        </HStack>\n      )}\n    </PinInputContext.Provider>\n  );\n};\n\nexport default PinInput;\nexport { default as PinInputField } from './PinInputField';\nexport type { IPinInputProps, IPinInputFieldProps, IPinInputContext };\n"]},"metadata":{},"sourceType":"script"}