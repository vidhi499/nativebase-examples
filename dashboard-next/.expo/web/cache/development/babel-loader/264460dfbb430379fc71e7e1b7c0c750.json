{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCoordinates = getCoordinates;\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nfunction getCoordinates(elementTop, elementLeft, elementWidth, elementHeight, triggerWidth, triggerHeight) {\n  var placeOverTriggerElement = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;\n  var top = elementTop;\n  var left = elementLeft;\n  var isRTL = _reactNative.I18nManager.isRTL;\n\n  var dimensions = _reactNative.Dimensions.get('window');\n\n  var windowWidth = dimensions.width;\n  var windowHeight = dimensions.height - (_reactNative.StatusBar.currentHeight || 0);\n  var triggerIndent = !placeOverTriggerElement ? triggerHeight : 0;\n\n  if (isRTL && left + triggerWidth > elementWidth || !isRTL && left + elementWidth > windowWidth) {\n    left = Math.min(windowWidth - elementWidth, left + triggerWidth);\n  }\n\n  if (top > windowHeight - elementHeight) {\n    top = Math.min(windowHeight - elementHeight - triggerHeight - triggerIndent, top + triggerIndent);\n  } else {\n    top += triggerIndent;\n  }\n\n  var elementContainerStyle = _objectSpread({\n    top: top\n  }, isRTL ? {\n    right: left\n  } : {\n    left: left\n  });\n\n  return elementContainerStyle;\n}","map":{"version":3,"sources":["utils.ts"],"names":["placeOverTriggerElement","top","left","isRTL","I18nManager","dimensions","Dimensions","width","windowWidth","windowHeight","StatusBar","triggerIndent","Math","elementContainerStyle","right"],"mappings":";;;;;;;;;;;;;;;AAEO,SAAA,cAAA,CAAA,UAAA,EAAA,WAAA,EAAA,YAAA,EAAA,aAAA,EAAA,YAAA,EAAA,aAAA,EAQL;AAAA,MADAA,uBACA,uEARK,IAQL;AACA,MAAIC,GAAG,GAAP,UAAA;AACA,MAAIC,IAAI,GAAR,WAAA;AAFA,MAGQC,KAHR,GAGkBC,YAAAA,CAAlB,WAHA,CAGQD,KAHR;;AAIA,MAAME,UAAU,GAAGC,YAAAA,CAAAA,UAAAA,CAAAA,GAAAA,CAAnB,QAAmBA,CAAnB;;AAJA,MAKeE,WALf,GAKA,UALA,CAKQD,KALR;AAMA,MAAME,YAAY,GAAGJ,UAAU,CAAVA,MAAAA,IAAqBK,YAAAA,CAAAA,SAAAA,CAAAA,aAAAA,IAA1C,CAAqBL,CAArB;AACA,MAAMM,aAAa,GAAG,CAAA,uBAAA,GAAA,aAAA,GAAtB,CAAA;;AACA,MACGR,KAAK,IAAID,IAAI,GAAJA,YAAAA,GAAV,YAACC,IACA,CAAA,KAAA,IAAUD,IAAI,GAAJA,YAAAA,GAFb,WAAA,EAGE;AACAA,IAAAA,IAAI,GAAGU,IAAI,CAAJA,GAAAA,CAASJ,WAAW,GAApBI,YAAAA,EAAqCV,IAAI,GAAhDA,YAAOU,CAAPV;AAZF;;AAeA,MAAID,GAAG,GAAGQ,YAAY,GAAtB,aAAA,EAAwC;AACtCR,IAAAA,GAAG,GAAGW,IAAI,CAAJA,GAAAA,CACJH,YAAY,GAAZA,aAAAA,GAAAA,aAAAA,GADIG,aAAAA,EAEJX,GAAG,GAFLA,aAAMW,CAANX;AADF,GAAA,MAKO;AACLA,IAAAA,GAAG,IAAHA,aAAAA;AACD;;AACD,MAAMY,qBAAqB;AACzBZ,IAAAA,GAD4B,EAC5BA;AADyB,KAGrBE,KAAK,GAAG;AAAEW,IAAAA,KAAK,EAAEZ;AAAT,GAAH,GAAqB;AAAEA,IAAAA,IAAAA,EAAAA;AAAF,GAHL,CAA3B;;AAKA,SAAA,qBAAA;AACD","sourcesContent":["import { Dimensions, I18nManager, StatusBar } from 'react-native';\n\nexport function getCoordinates(\n  elementTop: any,\n  elementLeft: any,\n  elementWidth: any,\n  elementHeight: any,\n  triggerWidth: any,\n  triggerHeight: any,\n  placeOverTriggerElement: boolean = true\n) {\n  let top = elementTop;\n  let left = elementLeft;\n  const { isRTL } = I18nManager;\n  const dimensions = Dimensions.get('window');\n  const { width: windowWidth } = dimensions;\n  const windowHeight = dimensions.height - (StatusBar.currentHeight || 0);\n  const triggerIndent = !placeOverTriggerElement ? triggerHeight : 0;\n  if (\n    (isRTL && left + triggerWidth > elementWidth) ||\n    (!isRTL && left + elementWidth > windowWidth)\n  ) {\n    left = Math.min(windowWidth - elementWidth, left + triggerWidth);\n  }\n  // Flip by Y axis if element hits bottom screen border\n  if (top > windowHeight - elementHeight) {\n    top = Math.min(\n      windowHeight - elementHeight - triggerHeight - triggerIndent,\n      top + triggerIndent\n    );\n  } else {\n    top += triggerIndent;\n  }\n  const elementContainerStyle = {\n    top,\n    // Switch left to right for rtl devices\n    ...(isRTL ? { right: left } : { left }),\n  };\n  return elementContainerStyle;\n}\n"]},"metadata":{},"sourceType":"script"}