{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _useFadeTransition = require(\"../../components/composites/Transitions/useFadeTransition\");\n\nvar _Context = require(\"./Context\");\n\nvar _View = _interopRequireDefault(require(\"../../components/primitives/View\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar Overlay = function Overlay(_ref) {\n  var children = _ref.children,\n      disableOverlay = _ref.disableOverlay,\n      position = _ref.position,\n      animationDuration = _ref.animationDuration,\n      defaultBackgroundColor = _ref.defaultBackgroundColor,\n      closeOnPress = _ref.closeOnPress;\n\n  var _react$default$useSta = _react[\"default\"].useState(null),\n      _react$default$useSta2 = _slicedToArray(_react$default$useSta, 2),\n      overlayItem = _react$default$useSta2[0],\n      setOverlayItem = _react$default$useSta2[1];\n\n  var _react$default$useSta3 = _react[\"default\"].useState({\n    disableOverlay: disableOverlay,\n    position: position !== null && position !== void 0 ? position : 'center',\n    backgroundColor: defaultBackgroundColor !== null && defaultBackgroundColor !== void 0 ? defaultBackgroundColor : '#161616',\n    animationDuration: animationDuration !== null && animationDuration !== void 0 ? animationDuration : 500,\n    closeOnPress: !closeOnPress ? false : true,\n    onClose: function onClose(_a) {}\n  }),\n      _react$default$useSta4 = _slicedToArray(_react$default$useSta3, 2),\n      config = _react$default$useSta4[0],\n      setConfig = _react$default$useSta4[1];\n\n  var _ref2 = (0, _useFadeTransition.useFadeTransition)(animationDuration),\n      fadeValue = _ref2.fadeValue,\n      fadeIn = _ref2.fadeIn,\n      fadeOut = _ref2.fadeOut;\n\n  var providerStyle = _reactNative.StyleSheet.create({\n    provider: {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      right: 0,\n      left: 0,\n      zIndex: 999,\n      alignItems: 'center',\n      opacity: 0.5,\n      justifyContent: config.position === 'top' ? 'flex-start' : config.position === 'bottom' ? 'flex-end' : 'center'\n    }\n  });\n\n  var pointerEventsSetter = function pointerEventsSetter() {\n    if (overlayItem) {\n      return config.disableOverlay ? 'box-none' : 'auto';\n    } else {\n      return 'none';\n    }\n  };\n\n  overlayItem ? fadeIn() : fadeOut();\n  return _react[\"default\"].createElement(_Context.OverlayContext.Provider, {\n    value: {\n      setOverlayItem: setOverlayItem,\n      defaultConfig: config,\n      setConfig: setConfig\n    }\n  }, children, _react[\"default\"].createElement(_reactNative.Animated.View, {\n    nativeID: \"toast-provider\",\n    style: [providerStyle.provider, {\n      opacity: fadeValue\n    }],\n    pointerEvents: pointerEventsSetter()\n  }, _react[\"default\"].createElement(_View[\"default\"], {\n    w: \"100%\",\n    h: \"100%\",\n    zIndex: 999999\n  }, overlayItem), _react[\"default\"].createElement(_View[\"default\"], {\n    bg: config.disableOverlay ? 'transparent' : config.backgroundColor ? config.backgroundColor : '#161616cc',\n    style: providerStyle.provider\n  }), config.closeOnPress ? _react[\"default\"].createElement(_reactNative.TouchableOpacity, {\n    style: [providerStyle.provider, {\n      backgroundColor: 'transparent'\n    }],\n    onPress: function onPress() {\n      setOverlayItem(null);\n      config.onClose ? config.onClose(false) : null;\n    }\n  }) : null));\n};\n\nvar _default = Overlay;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["OverlayProvider.tsx"],"names":["Overlay","closeOnPress","React","disableOverlay","position","backgroundColor","defaultBackgroundColor","animationDuration","onClose","_a","fadeOut","providerStyle","provider","top","bottom","right","left","zIndex","alignItems","opacity","justifyContent","config","pointerEventsSetter","overlayItem","fadeIn","setOverlayItem","defaultConfig","setConfig","fadeValue"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Animated, StyleSheet, TouchableOpacity } from 'react-native';\nimport { useFadeTransition } from '../../components/composites/Transitions/useFadeTransition';\nimport type { IOverlayProps } from './props';\nimport { OverlayContext } from './Context';\nimport View from '../../components/primitives/View';\n\nconst Overlay = ({\n  children,\n  disableOverlay,\n  position,\n  animationDuration,\n  defaultBackgroundColor,\n  closeOnPress,\n}: IOverlayProps) => {\n  const [overlayItem, setOverlayItem] = React.useState(null);\n  const [config, setConfig] = React.useState({\n    disableOverlay,\n    position: position ?? 'center',\n    backgroundColor: defaultBackgroundColor ?? '#161616',\n    animationDuration: animationDuration ?? 500,\n    closeOnPress: !closeOnPress ? false : true,\n    onClose: (_a: any) => {},\n  });\n\n  const { fadeValue, fadeIn, fadeOut } = useFadeTransition(animationDuration);\n  let providerStyle = StyleSheet.create({\n    provider: {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      right: 0,\n      left: 0,\n      zIndex: 999,\n      alignItems: 'center',\n      opacity: 0.5,\n      // backgroundColor: config.disableOverlay\n      //   ? 'transparent'\n      //   : config.backgroundColor,\n      justifyContent:\n        config.position === 'top'\n          ? 'flex-start'\n          : config.position === 'bottom'\n          ? 'flex-end'\n          : 'center',\n    },\n  });\n\n  const pointerEventsSetter = () => {\n    if (overlayItem) {\n      return config.disableOverlay ? 'box-none' : 'auto';\n    } else {\n      return 'none';\n    }\n  };\n  overlayItem ? fadeIn() : fadeOut();\n  return (\n    // Need to use React native view to apply pointerEvents none\n    <OverlayContext.Provider\n      value={{ setOverlayItem, defaultConfig: config, setConfig }}\n    >\n      {children}\n      <Animated.View\n        nativeID=\"toast-provider\"\n        style={[providerStyle.provider, { opacity: fadeValue }]}\n        pointerEvents={pointerEventsSetter()}\n      >\n        <View w=\"100%\" h=\"100%\" zIndex={999999}>\n          {overlayItem}\n        </View>\n        <View\n          bg={\n            config.disableOverlay\n              ? 'transparent'\n              : config.backgroundColor\n              ? config.backgroundColor\n              : '#161616cc'\n          }\n          style={providerStyle.provider}\n        />\n        {config.closeOnPress ? (\n          <TouchableOpacity\n            style={[providerStyle.provider, { backgroundColor: 'transparent' }]}\n            onPress={() => {\n              setOverlayItem(null);\n              config.onClose ? config.onClose(false) : null;\n            }}\n          />\n        ) : null}\n      </Animated.View>\n    </OverlayContext.Provider>\n  );\n};\n\nexport default Overlay;\n"]},"metadata":{},"sourceType":"script"}