{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.ModalOverlay = exports.ModalCloseButton = exports.ModalFooter = exports.ModalBody = exports.ModalContent = exports.ModalHeader = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _native = _interopRequireDefault(require(\"styled-components/native\"));\n\nvar _styledSystem = require(\"styled-system\");\n\nvar _customProps = require(\"../../../utils/customProps\");\n\nvar _CloseButton = _interopRequireDefault(require(\"../../composites/CloseButton\"));\n\nvar _Overlay = require(\"../../../core/Overlay\");\n\nvar _hooks = require(\"../../../hooks\");\n\nvar _primitives = require(\"../../primitives\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar StyledModal = (0, _native[\"default\"])(_reactNative.Modal)(_styledSystem.color, _styledSystem.space, _styledSystem.layout, _styledSystem.flexbox, _styledSystem.border, _styledSystem.position, _customProps.customPosition, _customProps.customBorder, _customProps.customBackground, _customProps.customOutline, _customProps.customShadow, _customProps.customExtra, _customProps.customLayout);\n\nvar ModalContext = _react[\"default\"].createContext({\n  visible: false,\n  toggleVisible: function toggleVisible(_bool) {},\n  toggleOnClose: function toggleOnClose(_bool) {},\n  newProps: {\n    _width: '60%',\n    size: 'md',\n    modalOverlayStyle: {},\n    closeOnOverlayClick: true,\n    modalCloseButtonStyle: {},\n    modalCloseButtonProps: {},\n    modalFooterProps: {},\n    modalBodyProps: {},\n    modalContentProps: {},\n    modalHeaderProps: {},\n    modalOverlayProps: {}\n  }\n});\n\nvar Modal = function Modal(_ref, ref) {\n  var children = _ref.children,\n      isOpen = _ref.isOpen,\n      onClose = _ref.onClose,\n      isCentered = _ref.isCentered,\n      initialFocusRef = _ref.initialFocusRef,\n      finalFocusRef = _ref.finalFocusRef,\n      justifyContent = _ref.justifyContent,\n      alignItems = _ref.alignItems,\n      id = _ref.id,\n      motionPreset = _ref.motionPreset,\n      avoidKeyboard = _ref.avoidKeyboard,\n      overlayColor = _ref.overlayColor,\n      overlayVisible = _ref.overlayVisible,\n      props = _objectWithoutProperties(_ref, [\"children\", \"isOpen\", \"onClose\", \"isCentered\", \"initialFocusRef\", \"finalFocusRef\", \"justifyContent\", \"alignItems\", \"id\", \"motionPreset\", \"avoidKeyboard\", \"overlayColor\", \"overlayVisible\"]);\n\n  var _ref2 = (0, _Overlay.useOverlay)(),\n      closeOverlay = _ref2.closeOverlay,\n      setOverlay = _ref2.setOverlay;\n\n  var _react$default$useSta = _react[\"default\"].useState(true),\n      _react$default$useSta2 = _slicedToArray(_react$default$useSta, 2),\n      isVisible = _react$default$useSta2[0],\n      setIsVisible = _react$default$useSta2[1];\n\n  var closeOverlayInMobile = function closeOverlayInMobile() {\n    setIsVisible(false);\n    onClose(false);\n  };\n\n  var newProps = (0, _hooks.usePropsConfig)('Modal', props);\n  var value = {\n    visible: isVisible,\n    toggleVisible: setIsVisible,\n    toggleOnClose: onClose,\n    newProps: newProps\n  };\n\n  var modalChildren = _react[\"default\"].createElement(_primitives.Box, _extends({}, newProps.modalProps, {\n    justifyContent: isCentered ? 'center' : justifyContent,\n    alignItems: isCentered ? 'center' : alignItems\n  }), props.closeOnOverlayClick === false ? _react[\"default\"].createElement(_primitives.Box, null) : _react[\"default\"].createElement(ModalOverlay, null), children);\n\n  _react[\"default\"].useEffect(function () {\n    isOpen && _reactNative.Platform.OS === 'web' ? setOverlay(_react[\"default\"].createElement(ModalContext.Provider, {\n      value: value\n    }, _react[\"default\"].createElement(_primitives.Box, {\n      ref: ref,\n      nativeID: id,\n      h: \"100%\"\n    }, modalChildren)), {\n      onClose: onClose,\n      closeOnPress: props.closeOnOverlayClick === false ? false : true,\n      backgroundColor: overlayColor ? overlayColor : undefined,\n      disableOverlay: overlayVisible === false ? true : false\n    }) : setOverlay(_react[\"default\"].createElement(_primitives.Box, null), {\n      onClose: closeOverlayInMobile,\n      closeOnPress: props.closeOnOverlayClick === false ? false : true,\n      backgroundColor: overlayColor ? overlayColor : undefined,\n      disableOverlay: overlayVisible === false ? true : false\n    });\n    !isOpen && closeOverlay();\n    setIsVisible(isOpen);\n  }, [isOpen]);\n\n  return _reactNative.Platform.OS !== 'web' ? _react[\"default\"].createElement(ModalContext.Provider, {\n    value: value\n  }, _react[\"default\"].createElement(_primitives.View, {\n    nativeID: id\n  }, _react[\"default\"].createElement(StyledModal, _extends({\n    visible: isVisible,\n    onRequestClose: function onRequestClose() {\n      value.toggleVisible(false);\n      value.toggleOnClose(false);\n    },\n    onShow: function onShow() {\n      var _initialFocusRef$curr;\n\n      !['ios', 'android'].includes(_reactNative.Platform.OS) && (initialFocusRef === null || initialFocusRef === void 0 ? void 0 : (_initialFocusRef$curr = initialFocusRef.current) === null || _initialFocusRef$curr === void 0 ? void 0 : _initialFocusRef$curr.focus());\n    },\n    onDismiss: function onDismiss() {\n      var _finalFocusRef$curren;\n\n      !['ios', 'android'].includes(_reactNative.Platform.OS) && (finalFocusRef === null || finalFocusRef === void 0 ? void 0 : (_finalFocusRef$curren = finalFocusRef.current) === null || _finalFocusRef$curren === void 0 ? void 0 : _finalFocusRef$curren.focus());\n    },\n    animationType: motionPreset || 'slide',\n    transparent: true\n  }, props, {\n    ref: ref\n  }), avoidKeyboard ? _react[\"default\"].createElement(_reactNative.KeyboardAvoidingView, {\n    behavior: _reactNative.Platform.OS === 'ios' ? 'padding' : 'height'\n  }, modalChildren) : modalChildren))) : null;\n};\n\nvar ModalHeader = function ModalHeader(props) {\n  var _react$default$useCon = _react[\"default\"].useContext(ModalContext),\n      newProps = _react$default$useCon.newProps;\n\n  return _react[\"default\"].createElement(_primitives.Box, _extends({}, newProps.modalHeaderProps, props));\n};\n\nexports.ModalHeader = ModalHeader;\n\nvar ModalContent = function ModalContent(props) {\n  var _react$default$useCon2 = _react[\"default\"].useContext(ModalContext),\n      newProps = _react$default$useCon2.newProps;\n\n  return _react[\"default\"].createElement(_primitives.Box, _extends({}, newProps.modalContentProps, {\n    width: newProps._width || newProps.size\n  }, props));\n};\n\nexports.ModalContent = ModalContent;\n\nvar ModalBody = function ModalBody(props) {\n  var _react$default$useCon3 = _react[\"default\"].useContext(ModalContext),\n      newProps = _react$default$useCon3.newProps;\n\n  return _react[\"default\"].createElement(_primitives.Box, _extends({}, newProps.modalBodyProps, props));\n};\n\nexports.ModalBody = ModalBody;\n\nvar ModalFooter = function ModalFooter(props) {\n  var _react$default$useCon4 = _react[\"default\"].useContext(ModalContext),\n      newProps = _react$default$useCon4.newProps;\n\n  return _react[\"default\"].createElement(_primitives.Box, _extends({}, newProps.modalFooterProps, props));\n};\n\nexports.ModalFooter = ModalFooter;\n\nvar ModalCloseButton = function ModalCloseButton(props) {\n  var _react$default$useCon5 = _react[\"default\"].useContext(ModalContext),\n      toggleVisible = _react$default$useCon5.toggleVisible,\n      toggleOnClose = _react$default$useCon5.toggleOnClose,\n      newProps = _react$default$useCon5.newProps;\n\n  return _react[\"default\"].createElement(_primitives.View, {\n    style: newProps.modalCloseButtonStyle\n  }, _react[\"default\"].createElement(_CloseButton[\"default\"], _extends({}, newProps.modalCloseButtonProps, props, {\n    accessibilityLabel: \"Close dialog\",\n    onPress: function onPress() {\n      toggleVisible(false);\n      toggleOnClose(false);\n    }\n  })));\n};\n\nexports.ModalCloseButton = ModalCloseButton;\n\nvar ModalOverlay = function ModalOverlay(_ref3) {\n  var children = _ref3.children,\n      props = _objectWithoutProperties(_ref3, [\"children\"]);\n\n  var _react$default$useCon6 = _react[\"default\"].useContext(ModalContext),\n      toggleVisible = _react$default$useCon6.toggleVisible,\n      toggleOnClose = _react$default$useCon6.toggleOnClose,\n      newProps = _react$default$useCon6.newProps;\n\n  return _react[\"default\"].createElement(_primitives.Box, _extends({}, props, {\n    style: newProps.modalOverlayStyle\n  }), _react[\"default\"].createElement(_reactNative.TouchableOpacity, {\n    style: newProps.modalOverlayStyle,\n    accessible: false,\n    onPress: newProps.closeOnOverlayClick === false ? function () {} : function () {\n      toggleVisible(false);\n      toggleOnClose(false);\n    }\n  }), children);\n};\n\nexports.ModalOverlay = ModalOverlay;\n\nvar _default = _react[\"default\"].forwardRef(Modal);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["index.tsx"],"names":["StyledModal","RNModal","color","space","layout","flexbox","border","position","customPosition","customBorder","customBackground","customOutline","customShadow","customExtra","customLayout","ModalContext","visible","toggleVisible","_bool","toggleOnClose","newProps","_width","size","modalOverlayStyle","closeOnOverlayClick","modalCloseButtonStyle","modalCloseButtonProps","modalFooterProps","modalBodyProps","modalContentProps","modalHeaderProps","modalOverlayProps","Modal","props","setOverlay","React","closeOverlayInMobile","setIsVisible","onClose","value","modalChildren","isCentered","alignItems","isOpen","Platform","closeOnPress","backgroundColor","overlayColor","disableOverlay","overlayVisible","closeOverlay","id","initialFocusRef","finalFocusRef","motionPreset","ref","avoidKeyboard","ModalHeader","ModalContent","ModalBody","ModalFooter","ModalCloseButton","ModalOverlay"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  KeyboardAvoidingView,\n  Modal as RNModal,\n  TouchableOpacity,\n  Platform,\n} from 'react-native';\nimport type { Modal as ModalType } from 'react-native';\nimport styled from 'styled-components/native';\nimport { border, color, flexbox, layout, space, position } from 'styled-system';\nimport {\n  customBorder,\n  customBackground,\n  customOutline,\n  customLayout,\n  customExtra,\n  customShadow,\n  customPosition,\n} from '../../../utils/customProps';\n\nimport type { IModalProps, IModalSemiProps } from './props';\nimport {\n  default as CloseButton,\n  ICloseButtonProps,\n} from '../../composites/CloseButton';\n\nimport { useOverlay } from '../../../core/Overlay';\nimport { usePropsConfig } from '../../../hooks';\nimport { Box, View, IBoxProps } from '../../primitives';\n\nconst StyledModal = styled(RNModal)<IModalSemiProps>(\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  position,\n  customPosition,\n  customBorder,\n  customBackground,\n  customOutline,\n  customShadow,\n  customExtra,\n  customLayout\n);\n\nconst ModalContext = React.createContext({\n  visible: false,\n  toggleVisible: (_bool: boolean) => {},\n  toggleOnClose: (_bool: boolean) => {},\n  newProps: {\n    _width: '60%',\n    size: 'md',\n    modalOverlayStyle: {},\n    closeOnOverlayClick: true,\n    modalCloseButtonStyle: {},\n    modalCloseButtonProps: {},\n    modalFooterProps: {},\n    modalBodyProps: {},\n    modalContentProps: {},\n    modalHeaderProps: {},\n    modalOverlayProps: {},\n  },\n});\n\nconst Modal = (\n  {\n    children,\n    isOpen,\n    onClose,\n    isCentered,\n    initialFocusRef,\n    finalFocusRef,\n    justifyContent,\n    alignItems,\n    id,\n    motionPreset,\n    avoidKeyboard,\n    overlayColor,\n    overlayVisible,\n    ...props\n  }: IModalProps,\n  ref: any\n) => {\n  const { closeOverlay, setOverlay } = useOverlay();\n  const [isVisible, setIsVisible] = React.useState(true);\n  const closeOverlayInMobile = () => {\n    setIsVisible(false);\n    onClose(false);\n  };\n  const newProps = usePropsConfig('Modal', props);\n  const value: any = {\n    visible: isVisible,\n    toggleVisible: setIsVisible,\n    toggleOnClose: onClose,\n    newProps: newProps,\n  };\n  const modalChildren = (\n    <Box\n      {...newProps.modalProps}\n      justifyContent={isCentered ? 'center' : justifyContent}\n      alignItems={isCentered ? 'center' : alignItems}\n    >\n      {props.closeOnOverlayClick === false ? <Box /> : <ModalOverlay />}\n      {children}\n    </Box>\n  );\n  React.useEffect(\n    () => {\n      isOpen && Platform.OS === 'web'\n        ? setOverlay(\n            <ModalContext.Provider value={value}>\n              <Box ref={ref} nativeID={id} h=\"100%\">\n                {modalChildren}\n              </Box>\n            </ModalContext.Provider>,\n            {\n              onClose: onClose,\n              closeOnPress: props.closeOnOverlayClick === false ? false : true,\n              backgroundColor: overlayColor ? overlayColor : undefined,\n              disableOverlay: overlayVisible === false ? true : false,\n            }\n          )\n        : setOverlay(<Box />, {\n            onClose: closeOverlayInMobile,\n            closeOnPress: props.closeOnOverlayClick === false ? false : true,\n            backgroundColor: overlayColor ? overlayColor : undefined,\n            disableOverlay: overlayVisible === false ? true : false,\n          });\n\n      !isOpen && closeOverlay();\n      setIsVisible(isOpen);\n    },\n    /*eslint-disable */\n    [isOpen]\n  );\n  return Platform.OS !== 'web' ? (\n    <ModalContext.Provider value={value}>\n      <View nativeID={id}>\n        <StyledModal\n          visible={isVisible}\n          onRequestClose={() => {\n            value.toggleVisible(false);\n            value.toggleOnClose(false);\n          }}\n          onShow={() => {\n            !['ios', 'android'].includes(Platform.OS) &&\n              initialFocusRef?.current?.focus();\n          }}\n          onDismiss={() => {\n            !['ios', 'android'].includes(Platform.OS) &&\n              finalFocusRef?.current?.focus();\n          }}\n          animationType={motionPreset || 'slide'}\n          transparent\n          {...props}\n          ref={ref}\n        >\n          {avoidKeyboard ? (\n            <KeyboardAvoidingView\n              behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n            >\n              {modalChildren}\n            </KeyboardAvoidingView>\n          ) : (\n            modalChildren\n          )}\n        </StyledModal>\n      </View>\n    </ModalContext.Provider>\n  ) : null;\n};\n\nexport const ModalHeader = (props: IBoxProps) => {\n  const { newProps } = React.useContext(ModalContext);\n  return <Box {...newProps.modalHeaderProps} {...props} />;\n};\n\nexport const ModalContent = (props: IBoxProps) => {\n  const { newProps } = React.useContext(ModalContext);\n  return (\n    <Box\n      {...newProps.modalContentProps}\n      width={newProps._width || newProps.size}\n      {...props}\n    />\n  );\n};\n\nexport const ModalBody = (props: IBoxProps) => {\n  const { newProps } = React.useContext(ModalContext);\n  return <Box {...newProps.modalBodyProps} {...props} />;\n};\n\nexport const ModalFooter = (props: IBoxProps) => {\n  const { newProps } = React.useContext(ModalContext);\n  return <Box {...newProps.modalFooterProps} {...props} />;\n};\n\nexport const ModalCloseButton = (props: ICloseButtonProps) => {\n  const { toggleVisible, toggleOnClose, newProps } = React.useContext(\n    ModalContext\n  );\n  return (\n    <View style={newProps.modalCloseButtonStyle}>\n      <CloseButton\n        {...newProps.modalCloseButtonProps}\n        {...props}\n        accessibilityLabel=\"Close dialog\"\n        onPress={() => {\n          toggleVisible(false);\n          toggleOnClose(false);\n        }}\n      />\n    </View>\n  );\n};\n\nexport const ModalOverlay = ({ children, ...props }: any) => {\n  const { toggleVisible, toggleOnClose, newProps } = React.useContext(\n    ModalContext\n  );\n\n  return (\n    <Box {...props} style={newProps.modalOverlayStyle}>\n      <TouchableOpacity\n        style={newProps.modalOverlayStyle}\n        accessible={false}\n        onPress={\n          newProps.closeOnOverlayClick === false\n            ? () => {}\n            : () => {\n                toggleVisible(false);\n                toggleOnClose(false);\n              }\n        }\n      />\n      {children}\n    </Box>\n  );\n};\nexport default React.forwardRef<ModalType, IModalProps>(Modal);\n\nexport type { IModalProps };\n"]},"metadata":{},"sourceType":"script"}