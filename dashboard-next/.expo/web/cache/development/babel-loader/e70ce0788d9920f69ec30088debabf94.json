{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/vidhi/Sites/Projects/examples/test/dashboard-next/node_modules/react-native-gesture-handler/DrawerLayout.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport invariant from 'invariant';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler, TapGestureHandler, State } from \"./GestureHandler\";\nvar DRAG_TOSS = 0.05;\nvar IDLE = 'Idle';\nvar DRAGGING = 'Dragging';\nvar SETTLING = 'Settling';\n\nvar DrawerLayout = function (_Component) {\n  _inherits(DrawerLayout, _Component);\n\n  var _super = _createSuper(DrawerLayout);\n\n  function DrawerLayout(_props, context) {\n    var _this;\n\n    _classCallCheck(this, DrawerLayout);\n\n    _this = _super.call(this, _props, context);\n\n    _defineProperty(_assertThisInitialized(_this), \"_openValue\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_onGestureEvent\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_accessibilityIsModalView\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"_pointerEventsView\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"_panGestureHandler\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"_drawerShown\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"_updateAnimatedEvent\", function (props, state) {\n      var drawerPosition = props.drawerPosition,\n          drawerWidth = props.drawerWidth,\n          drawerType = props.drawerType;\n      var dragXValue = state.dragX,\n          touchXValue = state.touchX,\n          drawerTranslation = state.drawerTranslation,\n          containerWidth = state.containerWidth;\n      var dragX = dragXValue;\n      var touchX = touchXValue;\n\n      if (drawerPosition !== 'left') {\n        dragX = Animated.multiply(new Animated.Value(-1), dragXValue);\n        touchX = Animated.add(new Animated.Value(containerWidth), Animated.multiply(new Animated.Value(-1), touchXValue));\n        touchXValue.setValue(containerWidth);\n      } else {\n        touchXValue.setValue(0);\n      }\n\n      var translationX = dragX;\n\n      if (drawerType === 'front') {\n        var startPositionX = Animated.add(touchX, Animated.multiply(new Animated.Value(-1), dragX));\n        var dragOffsetFromOnStartPosition = startPositionX.interpolate({\n          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n          outputRange: [0, 0, 1]\n        });\n        translationX = Animated.add(dragX, dragOffsetFromOnStartPosition);\n      }\n\n      _this._openValue = Animated.add(translationX, drawerTranslation).interpolate({\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      _this._onGestureEvent = Animated.event([{\n        nativeEvent: {\n          translationX: dragXValue,\n          x: touchXValue\n        }\n      }], {\n        useNativeDriver: props.useNativeAnimations\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleContainerLayout\", function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n\n      _this.setState({\n        containerWidth: nativeEvent.layout.width\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_emitStateChanged\", function (newState, drawerWillShow) {\n      _this.props.onDrawerStateChanged && _this.props.onDrawerStateChanged(newState, drawerWillShow);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_openingHandlerStateChange\", function (_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this._handleRelease(nativeEvent);\n      } else if (nativeEvent.state === State.ACTIVE) {\n        _this._emitStateChanged(DRAGGING, false);\n\n        if (_this.props.keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n\n        if (_this.props.hideStatusBar) {\n          StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onTapHandlerStateChange\", function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n\n      if (_this._drawerShown && nativeEvent.oldState === State.ACTIVE && _this.props.drawerLockMode !== 'locked-open') {\n        _this.closeDrawer();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleRelease\", function (nativeEvent) {\n      var _this$props = _this.props,\n          drawerWidth = _this$props.drawerWidth,\n          drawerPosition = _this$props.drawerPosition,\n          drawerType = _this$props.drawerType;\n      var containerWidth = _this.state.containerWidth;\n      var dragX = nativeEvent.translationX,\n          velocityX = nativeEvent.velocityX,\n          touchX = nativeEvent.x;\n\n      if (drawerPosition !== 'left') {\n        dragX = -dragX;\n        touchX = containerWidth - touchX;\n        velocityX = -velocityX;\n      }\n\n      var gestureStartX = touchX - dragX;\n      var dragOffsetBasedOnStart = 0;\n\n      if (drawerType === 'front') {\n        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n      }\n\n      var startOffsetX = dragX + dragOffsetBasedOnStart + (_this._drawerShown ? drawerWidth : 0);\n      var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n      var shouldOpen = projOffsetX > drawerWidth / 2;\n\n      if (shouldOpen) {\n        _this._animateDrawer(startOffsetX, drawerWidth, velocityX);\n      } else {\n        _this._animateDrawer(startOffsetX, 0, velocityX);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_updateShowing\", function (showing) {\n      _this._drawerShown = showing;\n      _this._accessibilityIsModalView.current && _this._accessibilityIsModalView.current.setNativeProps({\n        accessibilityViewIsModal: showing\n      });\n      _this._pointerEventsView.current && _this._pointerEventsView.current.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none'\n      });\n      var _this$props2 = _this.props,\n          drawerPosition = _this$props2.drawerPosition,\n          minSwipeDistance = _this$props2.minSwipeDistance,\n          edgeWidth = _this$props2.edgeWidth;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (_this._drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: showing ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: showing ? undefined : edgeWidth\n      };\n      _this._panGestureHandler.current && _this._panGestureHandler.current.setNativeProps({\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_animateDrawer\", function (fromValue, toValue, velocity) {\n      _this.state.dragX.setValue(0);\n\n      _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);\n\n      if (fromValue != null) {\n        var nextFramePosition = fromValue;\n\n        if (_this.props.useNativeAnimations) {\n          if (fromValue < toValue && velocity > 0) {\n            nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n          } else if (fromValue > toValue && velocity < 0) {\n            nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n          }\n        }\n\n        _this.state.drawerTranslation.setValue(nextFramePosition);\n      }\n\n      var willShow = toValue !== 0;\n\n      _this._updateShowing(willShow);\n\n      _this._emitStateChanged(SETTLING, willShow);\n\n      if (_this.props.hideStatusBar) {\n        StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');\n      }\n\n      Animated.spring(_this.state.drawerTranslation, {\n        velocity: velocity,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations\n      }).start(function (_ref4) {\n        var finished = _ref4.finished;\n\n        if (finished) {\n          _this._emitStateChanged(IDLE, willShow);\n\n          if (willShow) {\n            _this.props.onDrawerOpen && _this.props.onDrawerOpen();\n          } else {\n            _this.props.onDrawerClose && _this.props.onDrawerClose();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"openDrawer\", function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _this._animateDrawer(undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0);\n\n      _this.forceUpdate();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"closeDrawer\", function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _this._animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n\n      _this.forceUpdate();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderOverlay\", function () {\n      var _jsx, _jsx2;\n\n      invariant(_this._openValue, 'should be set');\n\n      var overlayOpacity = _this._openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n\n      var dynamicOverlayStyles = {\n        opacity: overlayOpacity,\n        backgroundColor: _this.props.overlayColor\n      };\n      return __jsx(TapGestureHandler, (_jsx2 = {\n        onHandlerStateChange: _this._onTapHandlerStateChange,\n        __self: _assertThisInitialized(_this)\n      }, _defineProperty(_jsx2, \"__self\", _assertThisInitialized(_this)), _defineProperty(_jsx2, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 7\n      }), _jsx2), __jsx(Animated.View, (_jsx = {\n        pointerEvents: _this._drawerShown ? 'auto' : 'none',\n        ref: _this._pointerEventsView,\n        style: [styles.overlay, dynamicOverlayStyles],\n        __self: _assertThisInitialized(_this)\n      }, _defineProperty(_jsx, \"__self\", _assertThisInitialized(_this)), _defineProperty(_jsx, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }), _jsx)));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderDrawer\", function () {\n      var _jsx3, _jsx4, _jsx5, _jsx6;\n\n      var _this$props3 = _this.props,\n          drawerBackgroundColor = _this$props3.drawerBackgroundColor,\n          drawerWidth = _this$props3.drawerWidth,\n          drawerPosition = _this$props3.drawerPosition,\n          drawerType = _this$props3.drawerType,\n          drawerContainerStyle = _this$props3.drawerContainerStyle,\n          contentContainerStyle = _this$props3.contentContainerStyle;\n      var fromLeft = drawerPosition === 'left';\n      var drawerSlide = drawerType !== 'back';\n      var containerSlide = drawerType !== 'front';\n      var reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n      var dynamicDrawerStyles = {\n        backgroundColor: drawerBackgroundColor,\n        width: drawerWidth\n      };\n      var openValue = _this._openValue;\n      invariant(openValue, 'should be set');\n      var containerStyles;\n\n      if (containerSlide) {\n        var containerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n          extrapolate: 'clamp'\n        });\n        containerStyles = {\n          transform: [{\n            translateX: containerTranslateX\n          }]\n        };\n      }\n\n      var drawerTranslateX = 0;\n\n      if (drawerSlide) {\n        var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp'\n        });\n      }\n\n      var drawerStyles = {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n      };\n      return __jsx(Animated.View, (_jsx6 = {\n        style: styles.main,\n        onLayout: _this._handleContainerLayout,\n        __self: _assertThisInitialized(_this)\n      }, _defineProperty(_jsx6, \"__self\", _assertThisInitialized(_this)), _defineProperty(_jsx6, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 7\n      }), _jsx6), __jsx(Animated.View, (_jsx3 = {\n        style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n        importantForAccessibility: _this._drawerShown ? 'no-hide-descendants' : 'yes',\n        __self: _assertThisInitialized(_this)\n      }, _defineProperty(_jsx3, \"__self\", _assertThisInitialized(_this)), _defineProperty(_jsx3, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 9\n      }), _jsx3), typeof _this.props.children === 'function' ? _this.props.children(_this._openValue) : _this.props.children, _this._renderOverlay()), __jsx(Animated.View, (_jsx5 = {\n        pointerEvents: \"box-none\",\n        ref: _this._accessibilityIsModalView,\n        accessibilityViewIsModal: _this._drawerShown,\n        style: [styles.drawerContainer, drawerStyles, drawerContainerStyle],\n        __self: _assertThisInitialized(_this)\n      }, _defineProperty(_jsx5, \"__self\", _assertThisInitialized(_this)), _defineProperty(_jsx5, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 9\n      }), _jsx5), __jsx(View, (_jsx4 = {\n        style: dynamicDrawerStyles,\n        __self: _assertThisInitialized(_this)\n      }, _defineProperty(_jsx4, \"__self\", _assertThisInitialized(_this)), _defineProperty(_jsx4, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 11\n      }), _jsx4), _this.props.renderNavigationView(_this._openValue))));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_setPanGestureRef\", function (ref) {\n      _this._panGestureHandler.current = ref;\n      _this.props.onGestureRef && _this.props.onGestureRef(ref);\n    });\n\n    var _dragX = new Animated.Value(0);\n\n    var _touchX = new Animated.Value(0);\n\n    var _drawerTranslation = new Animated.Value(0);\n\n    _this.state = {\n      dragX: _dragX,\n      touchX: _touchX,\n      drawerTranslation: _drawerTranslation,\n      containerWidth: 0\n    };\n\n    _this._updateAnimatedEvent(_props, _this.state);\n\n    return _this;\n  }\n\n  _createClass(DrawerLayout, [{\n    key: \"UNSAFE_componentWillUpdate\",\n    value: function UNSAFE_componentWillUpdate(props, state) {\n      if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n        this._updateAnimatedEvent(props, state);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _jsx7;\n\n      var _this$props4 = this.props,\n          drawerPosition = _this$props4.drawerPosition,\n          drawerLockMode = _this$props4.drawerLockMode,\n          edgeWidth = _this$props4.edgeWidth,\n          minSwipeDistance = _this$props4.minSwipeDistance;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: this._drawerShown ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: this._drawerShown ? undefined : edgeWidth\n      };\n      return __jsx(PanGestureHandler, (_jsx7 = {\n        ref: this._setPanGestureRef,\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n        failOffsetY: [-15, 15],\n        onGestureEvent: this._onGestureEvent,\n        onHandlerStateChange: this._openingHandlerStateChange,\n        enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n        enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open',\n        __self: this\n      }, _defineProperty(_jsx7, \"__self\", this), _defineProperty(_jsx7, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 7\n      }), _jsx7), this._renderDrawer());\n    }\n  }]);\n\n  return DrawerLayout;\n}(Component);\n\n_defineProperty(DrawerLayout, \"defaultProps\", {\n  drawerWidth: 200,\n  drawerPosition: 'left',\n  useNativeAnimations: true,\n  drawerType: 'front',\n  edgeWidth: 20,\n  minSwipeDistance: 3,\n  overlayColor: 'rgba(0, 0, 0, 0.7)',\n  drawerLockMode: 'unlocked',\n  enableTrackpadTwoFingerGesture: false\n});\n\n_defineProperty(DrawerLayout, \"positions\", {\n  Left: 'left',\n  Right: 'right'\n});\n\nexport { DrawerLayout as default };\nvar styles = StyleSheet.create({\n  drawerContainer: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    zIndex: 1001,\n    flexDirection: 'row'\n  }),\n  containerInFront: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    zIndex: 1002\n  }),\n  containerOnBack: _objectSpread({}, StyleSheet.absoluteFillObject),\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden'\n  },\n  overlay: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    zIndex: 1000\n  })\n});","map":{"version":3,"sources":["/Users/vidhi/Sites/Projects/examples/test/dashboard-next/node_modules/react-native-gesture-handler/DrawerLayout.js"],"names":["React","Component","invariant","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","props","context","createRef","state","drawerPosition","drawerWidth","drawerType","dragXValue","dragX","touchXValue","touchX","drawerTranslation","containerWidth","Animated","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","_openValue","extrapolate","_onGestureEvent","event","nativeEvent","x","useNativeDriver","useNativeAnimations","setState","layout","width","newState","drawerWillShow","onDrawerStateChanged","oldState","ACTIVE","_handleRelease","_emitStateChanged","keyboardDismissMode","Keyboard","dismiss","hideStatusBar","StatusBar","setHidden","statusBarAnimation","_drawerShown","drawerLockMode","closeDrawer","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","_animateDrawer","showing","_accessibilityIsModalView","current","setNativeProps","accessibilityViewIsModal","_pointerEventsView","pointerEvents","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","_panGestureHandler","activeOffsetX","fromValue","toValue","velocity","nextFramePosition","Math","min","max","willShow","_updateShowing","spring","bounciness","start","finished","onDrawerOpen","onDrawerClose","options","forceUpdate","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","_onTapHandlerStateChange","styles","overlay","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","I18nManager","isRTL","dynamicDrawerStyles","openValue","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","_handleContainerLayout","containerOnBack","containerInFront","children","_renderOverlay","drawerContainer","renderNavigationView","ref","onGestureRef","_updateAnimatedEvent","_setPanGestureRef","_openingHandlerStateChange","enableTrackpadTwoFingerGesture","_renderDrawer","Left","Right","StyleSheet","create","absoluteFillObject","zIndex","flex","overflow"],"mappings":"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","sourcesContent":["// @flow\n\n// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies\n// on react-native-gesture-handler library which isn't very popular at the\n// moment I decided to keep it here for the time being. It will allow us\n// to move faster and fix issues that may arise in gesture handler library\n// that could be found when using the drawer component\n\nimport React, { Component } from 'react';\nimport invariant from 'invariant';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  Keyboard,\n  StatusBar,\n  I18nManager,\n} from 'react-native';\n\nimport { PanGestureHandler, TapGestureHandler, State } from './GestureHandler';\n\nconst DRAG_TOSS = 0.05;\n\nconst IDLE = 'Idle';\nconst DRAGGING = 'Dragging';\nconst SETTLING = 'Settling';\n\nexport type PropType = {\n  children: any,\n  drawerBackgroundColor?: string,\n  drawerPosition: 'left' | 'right',\n  drawerLockMode?: 'unlocked' | 'locked-closed' | 'locked-open',\n  drawerWidth: number,\n  keyboardDismissMode?: 'none' | 'on-drag',\n  onDrawerClose?: Function,\n  onDrawerOpen?: Function,\n  onDrawerStateChanged?: Function,\n  renderNavigationView: (progressAnimatedValue: any) => any,\n  useNativeAnimations: boolean,\n\n  // brand new properties\n  drawerType: 'front' | 'back' | 'slide',\n  edgeWidth: number,\n  minSwipeDistance: number,\n  hideStatusBar?: boolean,\n  statusBarAnimation?: 'slide' | 'none' | 'fade',\n  overlayColor: string,\n  drawerContainerStyle?: any,\n  contentContainerStyle?: any,\n  onGestureRef?: Function,\n  enableTrackpadTwoFingerGesture?: boolean,\n\n  // Properties not yet supported\n  // onDrawerSlide?: Function\n};\n\nexport type StateType = {\n  dragX: any,\n  touchX: any,\n  drawerTranslation: any,\n  containerWidth: number,\n};\n\nexport type EventType = {\n  stopPropagation: Function,\n};\n\nexport type DrawerMovementOptionType = {\n  velocity?: number,\n};\n\nexport default class DrawerLayout extends Component<PropType, StateType> {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false,\n  };\n\n  static positions = {\n    Left: 'left',\n    Right: 'right',\n  };\n  _openValue: ?Animated.Interpolation;\n  _onGestureEvent: ?Animated.Event;\n  _accessibilityIsModalView = React.createRef();\n  _pointerEventsView = React.createRef();\n  _panGestureHandler = React.createRef();\n  _drawerShown = false;\n\n  constructor(props: PropType, context: any) {\n    super(props, context);\n\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0,\n    };\n\n    this._updateAnimatedEvent(props, this.state);\n  }\n\n  UNSAFE_componentWillUpdate(props: PropType, state: StateType) {\n    if (\n      this.props.drawerPosition !== props.drawerPosition ||\n      this.props.drawerWidth !== props.drawerWidth ||\n      this.props.drawerType !== props.drawerType ||\n      this.state.containerWidth !== state.containerWidth\n    ) {\n      this._updateAnimatedEvent(props, state);\n    }\n  }\n\n  _updateAnimatedEvent = (props: PropType, state: StateType) => {\n    // Event definition is based on\n    const { drawerPosition, drawerWidth, drawerType } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth,\n    } = state;\n\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n\n    if (drawerPosition !== 'left') {\n      // Most of the code is written in a way to handle left-side drawer.\n      // In order to handle right-side drawer the only thing we need to\n      // do is to reverse events coming from gesture handler in a way they\n      // emulate left-side drawer gestures. E.g. dragX is simply -dragX, and\n      // touchX is calulcated by subtracing real touchX from the width of the\n      // container (such that when touch happens at the right edge the value\n      // is simply 0)\n      dragX = Animated.multiply(new Animated.Value(-1), dragXValue);\n      touchX = Animated.add(\n        new Animated.Value(containerWidth),\n        Animated.multiply(new Animated.Value(-1), touchXValue)\n      );\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep start position\n    // of the gesture. Then we use that value to calculate how much we need to subtract from\n    // the dragX. If the gesture started on the greyed out area we take the distance from the\n    // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n    // drawer be pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    //\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(\n        touchX,\n        Animated.multiply(new Animated.Value(-1), dragX)\n      );\n\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n        outputRange: [0, 0, 1],\n      });\n      translationX = Animated.add(dragX, dragOffsetFromOnStartPosition);\n    }\n\n    this._openValue = Animated.add(translationX, drawerTranslation).interpolate(\n      {\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp',\n      }\n    );\n\n    this._onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\n      { useNativeDriver: props.useNativeAnimations }\n    );\n  };\n\n  _handleContainerLayout = ({ nativeEvent }) => {\n    this.setState({ containerWidth: nativeEvent.layout.width });\n  };\n\n  _emitStateChanged = (newState: string, drawerWillShow: boolean) => {\n    this.props.onDrawerStateChanged &&\n      this.props.onDrawerStateChanged(newState, drawerWillShow);\n  };\n\n  _openingHandlerStateChange = ({ nativeEvent }) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this._handleRelease(nativeEvent);\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this._emitStateChanged(DRAGGING, false);\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n\n  _onTapHandlerStateChange = ({ nativeEvent }) => {\n    if (\n      this._drawerShown &&\n      nativeEvent.oldState === State.ACTIVE &&\n      this.props.drawerLockMode !== 'locked-open'\n    ) {\n      this.closeDrawer();\n    }\n  };\n\n  _handleRelease = nativeEvent => {\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\n    const { containerWidth } = this.state;\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n\n    if (drawerPosition !== 'left') {\n      // See description in _updateAnimatedEvent about why events are flipped\n      // for right-side drawer\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart =\n        gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n    }\n\n    const startOffsetX =\n      dragX + dragOffsetBasedOnStart + (this._drawerShown ? drawerWidth : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n    const shouldOpen = projOffsetX > drawerWidth / 2;\n\n    if (shouldOpen) {\n      this._animateDrawer(startOffsetX, drawerWidth, velocityX);\n    } else {\n      this._animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n\n  _updateShowing = (showing: boolean) => {\n    this._drawerShown = showing;\n    this._accessibilityIsModalView.current &&\n      this._accessibilityIsModalView.current.setNativeProps({\n        accessibilityViewIsModal: showing,\n      });\n    this._pointerEventsView.current &&\n      this._pointerEventsView.current.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none',\n      });\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n    // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n    // orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);\n    // When drawer is closed we want the hitSlop to be horizontally shorter\n    // than the container size by the value of SLOP. This will make it only\n    // activate when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: showing ? undefined : edgeWidth }\n      : { right: 0, width: showing ? undefined : edgeWidth };\n    this._panGestureHandler.current &&\n      this._panGestureHandler.current.setNativeProps({\n        hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n      });\n  };\n\n  _animateDrawer = (fromValue: ?number, toValue: number, velocity: number) => {\n    this.state.dragX.setValue(0);\n    this.state.touchX.setValue(\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\n    );\n\n    if (fromValue != null) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        // When using native driver, we predict the next position of the animation\n        // because it takes one frame of a roundtrip to pass RELEASE event from\n        // native driver to JS before we can start animating. Without it, it is more\n        // noticable that the frame is dropped.\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n\n    const willShow = toValue !== 0;\n    this._updateShowing(willShow);\n    this._emitStateChanged(SETTLING, willShow);\n    if (this.props.hideStatusBar) {\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n    }\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations,\n    }).start(({ finished }) => {\n      if (finished) {\n        this._emitStateChanged(IDLE, willShow);\n        if (willShow) {\n          this.props.onDrawerOpen && this.props.onDrawerOpen();\n        } else {\n          this.props.onDrawerClose && this.props.onDrawerClose();\n        }\n      }\n    });\n  };\n\n  openDrawer = (options: DrawerMovementOptionType = {}) => {\n    this._animateDrawer(\n      undefined,\n      this.props.drawerWidth,\n      options.velocity ? options.velocity : 0\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and it would not be clickable\n    this.forceUpdate();\n  };\n\n  closeDrawer = (options: DrawerMovementOptionType = {}) => {\n    this._animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n\n    // We need to force the update, otherwise the overlay is not rerendered and it would be still clickable\n    this.forceUpdate();\n  };\n\n  _renderOverlay = () => {\n    /* Overlay styles */\n    invariant(this._openValue, 'should be set');\n    const overlayOpacity = this._openValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor,\n    };\n\n    return (\n      <TapGestureHandler onHandlerStateChange={this._onTapHandlerStateChange}>\n        <Animated.View\n          pointerEvents={this._drawerShown ? 'auto' : 'none'}\n          ref={this._pointerEventsView}\n          style={[styles.overlay, dynamicOverlayStyles]}\n        />\n      </TapGestureHandler>\n    );\n  };\n\n  _renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n\n    // we rely on row and row-reverse flex directions to position the drawer\n    // properly. Apparently for RTL these are flipped which requires us to use\n    // the opposite setting for the drawer to appear from left or right according\n    // to the drawerPosition prop\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth,\n    };\n    const openValue = this._openValue;\n    invariant(openValue, 'should be set');\n\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n        extrapolate: 'clamp',\n      });\n      containerStyles = {\n        transform: [{ translateX: containerTranslateX }],\n      };\n    }\n\n    let drawerTranslateX = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n      drawerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [closedDrawerOffset, 0],\n        extrapolate: 'clamp',\n      });\n    }\n    const drawerStyles = {\n      transform: [{ translateX: drawerTranslateX }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n    };\n\n    return (\n      <Animated.View style={styles.main} onLayout={this._handleContainerLayout}>\n        <Animated.View\n          style={[\n            drawerType === 'front'\n              ? styles.containerOnBack\n              : styles.containerInFront,\n            containerStyles,\n            contentContainerStyle,\n          ]}\n          importantForAccessibility={\n            this._drawerShown ? 'no-hide-descendants' : 'yes'\n          }>\n          {typeof this.props.children === 'function'\n            ? this.props.children(this._openValue)\n            : this.props.children}\n          {this._renderOverlay()}\n        </Animated.View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          ref={this._accessibilityIsModalView}\n          accessibilityViewIsModal={this._drawerShown}\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this._openValue)}\n          </View>\n        </Animated.View>\n      </Animated.View>\n    );\n  };\n\n  _setPanGestureRef = ref => {\n    this._panGestureHandler.current = ref;\n    this.props.onGestureRef && this.props.onGestureRef(ref);\n  };\n\n  render() {\n    const {\n      drawerPosition,\n      drawerLockMode,\n      edgeWidth,\n      minSwipeDistance,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n\n    // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n    // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n    // orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);\n\n    // When drawer is closed we want the hitSlop to be horizontally shorter\n    // than the container size by the value of SLOP. This will make it only\n    // activate when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: this._drawerShown ? undefined : edgeWidth }\n      : { right: 0, width: this._drawerShown ? undefined : edgeWidth };\n\n    return (\n      <PanGestureHandler\n        ref={this._setPanGestureRef}\n        hitSlop={hitSlop}\n        activeOffsetX={gestureOrientation * minSwipeDistance}\n        failOffsetY={[-15, 15]}\n        onGestureEvent={this._onGestureEvent}\n        onHandlerStateChange={this._openingHandlerStateChange}\n        enableTrackpadTwoFingerGesture={\n          this.props.enableTrackpadTwoFingerGesture\n        }\n        enabled={\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n        }>\n        {this._renderDrawer()}\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row',\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002,\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}