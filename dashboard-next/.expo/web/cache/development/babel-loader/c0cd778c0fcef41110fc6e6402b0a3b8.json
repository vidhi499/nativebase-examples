{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _Input = _interopRequireDefault(require(\"../../primitives/Input\"));\n\nvar _Context = require(\"./Context\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar NumberInputFiled = function NumberInputFiled(_ref, ref) {\n  var isDisabled = _ref.isDisabled,\n      props = _objectWithoutProperties(_ref, [\"isDisabled\"]);\n\n  var _react$default$useCon = _react[\"default\"].useContext(_Context.NumberInputContext),\n      handleChange = _react$default$useCon.handleChange,\n      handleChangeWithoutCheck = _react$default$useCon.handleChangeWithoutCheck,\n      numberInputStepper = _react$default$useCon.numberInputStepper,\n      numberInputValue = _react$default$useCon.numberInputValue,\n      context = _objectWithoutProperties(_react$default$useCon, [\"handleChange\", \"handleChangeWithoutCheck\", \"numberInputStepper\", \"numberInputValue\"]);\n\n  var changeHandler = function changeHandler(inputValue) {\n    var minusIndex = inputValue.indexOf('-');\n\n    if (minusIndex !== -1 && minusIndex !== 0) {\n      inputValue = inputValue.replace('-', '');\n      inputValue = '-' + inputValue;\n    }\n\n    var value = parseInt(inputValue, 10);\n    if (value) handleChangeWithoutCheck && handleChangeWithoutCheck(value);else handleChangeWithoutCheck && handleChangeWithoutCheck(0);\n  };\n\n  var blurHandler = function blurHandler() {\n    if (numberInputValue) handleChange && handleChange(numberInputValue);\n  };\n\n  return _react[\"default\"].createElement(_Input[\"default\"], _extends({\n    p: 0,\n    pl: 2,\n    width: \"70%\"\n  }, context, props, {\n    onBlur: function onBlur() {\n      return blurHandler();\n    },\n    isDisabled: isDisabled || context.isDisabled,\n    onChangeText: function onChangeText(inputValue) {\n      return changeHandler(inputValue);\n    },\n    keyboardType: \"numeric\",\n    value: \"\".concat(numberInputValue),\n    style: [context.style, props.style],\n    InputRightElement: numberInputStepper,\n    ref: ref\n  }));\n};\n\nvar _default = _react[\"default\"].forwardRef(NumberInputFiled);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["NumberInputField.tsx"],"names":["NumberInputFiled","props","context","React","NumberInputContext","changeHandler","inputValue","minusIndex","value","parseInt","handleChangeWithoutCheck","blurHandler","handleChange","isDisabled","ref"],"mappings":";;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,0BAAA,CAAA;;AAEA,IAAA,QAAA,GAAA,OAAA,aAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAA,GAAA,EAGpB;AAAA,MAFH,UAEG,QAFH,UAEG;AAAA,MAFcC,KAEd;;AAAA,8BAUCE,MAAAA,WAAAA,CAAAA,UAAAA,CAAiBC,QAAAA,CATrB,kBASID,CAVD;AAAA,MACG,YADH,yBACG,YADH;AAAA,MACG,wBADH,yBACG,wBADH;AAAA,MACG,kBADH,yBACG,kBADH;AAAA,MACG,gBADH,yBACG,gBADH;AAAA,MAMED,OANF;;AAWH,MAAMG,aAAa,GAAIC,SAAjBD,aAAiBC,CAAAA,UAAD,EAAqB;AACzC,QAAIC,UAAU,GAAGD,UAAU,CAAVA,OAAAA,CAAjB,GAAiBA,CAAjB;;AACA,QAAIC,UAAU,KAAK,CAAfA,CAAAA,IAAqBA,UAAU,KAAnC,CAAA,EAA2C;AACzCD,MAAAA,UAAU,GAAGA,UAAU,CAAVA,OAAAA,CAAAA,GAAAA,EAAbA,EAAaA,CAAbA;AACAA,MAAAA,UAAU,GAAG,MAAbA,UAAAA;AACD;;AACD,QAAME,KAAK,GAAGC,QAAQ,CAAA,UAAA,EAAtB,EAAsB,CAAtB;AACA,QAAA,KAAA,EAAWC,wBAAwB,IAAIA,wBAAwB,CAA/D,KAA+D,CAApDA,CAAX,KACKA,wBAAwB,IAAIA,wBAAwB,CAApDA,CAAoD,CAApDA;AARP,GAAA;;AAUA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,QAAA,gBAAA,EAAsBC,YAAY,IAAIA,YAAY,CAA5BA,gBAA4B,CAA5BA;AADxB,GAAA;;AAGA,SACE,MAAA,WAAA,CAAA,aAAA,CAAC,MAAD,WAAA,EAAA,QAAA,CAAA;AACE,IAAA,CAAC,EADH,CAAA;AAEE,IAAA,EAAE,EAFJ,CAAA;AAIE,IAAA,KAAK,EAAC;AAJR,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA;AAOE,IAAA,MAAM,EAAE;AAAA,aAAMD,WAPhB,EAOU;AAAA,KAPV;AAQE,IAAA,UAAU,EAAEE,UAAU,IAAIX,OAAO,CARnC,UAAA;AASE,IAAA,YAAY,EAAGI,sBAAAA,UAAD;AAAA,aAAgBD,aAAa,CAT7C,UAS6C,CAA7B;AAAA,KAThB;AAUE,IAAA,YAAY,EAVd,SAAA;AAWE,IAAA,KAAK,EAAA,GAAA,MAAA,CAXP,gBAWO,CAXP;AAYE,IAAA,KAAK,EAAE,CAACH,OAAO,CAAR,KAAA,EAAgBD,KAAK,CAZ9B,KAYS,CAZT;AAaE,IAAA,iBAAiB,EAbnB,kBAAA;AAcE,IAAA,GAAG,EAAEa;AAdP,GAAA,CAAA,CADF;AA3BF,CAAA;;eA+CeX,MAAAA,WAAAA,CAAAA,UAAAA,CAAAA,gBAAAA,C","sourcesContent":["import React from 'react';\nimport Input from '../../primitives/Input';\nimport type { INumberInputContext, INumberInputFieldProps } from './props';\nimport { NumberInputContext } from './Context';\nimport type { TextInput } from 'react-native';\n\nconst NumberInputFiled = (\n  { isDisabled, ...props }: INumberInputFieldProps,\n  ref: any\n) => {\n  const {\n    handleChange,\n    handleChangeWithoutCheck,\n    numberInputStepper,\n    numberInputValue,\n    ...context\n  }: INumberInputContext & {\n    handleChange?: (value: string | number) => void;\n    numberInputStepper?: any;\n  } = React.useContext(NumberInputContext);\n  const changeHandler = (inputValue: any) => {\n    let minusIndex = inputValue.indexOf('-');\n    if (minusIndex !== -1 && minusIndex !== 0) {\n      inputValue = inputValue.replace('-', '');\n      inputValue = '-' + inputValue;\n    }\n    const value = parseInt(inputValue, 10);\n    if (value) handleChangeWithoutCheck && handleChangeWithoutCheck(value);\n    else handleChangeWithoutCheck && handleChangeWithoutCheck(0);\n  };\n  const blurHandler = () => {\n    if (numberInputValue) handleChange && handleChange(numberInputValue);\n  };\n  return (\n    <Input\n      p={0}\n      pl={2}\n      // TODO: shouldn't provide width like this.\n      width=\"70%\"\n      {...context}\n      {...props}\n      onBlur={() => blurHandler()}\n      isDisabled={isDisabled || context.isDisabled}\n      onChangeText={(inputValue) => changeHandler(inputValue)}\n      keyboardType=\"numeric\"\n      value={`${numberInputValue}`}\n      style={[context.style, props.style]}\n      InputRightElement={numberInputStepper}\n      ref={ref}\n    />\n  );\n};\n\nexport default React.forwardRef<TextInput, INumberInputFieldProps>(\n  NumberInputFiled\n);\n"]},"metadata":{},"sourceType":"script"}