{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useRadioGroup = useRadioGroup;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _hooks = require(\"../../../hooks\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction useRadioGroup(props, _state) {\n  var onChangeProp = props.onChange,\n      valueProp = props.value,\n      defaultValue = props.defaultValue,\n      name = props.name;\n\n  var _react$default$useSta = _react[\"default\"].useState(defaultValue || ''),\n      _react$default$useSta2 = _slicedToArray(_react$default$useSta, 2),\n      valueState = _react$default$useSta2[0],\n      setValue = _react$default$useSta2[1];\n\n  var _ref = (0, _hooks.useControllableProp)(valueProp, valueState),\n      _ref2 = _slicedToArray(_ref, 2),\n      isControlled = _ref2[0],\n      value = _ref2[1];\n\n  var onChange = function onChange(nextValue) {\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n\n    onChangeProp === null || onChangeProp === void 0 ? void 0 : onChangeProp(nextValue);\n  };\n\n  return {\n    radioGroupProps: {\n      accessibilityRole: 'radiogroup',\n      onChange: onChange,\n      value: value,\n      name: name\n    }\n  };\n}","map":{"version":3,"sources":["useRadioGroup.tsx"],"names":["onChange","value","name","React","defaultValue","nextValue","setValue","onChangeProp","radioGroupProps","accessibilityRole"],"mappings":";;;;;;;;;AACA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,kBAAA;;;;;;;;AAGO,SAAA,aAAA,CAAA,KAAA,EAAA,MAAA,EAGqB;AAAA,MACpB,YADoB,GAC1B,KAD0B,CAExBA,QAFwB;AAAA,MACpB,SADoB,GAC1B,KAD0B,CAGxBC,KAHwB;AAAA,MACpB,YADoB,GAC1B,KAD0B,CACpB,YADoB;AAAA,MAKxBC,IALwB,GAC1B,KAD0B,CAKxBA,IALwB;;AAAA,8BAQKC,MAAAA,WAAAA,CAAAA,QAAAA,CAC7BC,YAAY,IADd,EAA+BD,CARL;AAAA;AAAA,MAQpB,UARoB;AAAA,MAQpB,QARoB;;AAAA,aAYI,CAAA,GAAA,MAAA,CAAA,mBAAA,EAAA,SAAA,EAA9B,UAA8B,CAZJ;AAAA;AAAA,MAYpB,YAZoB;AAAA,MAYpB,KAZoB;;AAc1B,MAAMH,QAAQ,GAAIK,SAAZL,QAAYK,CAAAA,SAAD,EAA4B;AAC3C,QAAI,CAAJ,YAAA,EAAmB;AACjBC,MAAAA,QAAQ,CAARA,SAAQ,CAARA;AACD;;AACDC,IAAAA,YAAY,KAAZA,IAAAA,IAAAA,YAAY,KAAA,KAAZA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,YAAY,CAAZA,SAAY,CAAZA;AAJF,GAAA;;AAOA,SAAO;AACLC,IAAAA,eAAe,EAAE;AACfC,MAAAA,iBAAiB,EADF,YAAA;AAEfT,MAAAA,QAFe,EAEfA,QAFe;AAGfC,MAAAA,KAHe,EAGfA,KAHe;AAIfC,MAAAA,IAAAA,EAAAA;AAJe;AADZ,GAAP;AAQD","sourcesContent":["import type { IRadioValue, IRadioGroupProps } from './props';\nimport React from 'react';\nimport { useControllableProp } from '../../../hooks';\nimport type { IUseRadioGroupReturnType } from './props';\n\nexport function useRadioGroup(\n  props: IRadioGroupProps,\n  _state: any\n): IUseRadioGroupReturnType {\n  const {\n    onChange: onChangeProp,\n    value: valueProp,\n    defaultValue,\n    name,\n  } = props;\n\n  const [valueState, setValue] = React.useState<IRadioValue>(\n    defaultValue || ''\n  );\n\n  const [isControlled, value] = useControllableProp(valueProp, valueState);\n\n  const onChange = (nextValue: IRadioValue) => {\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n    onChangeProp?.(nextValue);\n  };\n\n  return {\n    radioGroupProps: {\n      accessibilityRole: 'radiogroup',\n      onChange,\n      value,\n      name,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}