{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useTypeahead = useTypeahead;\n\nvar _reducer = require(\"./reducer\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar stateChangeTypes = _interopRequireWildcard(require(\"./types\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _utils = require(\"./utils\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction isControlledProp(props, key) {\n  return props[key] !== undefined;\n}\n\nfunction useTypeahead(props) {\n  var defaultValues = _objectSpread({}, _utils.dropdownDefaultStateValues);\n\n  defaultValues.isOpen = (0, _utils.getDefaultValue)(props, 'isOpen');\n\n  var _react$default$useRed = _react[\"default\"].useReducer(_reducer.useTypeaheadReducer, defaultValues),\n      _react$default$useRed2 = _slicedToArray(_react$default$useRed, 2),\n      state = _react$default$useRed2[0],\n      dispatch = _react$default$useRed2[1];\n\n  var dispatchWithProps = function dispatchWithProps(object) {\n    dispatch(_objectSpread({}, object, {\n      props: props\n    }));\n  };\n\n  var inputValue = state.inputValue,\n      isOpen = state.isOpen;\n  var items = props.items,\n      onInputValueChange = props.onInputValueChange,\n      onSelectedItemChange = props.onSelectedItemChange,\n      selectedItem = props.selectedItem,\n      itemToString = props.itemToString;\n  var isControlled = isControlledProp(props, 'selectedItem');\n  (0, _react.useEffect)(function () {\n    if (isControlled) {\n      dispatch({\n        type: stateChangeTypes.ControlledPropUpdatedSelectedItem,\n        inputValue: itemToString(selectedItem)\n      });\n    }\n  }, [selectedItem, isControlled, itemToString]);\n\n  var onChangeText = function onChangeText(text) {\n    onInputValueChange === null || onInputValueChange === void 0 ? void 0 : onInputValueChange({\n      inputValue: text\n    });\n    dispatchWithProps({\n      type: stateChangeTypes.InputChange,\n      inputValue: text\n    });\n  };\n\n  var handleItemSelect = function handleItemSelect(item, index) {\n    onSelectedItemChange === null || onSelectedItemChange === void 0 ? void 0 : onSelectedItemChange(item);\n    dispatchWithProps({\n      type: stateChangeTypes.ItemClick,\n      index: index\n    });\n\n    _reactNative.Keyboard.dismiss();\n  };\n\n  var getMenuItemProps = function getMenuItemProps(item, index) {\n    return {\n      onPress: function onPress() {\n        return handleItemSelect(item, index);\n      },\n      accessible: true,\n      accessiblityRole: 'menuitem'\n    };\n  };\n\n  var getMenuProps = function getMenuProps() {\n    return {\n      accessible: true,\n      accessibilityRole: 'menu',\n      accessibilityHint: \"Showing \".concat(items.length, \" records\")\n    };\n  };\n\n  var getToggleButtonProps = function getToggleButtonProps() {\n    return {\n      onPress: function onPress() {\n        dispatchWithProps({\n          type: stateChangeTypes.ToggleButtonClick\n        });\n      }\n    };\n  };\n\n  var getInputProps = function getInputProps(propInputVal, propOnchangeText) {\n    return {\n      onChangeText: propInputVal ? propOnchangeText : onChangeText,\n      value: propInputVal ? propInputVal : inputValue,\n      accessibilityRole: 'combobox',\n      accessibilityLabel: 'Typeahead input',\n      accessibilityState: {\n        expanded: isOpen\n      }\n    };\n  };\n\n  return {\n    getInputProps: getInputProps,\n    getMenuItemProps: getMenuItemProps,\n    getMenuProps: getMenuProps,\n    getToggleButtonProps: getToggleButtonProps,\n    isOpen: isOpen\n  };\n}","map":{"version":3,"sources":["useTypeahead.ts"],"names":["props","defaultValues","dropdownDefaultStateValues","React","useTypeaheadReducer","dispatchWithProps","object","dispatch","isOpen","itemToString","isControlled","isControlledProp","type","stateChangeTypes","inputValue","onChangeText","text","onInputValueChange","handleItemSelect","onSelectedItemChange","index","Keyboard","getMenuItemProps","onPress","accessible","accessiblityRole","getMenuProps","accessibilityRole","accessibilityHint","items","getToggleButtonProps","ToggleButtonClick","getInputProps","propInputVal","value","accessibilityLabel","accessibilityState","expanded"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,aAAA;;AACA,IAAA,MAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,gBAAA,GAAA,uBAAA,CAAA,OAAA,WAAA,CAAA;;;;AAGA,IAAA,MAAA,GAAA,OAAA,WAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAAA,gBAAA,CAAA,KAAA,EAAA,GAAA,EAAmD;AACjD,SAAOA,KAAK,CAALA,GAAK,CAALA,KAAP,SAAA;AACD;;AAIM,SAAA,YAAA,CAAA,KAAA,EAAiD;AACtD,MAAIC,aAAa,qBAAQC,MAAAA,CAAAA,0BAAR,CAAjB;;AACAD,EAAAA,aAAa,CAAbA,MAAAA,GAAuB,CAAA,GAAA,MAAA,CAAA,eAAA,EAAA,KAAA,EAAvBA,QAAuB,CAAvBA;;AAFsD,8BAI5BE,MAAAA,WAAAA,CAAAA,UAAAA,CACxBC,QAAAA,CADwBD,mBAAAA,EAA1B,aAA0BA,CAJ4B;AAAA;AAAA,MAIhD,KAJgD;AAAA,MAIhD,QAJgD;;AAStD,MAAME,iBAAiB,GAAIC,SAArBD,iBAAqBC,CAAAA,MAAD,EAAiB;AACzCC,IAAAA,QAAQ,mBAAC,MAAD;AAAcP,MAAAA,KAAAA,EAAAA;AAAd,OAARO;AADF,GAAA;;AATsD,MAahD,UAbgD,GAatD,KAbsD,CAahD,UAbgD;AAAA,MAalCC,MAbkC,GAatD,KAbsD,CAalCA,MAbkC;AAAA,MAehD,KAfgD,GAetD,KAfsD,CAehD,KAfgD;AAAA,MAehD,kBAfgD,GAetD,KAfsD,CAehD,kBAfgD;AAAA,MAehD,oBAfgD,GAetD,KAfsD,CAehD,oBAfgD;AAAA,MAehD,YAfgD,GAetD,KAfsD,CAehD,YAfgD;AAAA,MAoBpDC,YApBoD,GAetD,KAfsD,CAoBpDA,YApBoD;AAuBtD,MAAMC,YAAY,GAAGC,gBAAgB,CAAA,KAAA,EAArC,cAAqC,CAArC;AAEA,GAAA,GAAA,MAAA,CAAA,SAAA,EAAU,YAAM;AACd,QAAA,YAAA,EAAkB;AAChBJ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEC,gBAAgB,CADf,iCAAA;AAEPC,QAAAA,UAAU,EAAEL,YAAY,CAAA,YAAA;AAFjB,OAAD,CAARF;AAID;AANH,GAAA,EAOG,CAAA,YAAA,EAAA,YAAA,EAPH,YAOG,CAPH;;AASA,MAAMQ,YAAY,GAAIC,SAAhBD,YAAgBC,CAAAA,IAAD,EAAkB;AACrCC,IAAAA,kBAAkB,KAAlBA,IAAAA,IAAAA,kBAAkB,KAAA,KAAlBA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,kBAAkB,CAAG;AAAEH,MAAAA,UAAU,EAAEE;AAAd,KAAH,CAAlBC;AACAZ,IAAAA,iBAAiB,CAAC;AAAEO,MAAAA,IAAI,EAAEC,gBAAgB,CAAxB,WAAA;AAAsCC,MAAAA,UAAU,EAAEE;AAAlD,KAAD,CAAjBX;AAFF,GAAA;;AAKA,MAAMa,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,IAAA,EAAA,KAAA,EAA8B;AACrDC,IAAAA,oBAAoB,KAApBA,IAAAA,IAAAA,oBAAoB,KAAA,KAApBA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,oBAAoB,CAApBA,IAAoB,CAApBA;AACAd,IAAAA,iBAAiB,CAAC;AAAEO,MAAAA,IAAI,EAAEC,gBAAgB,CAAxB,SAAA;AAAoCO,MAAAA,KAAAA,EAAAA;AAApC,KAAD,CAAjBf;;AACAgB,IAAAA,YAAAA,CAAAA,QAAAA,CAAAA,OAAAA;AAHF,GAAA;;AAMA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,IAAA,EAAA,KAAA,EAA8B;AACrD,WAAO;AACLC,MAAAA,OAAO,EAAE;AAAA,eAAML,gBAAgB,CAAA,IAAA,EAD1B,KAC0B,CAAtB;AAAA,OADJ;AAELM,MAAAA,UAAU,EAFL,IAAA;AAGLC,MAAAA,gBAAgB,EAAE;AAHb,KAAP;AADF,GAAA;;AAQA,MAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,WAAO;AACLF,MAAAA,UAAU,EADL,IAAA;AAELG,MAAAA,iBAAiB,EAFZ,MAAA;AAGLC,MAAAA,iBAAiB,EAAA,WAAA,MAAA,CAAaC,KAAK,CAAlB,MAAA,EAAA,UAAA;AAHZ,KAAP;AADF,GAAA;;AAQA,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AACjC,WAAO;AACLP,MAAAA,OAAO,EAAE,mBAAM;AACblB,QAAAA,iBAAiB,CAAC;AAAEO,UAAAA,IAAI,EAAEC,gBAAgB,CAACkB;AAAzB,SAAD,CAAjB1B;AACD;AAHI,KAAP;AADF,GAAA;;AAQA,MAAM2B,aAAa,GAAG,SAAhBA,aAAgB,CAAA,YAAA,EAAA,gBAAA,EAAgD;AACpE,WAAO;AACLjB,MAAAA,YAAY,EAAEkB,YAAY,GAAA,gBAAA,GADrB,YAAA;AAELC,MAAAA,KAAK,EAAED,YAAY,GAAA,YAAA,GAFd,UAAA;AAGLN,MAAAA,iBAAiB,EAHZ,UAAA;AAILQ,MAAAA,kBAAkB,EAJb,iBAAA;AAKLC,MAAAA,kBAAkB,EAAE;AAClBC,QAAAA,QAAQ,EAAE7B;AADQ;AALf,KAAP;AADF,GAAA;;AAYA,SAAO;AACLwB,IAAAA,aADK,EACLA,aADK;AAELV,IAAAA,gBAFK,EAELA,gBAFK;AAGLI,IAAAA,YAHK,EAGLA,YAHK;AAILI,IAAAA,oBAJK,EAILA,oBAJK;AAKLtB,IAAAA,MAAAA,EAAAA;AALK,GAAP;AAOD","sourcesContent":["import { useTypeaheadReducer } from './reducer';\nimport React, { useEffect } from 'react';\nimport * as stateChangeTypes from './types';\nimport type { AccessibilityRole } from 'react-native';\nimport { Keyboard } from 'react-native';\nimport { dropdownDefaultStateValues, getDefaultValue } from './utils';\n\nfunction isControlledProp(props: any, key: string) {\n  return props[key] !== undefined;\n}\n\nimport type { IUseTypeaheadProps } from './props';\n\nexport function useTypeahead(props: IUseTypeaheadProps) {\n  let defaultValues = { ...dropdownDefaultStateValues };\n  defaultValues.isOpen = getDefaultValue(props, 'isOpen');\n\n  const [state, dispatch] = React.useReducer(\n    useTypeaheadReducer,\n    defaultValues\n  );\n\n  const dispatchWithProps = (object: any) => {\n    dispatch({ ...object, props });\n  };\n\n  const { inputValue, isOpen } = state;\n\n  const {\n    items,\n    onInputValueChange,\n    onSelectedItemChange,\n    selectedItem,\n    itemToString,\n  } = props;\n\n  const isControlled = isControlledProp(props, 'selectedItem');\n\n  useEffect(() => {\n    if (isControlled) {\n      dispatch({\n        type: stateChangeTypes.ControlledPropUpdatedSelectedItem,\n        inputValue: itemToString(selectedItem),\n      });\n    }\n  }, [selectedItem, isControlled, itemToString]);\n\n  const onChangeText = (text: string) => {\n    onInputValueChange?.({ inputValue: text });\n    dispatchWithProps({ type: stateChangeTypes.InputChange, inputValue: text });\n  };\n\n  const handleItemSelect = (item: any, index: number) => {\n    onSelectedItemChange?.(item);\n    dispatchWithProps({ type: stateChangeTypes.ItemClick, index });\n    Keyboard.dismiss();\n  };\n\n  const getMenuItemProps = (item: any, index: number) => {\n    return {\n      onPress: () => handleItemSelect(item, index),\n      accessible: true,\n      accessiblityRole: 'menuitem' as AccessibilityRole,\n    };\n  };\n\n  const getMenuProps = () => {\n    return {\n      accessible: true,\n      accessibilityRole: 'menu' as AccessibilityRole,\n      accessibilityHint: `Showing ${items.length} records`,\n    };\n  };\n\n  const getToggleButtonProps = () => {\n    return {\n      onPress: () => {\n        dispatchWithProps({ type: stateChangeTypes.ToggleButtonClick });\n      },\n    };\n  };\n\n  const getInputProps = (propInputVal?: any, propOnchangeText?: any) => {\n    return {\n      onChangeText: propInputVal ? propOnchangeText : onChangeText,\n      value: propInputVal ? propInputVal : inputValue,\n      accessibilityRole: 'combobox' as AccessibilityRole,\n      accessibilityLabel: 'Typeahead input',\n      accessibilityState: {\n        expanded: isOpen,\n      },\n    };\n  };\n\n  return {\n    getInputProps,\n    getMenuItemProps,\n    getMenuProps,\n    getToggleButtonProps,\n    isOpen,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}