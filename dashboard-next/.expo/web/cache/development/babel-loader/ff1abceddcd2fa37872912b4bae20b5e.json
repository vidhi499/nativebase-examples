{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MenuOptionGroup = exports.MenuOptionContext = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _MenuGroup = require(\"./MenuGroup\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar MenuOptionContext = _react[\"default\"].createContext({\n  values: [],\n  onChange: function onChange(_val) {},\n  type: 'checkbox'\n});\n\nexports.MenuOptionContext = MenuOptionContext;\n\nvar MenuOptionGroup = function MenuOptionGroup(_ref) {\n  var type = _ref.type,\n      defaultValue = _ref.defaultValue,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      props = _objectWithoutProperties(_ref, [\"type\", \"defaultValue\", \"value\", \"onChange\"]);\n\n  var internalDefaultValue = defaultValue ? Array.isArray(defaultValue) ? defaultValue : [defaultValue] : [];\n\n  var _react$default$useSta = _react[\"default\"].useState(internalDefaultValue),\n      _react$default$useSta2 = _slicedToArray(_react$default$useSta, 2),\n      internalValues = _react$default$useSta2[0],\n      setValues = _react$default$useSta2[1];\n\n  onChange = function onChange(newValue) {\n    if (type === 'checkbox') {\n      var newValues = _toConsumableArray(internalValues);\n\n      if (internalValues.includes(newValue)) {\n        newValues.splice(newValues.indexOf(newValue), 1);\n        setValues(newValues);\n      } else {\n        newValues.push(newValue);\n        setValues(newValues);\n      }\n    } else if (type === 'radio') {\n      setValues([newValue]);\n    }\n  };\n\n  return _react[\"default\"].createElement(MenuOptionContext.Provider, {\n    value: {\n      values: !value ? internalValues : Array.isArray(value) ? value : [value],\n      onChange: onChange,\n      type: type\n    }\n  }, _react[\"default\"].createElement(_MenuGroup.MenuGroup, props));\n};\n\nexports.MenuOptionGroup = MenuOptionGroup;","map":{"version":3,"sources":["MenuOptionGroup.tsx"],"names":["MenuOptionContext","values","onChange","_val","type","MenuOptionGroup","props","internalDefaultValue","defaultValue","Array","React","newValue","newValues","internalValues","setValues"],"mappings":";;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,eAAA;;;;;;;;AAGO,IAAMA,iBAAiB,GAAG,MAAA,WAAA,CAAA,aAAA,CAA6C;AAC5EC,EAAAA,MAAM,EADsE,EAAA;AAE5EC,EAAAA,QAAQ,EAAGC,kBAAAA,IAAD,EAAU,CAFwD,CAAA;AAG5EC,EAAAA,IAAI,EAAE;AAHsE,CAA7C,CAA1B;;;;AAMA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAMF;AAAA,MANG,IAMH,QANG,IAMH;AAAA,MANG,YAMH,QANG,YAMH;AAAA,MANG,KAMH,QANG,KAMH;AAAA,MANG,QAMH,QANG,QAMH;AAAA,MADxBC,KACwB;;AAC3B,MAAIC,oBAAoB,GAAGC,YAAY,GACnCC,KAAK,CAALA,OAAAA,CAAAA,YAAAA,IAAAA,YAAAA,GAEE,CAHiC,YAGjC,CAHiC,GAAvC,EAAA;;AAD2B,8BAOOC,MAAAA,WAAAA,CAAAA,QAAAA,CAAlC,oBAAkCA,CAPP;AAAA;AAAA,MAOvB,cAPuB;AAAA,MAOvB,SAPuB;;AAU3BR,EAAAA,QAAQ,GAAIS,kBAAAA,QAAD,EAA+B;AACxC,QAAIP,IAAI,KAAR,UAAA,EAAyB;AACvB,UAAIQ,SAAS,sBAAb,cAAa,CAAb;;AACA,UAAIC,cAAc,CAAdA,QAAAA,CAAJ,QAAIA,CAAJ,EAAuC;AACrCD,QAAAA,SAAS,CAATA,MAAAA,CAAiBA,SAAS,CAATA,OAAAA,CAAjBA,QAAiBA,CAAjBA,EAAAA,CAAAA;AACAE,QAAAA,SAAS,CAATA,SAAS,CAATA;AAFF,OAAA,MAGO;AACLF,QAAAA,SAAS,CAATA,IAAAA,CAAAA,QAAAA;AACAE,QAAAA,SAAS,CAATA,SAAS,CAATA;AACD;AARH,KAAA,MASO,IAAIV,IAAI,KAAR,OAAA,EAAsB;AAC3BU,MAAAA,SAAS,CAAC,CAAVA,QAAU,CAAD,CAATA;AACD;AAZHZ,GAAAA;;AAcA,SACE,MAAA,WAAA,CAAA,aAAA,CAAC,iBAAD,CAAA,QAAA,EAAA;AACE,IAAA,KAAK,EAAE;AACLD,MAAAA,MAAM,EAAE,CAAA,KAAA,GAAA,cAAA,GAEJQ,KAAK,CAALA,OAAAA,CAAAA,KAAAA,IAAAA,KAAAA,GAEA,CALC,KAKD,CALC;AAMLP,MAAAA,QANK,EAMLA,QANK;AAOLE,MAAAA,IAAAA,EAAAA;AAPK;AADT,GAAA,EAWE,MAAA,WAAA,CAAA,aAAA,CAAC,UAAA,CAAD,SAAA,EAZJ,KAYI,CAXF,CADF;AA9BK,CAAA","sourcesContent":["import React from 'react';\nimport { MenuGroup } from './MenuGroup';\nimport type { IMenuOptionGroupProps, IMenuOptionContextProps } from './props';\n\nexport const MenuOptionContext = React.createContext<IMenuOptionContextProps>({\n  values: [],\n  onChange: (_val) => {},\n  type: 'checkbox',\n});\n\nexport const MenuOptionGroup = ({\n  type,\n  defaultValue,\n  value,\n  onChange,\n  ...props\n}: IMenuOptionGroupProps) => {\n  let internalDefaultValue = defaultValue\n    ? Array.isArray(defaultValue)\n      ? defaultValue\n      : [defaultValue]\n    : [];\n\n  let [internalValues, setValues] = React.useState<Array<string | number>>(\n    internalDefaultValue\n  );\n  onChange = (newValue: string | number) => {\n    if (type === 'checkbox') {\n      let newValues = [...internalValues];\n      if (internalValues.includes(newValue)) {\n        newValues.splice(newValues.indexOf(newValue), 1);\n        setValues(newValues);\n      } else {\n        newValues.push(newValue);\n        setValues(newValues);\n      }\n    } else if (type === 'radio') {\n      setValues([newValue]);\n    }\n  };\n  return (\n    <MenuOptionContext.Provider\n      value={{\n        values: !value\n          ? internalValues\n          : Array.isArray(value)\n          ? value\n          : [value],\n        onChange,\n        type,\n      }}\n    >\n      <MenuGroup {...props} />\n    </MenuOptionContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"script"}