{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _Box = _interopRequireDefault(require(\"../../primitives/Box\"));\n\nvar _hooks = require(\"../../../hooks\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Bones = function Bones(allProps) {\n  var circle = allProps.circle,\n      children = allProps.children,\n      props = _objectWithoutProperties(allProps, [\"circle\", \"children\"]);\n\n  var newProps = (0, _hooks.usePropsConfig)('Skeleton', props);\n  var style = newProps.style,\n      skeletonColor = newProps.skeletonColor,\n      baseColor = newProps.baseColor;\n\n  var blinkAnim = _react[\"default\"].useRef(new _reactNative.Animated.Value(0)).current;\n\n  _react[\"default\"].useEffect(function () {\n    var blink = _reactNative.Animated.sequence([_reactNative.Animated.timing(blinkAnim, {\n      toValue: 1,\n      duration: 1000,\n      useNativeDriver: _reactNative.Platform.OS !== 'web'\n    }), _reactNative.Animated.timing(blinkAnim, {\n      toValue: 0,\n      duration: 1000,\n      useNativeDriver: _reactNative.Platform.OS !== 'web'\n    })]);\n\n    _reactNative.Animated.loop(blink).start();\n  }, [blinkAnim]);\n\n  var skeletonStyle = {\n    skeleton: {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      borderRadius: circle ? 999 : 3,\n      backgroundColor: skeletonColor,\n      opacity: blinkAnim\n    },\n    base: {\n      borderRadius: circle ? 999 : 3,\n      backgroundColor: baseColor\n    }\n  };\n\n  var AnimationViewSetter = function AnimationViewSetter() {\n    if (children) {\n      if (children.length) {\n        return [_react[\"default\"].createElement(_reactNative.Animated.View, {\n          style: skeletonStyle.skeleton\n        })].concat(_toConsumableArray(children));\n      }\n\n      return [_react[\"default\"].createElement(_reactNative.Animated.View, {\n        style: skeletonStyle.skeleton\n      }), children];\n    }\n\n    return _react[\"default\"].createElement(_reactNative.Animated.View, {\n      style: skeletonStyle.skeleton\n    });\n  };\n\n  return _react[\"default\"].createElement(_Box[\"default\"], _extends({\n    style: [style, skeletonStyle.base]\n  }, props), AnimationViewSetter());\n};\n\nvar _default = Bones;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["Bones.tsx"],"names":["Bones","allProps","props","newProps","baseColor","blinkAnim","React","Animated","blink","toValue","duration","useNativeDriver","Platform","skeletonStyle","skeleton","position","top","bottom","left","right","borderRadius","circle","backgroundColor","opacity","base","AnimationViewSetter","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Box from '../../primitives/Box';\nimport { usePropsConfig } from '../../../hooks';\nimport { Animated, Platform } from 'react-native';\nimport type { ISkeletonProps } from './props';\n\nconst Bones = (allProps: ISkeletonProps & { circle?: boolean }) => {\n  const { circle, children, ...props } = allProps;\n  const newProps = usePropsConfig('Skeleton', props);\n  const { style, skeletonColor, baseColor } = newProps;\n  const blinkAnim = React.useRef(new Animated.Value(0)).current;\n\n  React.useEffect(() => {\n    const blink = Animated.sequence([\n      Animated.timing(blinkAnim, {\n        toValue: 1,\n        duration: 1000,\n        useNativeDriver: Platform.OS !== 'web',\n      }),\n      Animated.timing(blinkAnim, {\n        toValue: 0,\n        duration: 1000,\n        useNativeDriver: Platform.OS !== 'web',\n      }),\n    ]);\n    Animated.loop(blink).start();\n  }, [blinkAnim]);\n\n  const skeletonStyle = {\n    skeleton: {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      borderRadius: circle ? 999 : 3,\n      backgroundColor: skeletonColor,\n      opacity: blinkAnim, // Bind opacity to animated value\n    },\n    base: {\n      borderRadius: circle ? 999 : 3,\n      backgroundColor: baseColor,\n    },\n  };\n\n  const AnimationViewSetter = () => {\n    if (children) {\n      if (children.length) {\n        return [<Animated.View style={skeletonStyle.skeleton} />, ...children];\n      }\n      return [<Animated.View style={skeletonStyle.skeleton} />, children];\n    }\n    return <Animated.View style={skeletonStyle.skeleton} />;\n  };\n\n  return (\n    <Box style={[style, skeletonStyle.base]} {...props}>\n      {AnimationViewSetter()}\n    </Box>\n  );\n};\n\nexport default Bones;\n"]},"metadata":{},"sourceType":"script"}