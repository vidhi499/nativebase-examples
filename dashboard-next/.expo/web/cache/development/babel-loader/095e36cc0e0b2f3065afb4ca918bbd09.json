{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addTextAndPropsToStrings = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _Text = _interopRequireDefault(require(\"../components/primitives/Text\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar addTextAndPropsToStrings = function addTextAndPropsToStrings(children, props) {\n  var childArray = _react[\"default\"].Children.map(children, function (child) {\n    if (typeof child === 'string') {\n      return _react[\"default\"].createElement(_Text[\"default\"], props, child);\n    } else {\n      if (!child) {\n        return null;\n      }\n\n      return _react[\"default\"].cloneElement(child, _objectSpread({}, props, {}, child.props));\n    }\n  });\n\n  return childArray;\n};\n\nexports.addTextAndPropsToStrings = addTextAndPropsToStrings;","map":{"version":3,"sources":["addTextAndPropsToStrings.tsx"],"names":["addTextAndPropsToStrings","childArray","child","props"],"mappings":";;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,iCAAA,CAAA;;;;;;;;AAEO,IAAMA,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAA,QAAA,EAAA,KAAA,EAA+B;AACrE,MAAMC,UAAU,GAAG,MAAA,WAAA,CAAA,QAAA,CAAA,GAAA,CAAA,QAAA,EAA8BC,UAAAA,KAAD,EAAW;AACzD,QAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAC7B,aAAO,MAAA,WAAA,CAAA,aAAA,CAAC,KAAD,WAAA,EAAA,KAAA,EAAP,KAAO,CAAP;AADF,KAAA,MAEO;AACL,UAAI,CAAJ,KAAA,EAAY;AACV,eAAA,IAAA;AACD;;AACD,aAAO,MAAA,WAAA,CAAA,YAAA,CAAA,KAAA,oBAA0B,KAA1B,MAEFA,KAAK,CAACC,KAFJ,EAAP;AAID;AAXH,GAAmB,CAAnB;;AAaA,SAAA,UAAA;AAdK,CAAA","sourcesContent":["import React from 'react';\nimport Text from '../components/primitives/Text';\n\nexport const addTextAndPropsToStrings = (children: any, props: any) => {\n  const childArray = React.Children.map(children, (child) => {\n    if (typeof child === 'string') {\n      return <Text {...props}>{child}</Text>;\n    } else {\n      if (!child) {\n        return null;\n      }\n      return React.cloneElement(child, {\n        ...props,\n        ...child.props,\n      });\n    }\n  });\n  return childArray;\n};\n"]},"metadata":{},"sourceType":"script"}