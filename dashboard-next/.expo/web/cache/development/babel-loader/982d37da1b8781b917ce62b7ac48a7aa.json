{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _native = _interopRequireDefault(require(\"styled-components/native\"));\n\nvar _styledSystem = require(\"styled-system\");\n\nvar _customProps = require(\"../../../utils/customProps\");\n\nvar _hooks = require(\"../../../hooks\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar StyledHeading = (0, _native[\"default\"])(_reactNative.Text)(_styledSystem.color, _styledSystem.space, _styledSystem.layout, _styledSystem.flexbox, _styledSystem.border, _styledSystem.typography, _styledSystem.position, _customProps.customPosition, _customProps.customBorder, _customProps.customBackground, _customProps.customOutline, _customProps.customShadow, _customProps.customExtra, _customProps.customLayout, _customProps.customTypography);\n\nvar Heading = function Heading(_ref) {\n  var isTruncated = _ref.isTruncated,\n      props = _objectWithoutProperties(_ref, [\"isTruncated\"]);\n\n  var newProps = (0, _hooks.usePropsConfig)('Heading', props);\n  return _react[\"default\"].createElement(StyledHeading, _extends({\n    numberOfLines: isTruncated ? 1 : 999999\n  }, newProps));\n};\n\nvar _default = Heading;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["index.tsx"],"names":["StyledHeading","Text","color","space","layout","flexbox","border","typography","position","customPosition","customBorder","customBackground","customOutline","customShadow","customExtra","customLayout","customTypography","Heading","props","newProps","isTruncated"],"mappings":";;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAEA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AASA,IAAA,YAAA,GAAA,OAAA,8BAAA;;AAUA,IAAA,MAAA,GAAA,OAAA,kBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAMA,aAAa,GAAG,CAAA,GAAA,OAAA,WAAA,EAAOC,YAAAA,CAAP,IAAA,EACpBC,aAAAA,CADoB,KAAA,EAEpBC,aAAAA,CAFoB,KAAA,EAGpBC,aAAAA,CAHoB,MAAA,EAIpBC,aAAAA,CAJoB,OAAA,EAKpBC,aAAAA,CALoB,MAAA,EAMpBC,aAAAA,CANoB,UAAA,EAOpBC,aAAAA,CAPoB,QAAA,EAQpBC,YAAAA,CARoB,cAAA,EASpBC,YAAAA,CAToB,YAAA,EAUpBC,YAAAA,CAVoB,gBAAA,EAWpBC,YAAAA,CAXoB,aAAA,EAYpBC,YAAAA,CAZoB,YAAA,EAapBC,YAAAA,CAboB,WAAA,EAcpBC,YAAAA,CAdoB,YAAA,EAepBC,YAAAA,CAfF,gBAAsB,CAAtB;;AAkBA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAA8C;AAAA,MAA7C,WAA6C,QAA7C,WAA6C;AAAA,MAA3BC,KAA2B;;AAC5D,MAAMC,QAAQ,GAAG,CAAA,GAAA,MAAA,CAAA,cAAA,EAAA,SAAA,EAAjB,KAAiB,CAAjB;AACA,SACE,MAAA,WAAA,CAAA,aAAA,CAAA,aAAA,EAAA,QAAA,CAAA;AAAe,IAAA,aAAa,EAAEC,WAAW,GAAA,CAAA,GAAO;AAAhD,GAAA,EADF,QACE,CAAA,CADF;AAFF,CAAA;;eAOeH,O","sourcesContent":["import React from 'react';\nimport { Text } from 'react-native';\nimport styled from 'styled-components/native';\nimport {\n  border,\n  color,\n  flexbox,\n  layout,\n  space,\n  typography,\n  position,\n} from 'styled-system';\nimport {\n  customBorder,\n  customBackground,\n  customOutline,\n  customLayout,\n  customExtra,\n  customShadow,\n  customTypography,\n  customPosition,\n} from '../../../utils/customProps';\nimport { usePropsConfig } from '../../../hooks';\nimport type { IHeadingProps } from './props';\n\nconst StyledHeading = styled(Text)<IHeadingProps>(\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  typography,\n  position,\n  customPosition,\n  customBorder,\n  customBackground,\n  customOutline,\n  customShadow,\n  customExtra,\n  customLayout,\n  customTypography\n);\n\nconst Heading = ({ isTruncated, ...props }: IHeadingProps) => {\n  const newProps = usePropsConfig('Heading', props);\n  return (\n    <StyledHeading numberOfLines={isTruncated ? 1 : 999999} {...newProps} />\n  );\n};\n\nexport default Heading;\nexport type { IHeadingProps };\n"]},"metadata":{},"sourceType":"script"}