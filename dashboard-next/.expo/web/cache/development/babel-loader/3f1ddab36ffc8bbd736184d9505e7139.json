{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _extends2 = require(\"@babel/runtime/helpers/extends\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _primitives = require(\"../../primitives\");\n\nvar _Skeleton = require(\"./Skeleton\");\n\nvar _hooks = require(\"../../../hooks\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar NBSkeletonText = function NBSkeletonText(_ref) {\n  var props = _extends2({}, _ref);\n\n  var newProps = (0, _hooks.usePropsConfig)('SkeletonText', props);\n  var skeletonColor = newProps.skeletonColor,\n      lineSize = newProps.lineSize,\n      baseColor = newProps.baseColor,\n      noOfLines = newProps.noOfLines;\n  var para = [];\n\n  for (var i = 0; i < noOfLines; i++) {\n    para.push(_react[\"default\"].createElement(_Skeleton.Skeleton, {\n      width: i === noOfLines - 1 ? '70%' : '100%',\n      height: lineSize,\n      startColor: skeletonColor,\n      endColor: baseColor\n    }));\n  }\n\n  return _react[\"default\"].createElement(_primitives.Stack, _extends({\n    space: 3,\n    width: \"80%\"\n  }, newProps), para);\n};\n\nvar SkeletonText = function SkeletonText(_ref2) {\n  var children = _ref2.children,\n      isLoaded = _ref2.isLoaded,\n      props = _objectWithoutProperties(_ref2, [\"children\", \"isLoaded\"]);\n\n  if (isLoaded) return _react[\"default\"].createElement(_primitives.Box, props, children);\n  return _react[\"default\"].createElement(NBSkeletonText, props);\n};\n\nvar _default = SkeletonText;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["SkeletonText.tsx"],"names":["NBSkeletonText","props","newProps","noOfLines","para","i","baseColor","SkeletonText"],"mappings":";;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,oBAAA;;AACA,IAAA,SAAA,GAAA,OAAA,cAAA;;AACA,IAAA,MAAA,GAAA,OAAA,kBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,OAAsC;AAAA,MAAhCC,KAAgC;;AAC3D,MAAMC,QAAQ,GAAG,CAAA,GAAA,MAAA,CAAA,cAAA,EAAA,cAAA,EAAjB,KAAiB,CAAjB;AAD2D,MAErD,aAFqD,GAE3D,QAF2D,CAErD,aAFqD;AAAA,MAErD,QAFqD,GAE3D,QAF2D,CAErD,QAFqD;AAAA,MAErD,SAFqD,GAE3D,QAF2D,CAErD,SAFqD;AAAA,MAEfC,SAFe,GAE3D,QAF2D,CAEfA,SAFe;AAG3D,MAAMC,IAAI,GAAV,EAAA;;AACA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,SAAA,EAA+BA,CAA/B,EAAA,EAAoC;AAClCD,IAAAA,IAAI,CAAJA,IAAAA,CACE,MAAA,WAAA,CAAA,aAAA,CAAC,SAAA,CAAD,QAAA,EAAA;AACE,MAAA,KAAK,EAAEC,CAAC,KAAKF,SAAS,GAAfE,CAAAA,GAAAA,KAAAA,GADT,MAAA;AAEE,MAAA,MAAM,EAFR,QAAA;AAGE,MAAA,UAAU,EAHZ,aAAA;AAIE,MAAA,QAAQ,EAAEC;AAJZ,KAAA,CADFF;AAQD;;AACD,SACE,MAAA,WAAA,CAAA,aAAA,CAAC,WAAA,CAAD,KAAA,EAAA,QAAA,CAAA;AAAO,IAAA,KAAK,EAAZ,CAAA;AAAiB,IAAA,KAAK,EAAC;AAAvB,GAAA,EAAA,QAAA,CAAA,EADF,IACE,CADF;AAdF,CAAA;;AAqBA,IAAMG,YAAY,GAAG,SAAfA,YAAe,QAA0D;AAAA,MAAzD,QAAyD,SAAzD,QAAyD;AAAA,MAAzD,QAAyD,SAAzD,QAAyD;AAAA,MAAhCN,KAAgC;;AAC7E,MAAA,QAAA,EAAc,OAAO,MAAA,WAAA,CAAA,aAAA,CAAC,WAAA,CAAD,GAAA,EAAA,KAAA,EAAP,QAAO,CAAP;AAEd,SAAO,MAAA,WAAA,CAAA,aAAA,CAAA,cAAA,EAAP,KAAO,CAAP;AAHF,CAAA;;eAMeM,Y","sourcesContent":["import React from 'react';\nimport { Box, Stack } from '../../primitives';\nimport { Skeleton } from './Skeleton';\nimport { usePropsConfig } from '../../../hooks';\nimport type { ISkeletonTextProps } from './props';\n\nconst NBSkeletonText = ({ ...props }: ISkeletonTextProps) => {\n  const newProps = usePropsConfig('SkeletonText', props);\n  const { skeletonColor, lineSize, baseColor, noOfLines } = newProps;\n  const para = [];\n  for (let i = 0; i < noOfLines; i++) {\n    para.push(\n      <Skeleton\n        width={i === noOfLines - 1 ? '70%' : '100%'}\n        height={lineSize}\n        startColor={skeletonColor}\n        endColor={baseColor}\n      />\n    );\n  }\n  return (\n    <Stack space={3} width=\"80%\" {...newProps}>\n      {para}\n    </Stack>\n  );\n};\n\nconst SkeletonText = ({ children, isLoaded, ...props }: ISkeletonTextProps) => {\n  if (isLoaded) return <Box {...props}>{children}</Box>;\n\n  return <NBSkeletonText {...props} />;\n};\n\nexport default SkeletonText;\n"]},"metadata":{},"sourceType":"script"}