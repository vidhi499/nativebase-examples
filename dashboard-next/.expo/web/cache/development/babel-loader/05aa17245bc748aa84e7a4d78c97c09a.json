{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _Input = _interopRequireDefault(require(\"../../primitives/Input\"));\n\nvar _Context = require(\"./Context\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar PinInputFiled = function PinInputFiled(_ref) {\n  var _ref$fieldIndex = _ref.fieldIndex,\n      fieldIndex = _ref$fieldIndex === void 0 ? 0 : _ref$fieldIndex,\n      pDefaultValue = _ref.defaultValue,\n      props = _objectWithoutProperties(_ref, [\"fieldIndex\", \"defaultValue\"]);\n\n  var _react$default$useCon = _react[\"default\"].useContext(_Context.PinInputContext),\n      handleChange = _react$default$useCon.handleChange,\n      cValue = _react$default$useCon.value,\n      setRefList = _react$default$useCon.setRefList,\n      cDefaultValue = _react$default$useCon.defaultValue,\n      handleMultiValueChange = _react$default$useCon.handleMultiValueChange,\n      context = _objectWithoutProperties(_react$default$useCon, [\"handleChange\", \"value\", \"setRefList\", \"defaultValue\", \"handleMultiValueChange\"]);\n\n  cDefaultValue = cDefaultValue && cDefaultValue[fieldIndex];\n  cValue = cValue && cValue[fieldIndex];\n\n  var keyPressHandler = function keyPressHandler(event) {\n    if (event.nativeEvent.key >= 0 && event.nativeEvent.key <= 9) {\n      handleChange && handleChange(event.nativeEvent.key, fieldIndex);\n    } else if (event.nativeEvent.key === 'Backspace') {\n      handleChange && handleChange('', fieldIndex);\n    }\n  };\n\n  var textChangeHandler = function textChangeHandler(value) {\n    handleMultiValueChange && handleMultiValueChange(value, fieldIndex);\n  };\n\n  var myRef = _react[\"default\"].useRef(null);\n\n  _react[\"default\"].useEffect(function () {\n    setRefList && setRefList(myRef, fieldIndex);\n  }, [myRef, fieldIndex, setRefList]);\n\n  return _react[\"default\"].createElement(_Input[\"default\"], _extends({\n    ref: myRef\n  }, context, props, {\n    onKeyPress: function onKeyPress(event) {\n      return keyPressHandler(event);\n    },\n    onChangeText: function onChangeText(value) {\n      return textChangeHandler(value);\n    },\n    keyboardType: \"numeric\",\n    defaultValue: pDefaultValue || cDefaultValue,\n    value: cValue,\n    style: [context.style, props.style]\n  }));\n};\n\nvar _default = PinInputFiled;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["PinInputField.tsx"],"names":["PinInputFiled","fieldIndex","defaultValue","props","value","context","React","PinInputContext","cDefaultValue","cValue","keyPressHandler","event","handleChange","textChangeHandler","handleMultiValueChange","myRef","setRefList","pDefaultValue"],"mappings":";;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,0BAAA,CAAA;;AAEA,IAAA,QAAA,GAAA,OAAA,aAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,OAIK;AAAA,6BAHzBC,UAGyB;AAAA,MAHzBA,UAGyB,gCAJJ,CAII;AAAA,MAJJ,aAII,QAFzBC,YAEyB;AAAA,MADtBC,KACsB;;AAAA,8BAQHG,MAAAA,WAAAA,CAAAA,UAAAA,CAAiBC,QAAAA,CAPvC,eAOsBD,CARG;AAAA,MACrB,YADqB,yBACrB,YADqB;AAAA,MACrB,MADqB,yBAGvBF,KAHuB;AAAA,MACrB,UADqB,yBACrB,UADqB;AAAA,MACrB,aADqB,yBAKvBF,YALuB;AAAA,MACrB,sBADqB,yBACrB,sBADqB;AAAA,MAOpBG,OAPoB;;AASzBG,EAAAA,aAAa,GAAGA,aAAa,IAAIA,aAAa,CAA9CA,UAA8C,CAA9CA;AACAC,EAAAA,MAAM,GAAGA,MAAM,IAAIA,MAAM,CAAzBA,UAAyB,CAAzBA;;AAEA,MAAMC,eAAe,GAAIC,SAAnBD,eAAmBC,CAAAA,KAAD,EAAgB;AACtC,QAAIA,KAAK,CAALA,WAAAA,CAAAA,GAAAA,IAAAA,CAAAA,IAA8BA,KAAK,CAALA,WAAAA,CAAAA,GAAAA,IAAlC,CAAA,EAA8D;AAC5DC,MAAAA,YAAY,IAAIA,YAAY,CAACD,KAAK,CAALA,WAAAA,CAAD,GAAA,EAA5BC,UAA4B,CAA5BA;AADF,KAAA,MAEO,IAAID,KAAK,CAALA,WAAAA,CAAAA,GAAAA,KAAJ,WAAA,EAA2C;AAChDC,MAAAA,YAAY,IAAIA,YAAY,CAAA,EAAA,EAA5BA,UAA4B,CAA5BA;AACD;AALH,GAAA;;AAOA,MAAMC,iBAAiB,GAAIT,SAArBS,iBAAqBT,CAAAA,KAAD,EAAgB;AAExCU,IAAAA,sBAAsB,IAAIA,sBAAsB,CAAA,KAAA,EAAhDA,UAAgD,CAAhDA;AAFF,GAAA;;AAIA,MAAMC,KAAK,GAAGT,MAAAA,WAAAA,CAAAA,MAAAA,CAAd,IAAcA,CAAd;;AACAA,EAAAA,MAAAA,WAAAA,CAAAA,SAAAA,CAAgB,YAAM;AACpBU,IAAAA,UAAU,IAAIA,UAAU,CAAA,KAAA,EAAxBA,UAAwB,CAAxBA;AADFV,GAAAA,EAEG,CAAA,KAAA,EAAA,UAAA,EAFHA,UAEG,CAFHA;;AAIA,SACE,MAAA,WAAA,CAAA,aAAA,CAAC,MAAD,WAAA,EAAA,QAAA,CAAA;AACE,IAAA,GAAG,EAAES;AADP,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA;AAIE,IAAA,UAAU,EAAGJ,oBAAAA,KAAD;AAAA,aAAWD,eAAe,CAJxC,KAIwC,CAA1B;AAAA,KAJd;AAKE,IAAA,YAAY,EAAGN,sBAAAA,KAAD;AAAA,aAAWS,iBAAiB,CAL5C,KAK4C,CAA5B;AAAA,KALhB;AAME,IAAA,YAAY,EANd,SAAA;AAOE,IAAA,YAAY,EAAEI,aAAa,IAP7B,aAAA;AAQE,IAAA,KAAK,EARP,MAAA;AASE,IAAA,KAAK,EAAE,CAACZ,OAAO,CAAR,KAAA,EAAgBF,KAAK,CAArB,KAAA;AATT,GAAA,CAAA,CADF;AAhCF,CAAA;;eA+CeH,a","sourcesContent":["import React from 'react';\nimport Input from '../../primitives/Input';\nimport type { IPinInputFieldProps, IPinInputContext } from './props';\nimport { PinInputContext } from './Context';\n\nconst PinInputFiled = ({\n  fieldIndex = 0,\n  defaultValue: pDefaultValue,\n  ...props\n}: IPinInputFieldProps) => {\n  let {\n    handleChange,\n    value: cValue,\n    setRefList,\n    defaultValue: cDefaultValue,\n    handleMultiValueChange,\n    ...context\n  }: IPinInputContext = React.useContext(PinInputContext);\n  cDefaultValue = cDefaultValue && cDefaultValue[fieldIndex];\n  cValue = cValue && cValue[fieldIndex];\n\n  const keyPressHandler = (event: any) => {\n    if (event.nativeEvent.key >= 0 && event.nativeEvent.key <= 9) {\n      handleChange && handleChange(event.nativeEvent.key, fieldIndex);\n    } else if (event.nativeEvent.key === 'Backspace') {\n      handleChange && handleChange('', fieldIndex);\n    }\n  };\n  const textChangeHandler = (value: any) => {\n    // Also used to handle change for Android.\n    handleMultiValueChange && handleMultiValueChange(value, fieldIndex);\n  };\n  const myRef = React.useRef(null);\n  React.useEffect(() => {\n    setRefList && setRefList(myRef, fieldIndex);\n  }, [myRef, fieldIndex, setRefList]);\n\n  return (\n    <Input\n      ref={myRef}\n      {...context}\n      {...props}\n      onKeyPress={(event) => keyPressHandler(event)}\n      onChangeText={(value) => textChangeHandler(value)}\n      keyboardType=\"numeric\"\n      defaultValue={pDefaultValue || cDefaultValue}\n      value={cValue}\n      style={[context.style, props.style]}\n    />\n  );\n};\n\nexport default PinInputFiled;\n"]},"metadata":{},"sourceType":"script"}