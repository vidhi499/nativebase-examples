{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _Transitions = require(\"../Transitions\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Snackbar = function Snackbar(_ref) {\n  var children = _ref.children,\n      _ref$duration = _ref.duration,\n      duration = _ref$duration === void 0 ? 5000 : _ref$duration,\n      accessibilityAnnouncement = _ref.accessibilityAnnouncement,\n      props = _objectWithoutProperties(_ref, [\"children\", \"duration\", \"accessibilityAnnouncement\"]);\n\n  var _react$default$useSta = _react[\"default\"].useState(true),\n      _react$default$useSta2 = _slicedToArray(_react$default$useSta, 2),\n      isOpen = _react$default$useSta2[0],\n      setIsOpen = _react$default$useSta2[1];\n\n  _react[\"default\"].useEffect(function () {\n    isOpen && setTimeout(function () {\n      setIsOpen(false);\n    }, duration);\n  }, [isOpen, duration]);\n\n  _react[\"default\"].useEffect(function () {\n    if (accessibilityAnnouncement && isOpen) {\n      if (_reactNative.Platform.OS !== 'web') {\n        _reactNative.AccessibilityInfo.announceForAccessibility(accessibilityAnnouncement);\n      } else {}\n    }\n  }, [accessibilityAnnouncement, isOpen]);\n\n  return _react[\"default\"].createElement(_Transitions.Slide, _extends({\n    \"in\": isOpen\n  }, props), children);\n};\n\nvar _default = Snackbar;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["Snackbar.tsx"],"names":["Snackbar","duration","props","React","isOpen","setTimeout","setIsOpen","accessibilityAnnouncement","Platform","AccessibilityInfo"],"mappings":";;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,kBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,OAKK;AAAA,MALJ,QAKI,QALJ,QAKI;AAAA,2BAHpBC,QAGoB;AAAA,MAHpBA,QAGoB,8BALJ,IAKI;AAAA,MALJ,yBAKI,QALJ,yBAKI;AAAA,MADjBC,KACiB;;AAAA,8BACQC,MAAAA,WAAAA,CAAAA,QAAAA,CAA5B,IAA4BA,CADR;AAAA;AAAA,MACd,MADc;AAAA,MACd,SADc;;AAEpBA,EAAAA,MAAAA,WAAAA,CAAAA,SAAAA,CAAgB,YAAM;AACpBC,IAAAA,MAAM,IACJC,UAAU,CAAC,YAAM;AACfC,MAAAA,SAAS,CAATA,KAAS,CAATA;AADQ,KAAA,EADZF,QACY,CADZA;AADFD,GAAAA,EAKG,CAAA,MAAA,EALHA,QAKG,CALHA;;AAOAA,EAAAA,MAAAA,WAAAA,CAAAA,SAAAA,CAAgB,YAAM;AACpB,QAAII,yBAAyB,IAA7B,MAAA,EAAyC;AACvC,UAAIC,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KAAJ,KAAA,EAA2B;AACzBC,QAAAA,YAAAA,CAAAA,iBAAAA,CAAAA,wBAAAA,CAAAA,yBAAAA;AADF,OAAA,MAEO,CAEN;AACF;AAPHN,GAAAA,EAQG,CAAA,yBAAA,EAjBiB,MAiBjB,CARHA;;AAUA,SACE,MAAA,WAAA,CAAA,aAAA,CAAC,YAAA,CAAD,KAAA,EAAA,QAAA,CAAA;AAAO,UAAIC;AAAX,GAAA,EAAA,KAAA,CAAA,EADF,QACE,CADF;AAxBF,CAAA;;eA+BeJ,Q","sourcesContent":["import React from 'react';\nimport { Slide } from '../Transitions';\nimport type { ISnackbarProps } from './props';\nimport { AccessibilityInfo, Platform } from 'react-native';\n\nconst Snackbar = ({\n  children,\n  duration = 5000,\n  accessibilityAnnouncement,\n  ...props\n}: ISnackbarProps) => {\n  const [isOpen, setIsOpen] = React.useState(true);\n  React.useEffect(() => {\n    isOpen &&\n      setTimeout(() => {\n        setIsOpen(false);\n      }, duration);\n  }, [isOpen, duration]);\n\n  React.useEffect(() => {\n    if (accessibilityAnnouncement && isOpen) {\n      if (Platform.OS !== 'web') {\n        AccessibilityInfo.announceForAccessibility(accessibilityAnnouncement);\n      } else {\n        // Handle via web live regions\n      }\n    }\n  }, [accessibilityAnnouncement, isOpen]);\n  // const newProps = usePropsConfig('Snackbar', props);\n  return (\n    <Slide in={isOpen} {...props}>\n      {children}\n    </Slide>\n  );\n};\n\nexport default Snackbar;\n"]},"metadata":{},"sourceType":"script"}