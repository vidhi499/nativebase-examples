{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useRadio = useRadio;\n\nfunction useRadio(props, state, _ref) {\n  var value = props.value,\n      isDisabled = props.isDisabled,\n      children = props.children,\n      accessibilityLabel = props.accessibilityLabel;\n  var selectedValue = state.value,\n      onChange = state.onChange,\n      name = state.name;\n  var hasChildren = children != null;\n  var hasAccessibilityLabel = accessibilityLabel != null;\n\n  if (!hasChildren && !hasAccessibilityLabel) {\n    console.warn('If you do not provide children, you must specify an accessibilityLabel for accessibility');\n  }\n\n  var checked = selectedValue === value;\n\n  var onPress = function onPress() {\n    onChange(value);\n  };\n\n  return {\n    inputProps: {\n      onPress: onPress,\n      disabled: isDisabled,\n      checked: checked,\n      name: name,\n      accessibilityLabel: accessibilityLabel,\n      accessibilityRole: 'radio',\n      accessible: true,\n      accessibilityHint: props.accessibilityHint,\n      accessibilityState: {\n        disabled: isDisabled,\n        checked: checked\n      }\n    }\n  };\n}","map":{"version":3,"sources":["useRadio.tsx"],"names":["accessibilityLabel","value","name","hasChildren","children","hasAccessibilityLabel","console","checked","selectedValue","onPress","onChange","inputProps","disabled","accessibilityRole","accessible","accessibilityHint","props","accessibilityState"],"mappings":";;;;;;;AAEO,SAAA,QAAA,CAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAIA;AAAA,MACD,KADC,GACL,KADK,CACD,KADC;AAAA,MACD,UADC,GACL,KADK,CACD,UADC;AAAA,MACD,QADC,GACL,KADK,CACD,QADC;AAAA,MAC8BA,kBAD9B,GACL,KADK,CAC8BA,kBAD9B;AAAA,MAED,aAFC,GAEL,KAFK,CAECC,KAFD;AAAA,MAED,QAFC,GAEL,KAFK,CAED,QAFC;AAAA,MAEiCC,IAFjC,GAEL,KAFK,CAEiCA,IAFjC;AAIL,MAAIC,WAAW,GAAGC,QAAQ,IAA1B,IAAA;AACA,MAAIC,qBAAqB,GAAGL,kBAAkB,IAA9C,IAAA;;AAEA,MAAI,CAAA,WAAA,IAAgB,CAApB,qBAAA,EAA4C;AAC1CM,IAAAA,OAAO,CAAPA,IAAAA,CAAAA,0FAAAA;AAGD;;AAED,MAAIC,OAAO,GAAGC,aAAa,KAA3B,KAAA;;AAEA,MAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBC,IAAAA,QAAQ,CAARA,KAAQ,CAARA;AADF,GAAA;;AAIA,SAAO;AACLC,IAAAA,UAAU,EAAE;AACVF,MAAAA,OADU,EACVA,OADU;AAEVG,MAAAA,QAAQ,EAFE,UAAA;AAGVL,MAAAA,OAHU,EAGVA,OAHU;AAIVL,MAAAA,IAJU,EAIVA,IAJU;AAKVF,MAAAA,kBALU,EAKVA,kBALU;AAMVa,MAAAA,iBAAiB,EANP,OAAA;AAOVC,MAAAA,UAAU,EAPA,IAAA;AAQVC,MAAAA,iBAAiB,EAAEC,KAAK,CARd,iBAAA;AASVC,MAAAA,kBAAkB,EAAE;AAClBL,QAAAA,QAAQ,EADU,UAAA;AAElBL,QAAAA,OAAAA,EAAAA;AAFkB;AATV;AADP,GAAP;AAgBD","sourcesContent":["import type { IRadioContext, IRadioProps } from './props';\n\nexport function useRadio(\n  props: IRadioProps,\n  state: IRadioContext,\n  _ref: any\n): any {\n  let { value, isDisabled, children, accessibilityLabel } = props;\n  let { value: selectedValue, onChange, name } = state;\n\n  let hasChildren = children != null;\n  let hasAccessibilityLabel = accessibilityLabel != null;\n\n  if (!hasChildren && !hasAccessibilityLabel) {\n    console.warn(\n      'If you do not provide children, you must specify an accessibilityLabel for accessibility'\n    );\n  }\n\n  let checked = selectedValue === value;\n\n  const onPress = () => {\n    onChange(value);\n  };\n\n  return {\n    inputProps: {\n      onPress,\n      disabled: isDisabled,\n      checked,\n      name,\n      accessibilityLabel,\n      accessibilityRole: 'radio',\n      accessible: true,\n      accessibilityHint: props.accessibilityHint,\n      accessibilityState: {\n        disabled: isDisabled,\n        checked,\n      },\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}