{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _hooks = require(\"../../../hooks\");\n\nvar _Center = require(\"../../composites/Center\");\n\nvar _FormControl = require(\"../../composites/FormControl\");\n\nvar _Box = _interopRequireDefault(require(\"../Box\"));\n\nvar _Icon = _interopRequireDefault(require(\"../Icon\"));\n\nvar _CheckboxGroup = require(\"./CheckboxGroup\");\n\nvar _useCheckbox = require(\"./useCheckbox\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Checkbox = function Checkbox(_ref, ref) {\n  var icon = _ref.icon,\n      props = _objectWithoutProperties(_ref, [\"icon\"]);\n\n  var formControlContext = _react[\"default\"].useContext(_FormControl.FormControlContext);\n\n  var checkboxGroupContext = _react[\"default\"].useContext(_CheckboxGroup.CheckboxContext);\n\n  var _ref2 = (0, _hooks.usePropsConfig)('Checkbox', _objectSpread({}, checkboxGroupContext, {}, formControlContext, {}, props)),\n      activeColor = _ref2.activeColor,\n      borderColor = _ref2.borderColor,\n      iconColor = _ref2.iconColor,\n      isInvalid = _ref2.isInvalid,\n      size = _ref2.size,\n      newProps = _objectWithoutProperties(_ref2, [\"activeColor\", \"borderColor\", \"iconColor\", \"isInvalid\", \"size\"]);\n\n  var _ref3 = (0, _useCheckbox.useCheckbox)(props, checkboxGroupContext, null),\n      inputProps = _ref3.inputProps;\n\n  var isChecked = inputProps.checked;\n  var isDisabled = inputProps.disabled;\n  var sizedIcon = icon ? function () {\n    return _react[\"default\"].cloneElement(icon, {\n      size: size,\n      color: icon.props.color ? icon.props.color : iconColor\n    }, icon.props.children);\n  } : null;\n  return _react[\"default\"].createElement(_reactNative.TouchableOpacity, _extends({\n    activeOpacity: 1,\n    ref: ref\n  }, inputProps), _react[\"default\"].createElement(_Box[\"default\"], _extends({\n    flexDirection: \"row\",\n    alignItems: \"center\"\n  }, newProps), _react[\"default\"].createElement(_Center.Center, {\n    backgroundColor: isChecked ? isDisabled ? borderColor : activeColor : 'transparent',\n    borderColor: isChecked ? isDisabled || isInvalid ? borderColor : activeColor : borderColor,\n    borderWidth: 2,\n    borderRadius: 5\n  }, icon && sizedIcon && isChecked ? sizedIcon() : _react[\"default\"].createElement(_Icon[\"default\"], {\n    name: \"check-bold\",\n    type: \"MaterialCommunityIcons\",\n    size: size,\n    color: iconColor,\n    opacity: isChecked ? 1 : 0\n  })), props.children));\n};\n\nvar _default = _react[\"default\"].forwardRef(Checkbox);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["Checkbox.tsx"],"names":["Checkbox","props","formControlContext","React","FormControlContext","checkboxGroupContext","CheckboxContext","newProps","inputProps","isChecked","isDisabled","sizedIcon","icon","size","color","iconColor","ref"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport { usePropsConfig } from '../../../hooks';\nimport { Center } from '../../composites/Center';\nimport {\n  FormControlContext,\n  IFormControlContext,\n} from '../../composites/FormControl';\nimport Box from '../Box';\nimport Icon from '../Icon';\nimport { CheckboxContext } from './CheckboxGroup';\nimport type { ICheckboxContext, ICheckboxProps } from './props';\nimport { useCheckbox } from './useCheckbox';\n\nconst Checkbox = ({ icon, ...props }: ICheckboxProps, ref: any) => {\n  const formControlContext: IFormControlContext = React.useContext(\n    FormControlContext\n  );\n\n  const checkboxGroupContext: ICheckboxContext = React.useContext(\n    CheckboxContext\n  );\n  const {\n    activeColor,\n    borderColor,\n    iconColor,\n    isInvalid,\n    size,\n    ...newProps\n  } = usePropsConfig('Checkbox', {\n    ...checkboxGroupContext,\n    ...formControlContext,\n    ...props,\n  });\n\n  const { inputProps } = useCheckbox(props, checkboxGroupContext, null);\n\n  const isChecked = inputProps.checked;\n  const isDisabled = inputProps.disabled;\n\n  const sizedIcon = icon\n    ? () =>\n        React.cloneElement(\n          icon,\n          {\n            size,\n            color: icon.props.color ? icon.props.color : iconColor,\n          },\n          icon.props.children\n        )\n    : null;\n\n  return (\n    <TouchableOpacity activeOpacity={1} ref={ref} {...inputProps}>\n      <Box flexDirection=\"row\" alignItems=\"center\" {...newProps}>\n        <Center\n          backgroundColor={\n            isChecked ? (isDisabled ? borderColor : activeColor) : 'transparent'\n          }\n          borderColor={\n            isChecked\n              ? isDisabled || isInvalid\n                ? borderColor\n                : activeColor\n              : borderColor\n          }\n          borderWidth={2}\n          borderRadius={5}\n        >\n          {icon && sizedIcon && isChecked ? (\n            sizedIcon()\n          ) : (\n            <Icon\n              name=\"check-bold\"\n              type=\"MaterialCommunityIcons\"\n              size={size}\n              color={iconColor}\n              opacity={isChecked ? 1 : 0}\n            />\n          )}\n        </Center>\n        {props.children}\n      </Box>\n    </TouchableOpacity>\n  );\n};\n\nexport default React.forwardRef<TouchableOpacity, ICheckboxProps>(Checkbox);\n"]},"metadata":{},"sourceType":"script"}