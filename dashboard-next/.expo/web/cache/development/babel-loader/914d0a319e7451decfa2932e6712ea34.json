{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MenuItem = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _Menu = require(\"./Menu\");\n\nvar _primitives = require(\"../../primitives\");\n\nvar _hooks = require(\"../../../hooks\");\n\nvar _theme = require(\"../../../theme\");\n\nvar _TouchableItem = require(\"./TouchableItem\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar MenuItem = function MenuItem(_ref) {\n  var children = _ref.children,\n      _onPress = _ref.onPress,\n      style = _ref.style,\n      textStyle = _ref.textStyle,\n      props = _objectWithoutProperties(_ref, [\"children\", \"onPress\", \"style\", \"textStyle\"]);\n\n  var _react$default$useCon = _react[\"default\"].useContext(_Menu.MenuContext),\n      closeMenu = _react$default$useCon.closeMenu,\n      closeOnSelect = _react$default$useCon.closeOnSelect;\n\n  var newProps = (0, _hooks.usePropsConfig)('MenuItem', props);\n\n  var allProps = _objectSpread({}, newProps, {}, newProps.isDisabled ? newProps._disabled : {});\n\n  var _theme$themeTools$ext = _theme.themeTools.extractInObject(allProps, ['color', 'fontWeight', 'fontStyle', 'fontFamily', 'fontSize', 'padding', 'px', 'py', 'textAlign']),\n      _theme$themeTools$ext2 = _slicedToArray(_theme$themeTools$ext, 2),\n      textProps = _theme$themeTools$ext2[0],\n      touchProps = _theme$themeTools$ext2[1];\n\n  return _react[\"default\"].createElement(_TouchableItem.TouchableItem, _extends({}, touchProps, {\n    style: style,\n    onPress: function onPress(e) {\n      if (!props.isDisabled) {\n        _onPress && _onPress(e);\n\n        if (closeOnSelect) {\n          closeMenu();\n        }\n      }\n    }\n  }), _react[\"default\"].createElement(_react[\"default\"].Fragment, null, _react[\"default\"].Children.map(children, function (child, index) {\n    if (typeof child === 'string') {\n      return _react[\"default\"].createElement(_primitives.Text, _extends({}, textProps, {\n        key: \"menu-item-\".concat(index),\n        style: textStyle\n      }), child);\n    } else {\n      return child;\n    }\n  })));\n};\n\nexports.MenuItem = MenuItem;","map":{"version":3,"sources":["MenuItem.tsx"],"names":["MenuItem","props","closeOnSelect","React","MenuContext","newProps","allProps","themeTools","e","onPress","closeMenu","textStyle"],"mappings":";;;;;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,IAAA,KAAA,GAAA,OAAA,UAAA;;AACA,IAAA,WAAA,GAAA,OAAA,oBAAA;;AACA,IAAA,MAAA,GAAA,OAAA,kBAAA;;AACA,IAAA,MAAA,GAAA,OAAA,kBAAA;;AACA,IAAA,cAAA,GAAA,OAAA,mBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAGO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,OAMF;AAAA,MANG,QAMH,QANG,QAMH;AAAA,MANG,QAMH,QANG,OAMH;AAAA,MANG,KAMH,QANG,KAMH;AAAA,MANG,SAMH,QANG,SAMH;AAAA,MADjBC,KACiB;;AAAA,8BACoCE,MAAAA,WAAAA,CAAAA,UAAAA,CACtDC,KAAAA,CADF,WAAwDD,CADpC;AAAA,MACd,SADc,yBACd,SADc;AAAA,MACDD,aADC,yBACDA,aADC;;AAIpB,MAAMG,QAAQ,GAAG,CAAA,GAAA,MAAA,CAAA,cAAA,EAAA,UAAA,EAAjB,KAAiB,CAAjB;;AACA,MAAIC,QAAQ,qBAAG,QAAH,MAEND,QAAQ,CAARA,UAAAA,GAAsBA,QAAQ,CAA9BA,SAAAA,GAAJ,EAFU,CAAZ;;AALoB,8BAUYE,MAAAA,CAAAA,UAAAA,CAAAA,eAAAA,CAAAA,QAAAA,EAAqC,CAAA,OAAA,EAAA,YAAA,EAAA,WAAA,EAAA,YAAA,EAAA,UAAA,EAAA,SAAA,EAAA,IAAA,EAAA,IAAA,EAArE,WAAqE,CAArCA,CAVZ;AAAA;AAAA,MAUd,SAVc;AAAA,MAUd,UAVc;;AAqBpB,SACE,MAAA,WAAA,CAAA,aAAA,CAAC,cAAA,CAAD,aAAA,EAAA,QAAA,CAAA,EAAA,EAAA,UAAA,EAAA;AAEE,IAAA,KAAK,EAFP,KAAA;AAGE,IAAA,OAAO,EAAGC,iBAAAA,CAAD,EAAY;AACnB,UAAI,CAACP,KAAK,CAAV,UAAA,EAAuB;AACrBQ,QAAAA,QAAO,IAAIA,QAAO,CAAlBA,CAAkB,CAAlBA;;AACA,YAAA,aAAA,EAAmB;AACjBC,UAAAA,SAAS;AACV;AACF;AACF;AAVH,GAAA,CAAA,EAYE,MAAA,WAAA,CAAA,aAAA,CAAA,MAAA,WAAA,CAAA,QAAA,EAAA,IAAA,EACG,MAAA,WAAA,CAAA,QAAA,CAAA,GAAA,CAAA,QAAA,EAA6B,UAAA,KAAA,EAAA,KAAA,EAAuB;AACnD,QAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAC7B,aACE,MAAA,WAAA,CAAA,aAAA,CAAC,WAAA,CAAD,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,SAAA,EAAA;AAAqB,QAAA,GAAG,EAAA,aAAA,MAAA,CAAxB,KAAwB,CAAxB;AAAgD,QAAA,KAAK,EAAEC;AAAvD,OAAA,CAAA,EADF,KACE,CADF;AADF,KAAA,MAMO;AACL,aAAA,KAAA;AACD;AAvBT,GAcO,CADH,CAZF,CADF;AA3BK,CAAA","sourcesContent":["import React from 'react';\nimport type { IMenuContextProps } from './props';\nimport { MenuContext } from './Menu';\nimport { Text } from '../../primitives';\nimport { usePropsConfig } from '../../../hooks';\nimport { themeTools } from '../../../theme';\nimport { TouchableItem } from './TouchableItem';\nimport type { IMenuItemProps } from './props';\n\nexport const MenuItem = ({\n  children,\n  onPress,\n  style,\n  textStyle,\n  ...props\n}: IMenuItemProps) => {\n  const { closeMenu, closeOnSelect }: IMenuContextProps = React.useContext(\n    MenuContext\n  );\n  const newProps = usePropsConfig('MenuItem', props);\n  let allProps = {\n    ...newProps,\n    ...(newProps.isDisabled ? newProps._disabled : {}),\n  };\n\n  const [textProps, touchProps] = themeTools.extractInObject(allProps, [\n    'color',\n    'fontWeight',\n    'fontStyle',\n    'fontFamily',\n    'fontSize',\n    'padding',\n    'px',\n    'py',\n    'textAlign',\n  ]);\n  return (\n    <TouchableItem\n      {...touchProps}\n      style={style}\n      onPress={(e: any) => {\n        if (!props.isDisabled) {\n          onPress && onPress(e);\n          if (closeOnSelect) {\n            closeMenu();\n          }\n        }\n      }}\n    >\n      <>\n        {React.Children.map(children, (child, index: any) => {\n          if (typeof child === 'string') {\n            return (\n              <Text {...textProps} key={`menu-item-${index}`} style={textStyle}>\n                {child}\n              </Text>\n            );\n          } else {\n            return child;\n          }\n        })}\n      </>\n    </TouchableItem>\n  );\n};\n"]},"metadata":{},"sourceType":"script"}