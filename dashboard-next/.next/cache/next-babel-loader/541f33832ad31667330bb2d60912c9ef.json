{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});function getRouteRegex(normalizedRoute){var escapedRoute=(normalizedRoute.replace(/\\/$/,'')||'/').replace(/[|\\\\{}()[\\]^$+*?.-]/g,'\\\\$&');var groups={};var groupIndex=1;var parameterizedRoute=escapedRoute.replace(/\\/\\\\\\[([^/]+?)\\\\\\](?=\\/|$)/g,function(_,$1){var isCatchAll=/^(\\\\\\.){3}/.test($1);groups[$1.replace(/\\\\([|\\\\{}()[\\]^$+*?.-])/g,'$1').replace(/^\\.{3}/,'')]={pos:groupIndex++,repeat:isCatchAll};return isCatchAll?'/(.+?)':'/([^/]+?)';});return{re:new RegExp('^'+parameterizedRoute+'(?:/)?$','i'),groups:groups};}exports.getRouteRegex=getRouteRegex;","map":{"version":3,"sources":["/Users/vidhi/Sites/Projects/examples/test/dashboard-next/node_modules/next/dist/next-server/lib/router/utils/route-regex.js"],"names":["Object","defineProperty","exports","value","getRouteRegex","normalizedRoute","escapedRoute","replace","groups","groupIndex","parameterizedRoute","_","$1","isCatchAll","test","pos","repeat","re","RegExp"],"mappings":"AAAA,aACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA+B,YAA/B,CAA6C,CAAEC,KAAK,CAAE,IAAT,CAA7C,EACA,QAASC,CAAAA,aAAT,CAAuBC,eAAvB,CAAwC,CAEpC,GAAMC,CAAAA,YAAY,CAAG,CAACD,eAAe,CAACE,OAAhB,CAAwB,KAAxB,CAA+B,EAA/B,GAAsC,GAAvC,EAA4CA,OAA5C,CAAoD,sBAApD,CAA4E,MAA5E,CAArB,CACA,GAAMC,CAAAA,MAAM,CAAG,EAAf,CACA,GAAIC,CAAAA,UAAU,CAAG,CAAjB,CACA,GAAMC,CAAAA,kBAAkB,CAAGJ,YAAY,CAACC,OAAb,CAAqB,6BAArB,CAAoD,SAACI,CAAD,CAAIC,EAAJ,CAAW,CACtF,GAAMC,CAAAA,UAAU,CAAG,aAAaC,IAAb,CAAkBF,EAAlB,CAAnB,CACAJ,MAAM,CAACI,EAAE,CAEJL,OAFE,CAEM,0BAFN,CAEkC,IAFlC,EAGFA,OAHE,CAGM,QAHN,CAGgB,EAHhB,CAAD,CAAN,CAKI,CAAEQ,GAAG,CAAEN,UAAU,EAAjB,CAAqBO,MAAM,CAAEH,UAA7B,CALJ,CAMA,MAAOA,CAAAA,UAAU,CAAG,QAAH,CAAc,WAA/B,CACH,CAT0B,CAA3B,CAUA,MAAO,CACHI,EAAE,CAAE,GAAIC,CAAAA,MAAJ,CAAW,IAAMR,kBAAN,CAA2B,SAAtC,CAAiD,GAAjD,CADD,CAEHF,MAAM,CAANA,MAFG,CAAP,CAIH,CACDN,OAAO,CAACE,aAAR,CAAwBA,aAAxB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getRouteRegex(normalizedRoute) {\n    // Escape all characters that could be considered RegEx\n    const escapedRoute = (normalizedRoute.replace(/\\/$/, '') || '/').replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&');\n    const groups = {};\n    let groupIndex = 1;\n    const parameterizedRoute = escapedRoute.replace(/\\/\\\\\\[([^/]+?)\\\\\\](?=\\/|$)/g, (_, $1) => {\n        const isCatchAll = /^(\\\\\\.){3}/.test($1);\n        groups[$1\n            // Un-escape key\n            .replace(/\\\\([|\\\\{}()[\\]^$+*?.-])/g, '$1')\n            .replace(/^\\.{3}/, '')\n        // eslint-disable-next-line no-sequences\n        ] = { pos: groupIndex++, repeat: isCatchAll };\n        return isCatchAll ? '/(.+?)' : '/([^/]+?)';\n    });\n    return {\n        re: new RegExp('^' + parameterizedRoute + '(?:/)?$', 'i'),\n        groups,\n    };\n}\nexports.getRouteRegex = getRouteRegex;\n"]},"metadata":{},"sourceType":"script"}