{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useClipboard = useClipboard;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction useClipboard() {\n  var _react$default$useSta = _react[\"default\"].useState(false),\n      _react$default$useSta2 = _slicedToArray(_react$default$useSta, 2),\n      hasCopied = _react$default$useSta2[0],\n      setHasCopied = _react$default$useSta2[1];\n\n  var _react$default$useSta3 = _react[\"default\"].useState(''),\n      _react$default$useSta4 = _slicedToArray(_react$default$useSta3, 2),\n      value = _react$default$useSta4[0],\n      setValue = _react$default$useSta4[1];\n\n  var onCopy = function onCopy(copiedValue) {\n    var textField;\n    return _regeneratorRuntime.async(function onCopy$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof window !== 'undefined')) {\n              _context.next = 9;\n              break;\n            }\n\n            textField = document.createElement('textarea');\n            textField.innerText = copiedValue;\n            document.body.appendChild(textField);\n\n            if (window.navigator.platform === 'iPhone') {\n              textField.setSelectionRange(0, 99999);\n            } else {\n              textField.select();\n            }\n\n            document.execCommand('copy');\n            textField.remove();\n            _context.next = 12;\n            break;\n\n          case 9:\n            if (!(_reactNative.NativeModules && _reactNative.NativeModules.Clipboard)) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(_reactNative.NativeModules.Clipboard.setString(copiedValue));\n\n          case 12:\n            setValue(copiedValue);\n            setHasCopied(true);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return {\n    value: value,\n    onCopy: onCopy,\n    hasCopied: hasCopied\n  };\n}","map":{"version":3,"sources":["useClipboard.ts"],"names":["React","onCopy","textField","document","window","NativeModules","setValue","setHasCopied","value","hasCopied"],"mappings":";;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;;;;;;;AAGO,SAAA,YAAA,GAAwB;AAAA,8BACKA,MAAAA,WAAAA,CAAAA,QAAAA,CAAlC,KAAkCA,CADL;AAAA;AAAA,MACvB,SADuB;AAAA,MACvB,YADuB;;AAAA,+BAEHA,MAAAA,WAAAA,CAAAA,QAAAA,CAA1B,EAA0BA,CAFG;AAAA;AAAA,MAEvB,KAFuB;AAAA,MAEvB,QAFuB;;AAG7B,MAAMC,MAAM,GAAG,SAATA,MAAS,CAAA,WAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACT,OAAA,MAAA,KAAJ,WADa;AAAA;AAAA;AAAA;;AAELC,YAAAA,SAFK,GAEOC,QAAQ,CAARA,aAAAA,CAAlB,UAAkBA,CAFP;AAGXD,YAAAA,SAAS,CAATA,SAAAA,GAAAA,WAAAA;AACAC,YAAAA,QAAQ,CAARA,IAAAA,CAAAA,WAAAA,CAAAA,SAAAA;;AACA,gBAAIC,MAAM,CAANA,SAAAA,CAAAA,QAAAA,KAAJ,QAAA,EAA4C;AAC1CF,cAAAA,SAAS,CAATA,iBAAAA,CAAAA,CAAAA,EAAAA,KAAAA;AADF,aAAA,MAEO;AACLA,cAAAA,SAAS,CAATA,MAAAA;AACD;;AACDC,YAAAA,QAAQ,CAARA,WAAAA,CAAAA,MAAAA;AACAD,YAAAA,SAAS,CAATA,MAAAA;AAXW;AAAA;;AAAA;AAAA,kBAYFG,YAAAA,CAAAA,aAAAA,IAAiBA,YAAAA,CAAAA,aAAAA,CAArB,SAZM;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAaLA,YAAAA,CAAAA,aAAAA,CAAAA,SAAAA,CAAAA,SAAAA,CAAN,WAAMA,CAbK;;AAAA;AAebC,YAAAA,QAAQ,CAARA,WAAQ,CAARA;AACAC,YAAAA,YAAY,CAAZA,IAAY,CAAZA;;AAhBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAkBA,SAAO;AACLC,IAAAA,KADK,EACLA,KADK;AAELP,IAAAA,MAFK,EAELA,MAFK;AAGLQ,IAAAA,SAAAA,EAAAA;AAHK,GAAP;AAKD","sourcesContent":["import React from 'react';\nimport { NativeModules } from 'react-native';\n\nexport function useClipboard() {\n  const [hasCopied, setHasCopied] = React.useState(false);\n  const [value, setValue] = React.useState<string>('');\n  const onCopy = async (copiedValue: string) => {\n    if (typeof window !== 'undefined') {\n      const textField = document.createElement('textarea');\n      textField.innerText = copiedValue;\n      document.body.appendChild(textField);\n      if (window.navigator.platform === 'iPhone') {\n        textField.setSelectionRange(0, 99999);\n      } else {\n        textField.select();\n      }\n      document.execCommand('copy');\n      textField.remove();\n    } else if (NativeModules && NativeModules.Clipboard) {\n      await NativeModules.Clipboard.setString(copiedValue);\n    }\n    setValue(copiedValue);\n    setHasCopied(true);\n  };\n  return {\n    value,\n    onCopy,\n    hasCopied,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}