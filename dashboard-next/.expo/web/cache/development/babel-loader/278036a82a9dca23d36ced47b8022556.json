{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useDisclose = useDisclose;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction useDisclose(initState) {\n  var _react$default$useSta = _react[\"default\"].useState(initState || false),\n      _react$default$useSta2 = _slicedToArray(_react$default$useSta, 2),\n      isOpen = _react$default$useSta2[0],\n      setIsOpen = _react$default$useSta2[1];\n\n  var onOpen = function onOpen() {\n    setIsOpen(true);\n  };\n\n  var onClose = function onClose() {\n    setIsOpen(false);\n  };\n\n  var onToggle = function onToggle() {\n    setIsOpen(!isOpen);\n  };\n\n  return {\n    isOpen: isOpen,\n    onOpen: onOpen,\n    onClose: onClose,\n    onToggle: onToggle\n  };\n}","map":{"version":3,"sources":["useDisclose.ts"],"names":["React","initState","onOpen","setIsOpen","onClose","onToggle","isOpen"],"mappings":";;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;;;;;AAEO,SAAA,WAAA,CAAA,SAAA,EAA0C;AAAA,8BACnBA,MAAAA,WAAAA,CAAAA,QAAAA,CAAeC,SAAS,IAApD,KAA4BD,CADmB;AAAA;AAAA,MACzC,MADyC;AAAA,MACzC,SADyC;;AAE/C,MAAME,MAAM,GAAG,SAATA,MAAS,GAAM;AACnBC,IAAAA,SAAS,CAATA,IAAS,CAATA;AADF,GAAA;;AAGA,MAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBD,IAAAA,SAAS,CAATA,KAAS,CAATA;AADF,GAAA;;AAGA,MAAME,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBF,IAAAA,SAAS,CAAC,CAAVA,MAAS,CAATA;AADF,GAAA;;AAGA,SAAO;AACLG,IAAAA,MADK,EACLA,MADK;AAELJ,IAAAA,MAFK,EAELA,MAFK;AAGLE,IAAAA,OAHK,EAGLA,OAHK;AAILC,IAAAA,QAAAA,EAAAA;AAJK,GAAP;AAMD","sourcesContent":["import React from 'react';\n\nexport function useDisclose(initState?: boolean) {\n  const [isOpen, setIsOpen] = React.useState(initState || false);\n  const onOpen = () => {\n    setIsOpen(true);\n  };\n  const onClose = () => {\n    setIsOpen(false);\n  };\n  const onToggle = () => {\n    setIsOpen(!isOpen);\n  };\n  return {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}