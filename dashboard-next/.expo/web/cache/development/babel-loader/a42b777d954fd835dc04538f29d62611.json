{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useCheckbox = useCheckbox;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _hooks = require(\"../../../hooks\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction useCheckbox(props, state, _ref) {\n  var isCheckedProp = props.isChecked,\n      value = props.value,\n      defaultIsChecked = props.defaultIsChecked,\n      onChangeProp = props.onChange,\n      isIndeterminate = props.isIndeterminate,\n      isDisabled = props.isDisabled,\n      children = props.children,\n      accessibilityLabel = props.accessibilityLabel,\n      accessibilityHint = props.accessibilityHint;\n  var checkboxGroupValue = state.value,\n      onChange = state.onChange;\n  var hasChildren = children != null;\n  var hasAccessibilityLabel = accessibilityLabel != null;\n\n  if (!hasChildren && !hasAccessibilityLabel) {\n    console.warn('If you do not provide children, you must specify an accessibilityLabel for accessibility');\n  }\n\n  var isControlledByGroup = checkboxGroupValue !== undefined;\n  var isControlledByProp = isCheckedProp !== undefined;\n  var derivedIsChecked;\n\n  if (isControlledByGroup) {\n    derivedIsChecked = checkboxGroupValue.includes(value);\n  }\n\n  if (isControlledByProp) {\n    derivedIsChecked = isCheckedProp;\n  }\n\n  var _react$default$useSta = _react[\"default\"].useState(defaultIsChecked || false),\n      _react$default$useSta2 = _slicedToArray(_react$default$useSta, 2),\n      checkedState = _react$default$useSta2[0],\n      setCheckedState = _react$default$useSta2[1];\n\n  var _ref2 = (0, _hooks.useControllableProp)(derivedIsChecked, checkedState),\n      _ref3 = _slicedToArray(_ref2, 2),\n      isControlled = _ref3[0],\n      isChecked = _ref3[1];\n\n  var pressHandler = function pressHandler() {\n    var nextIsChecked = !isChecked;\n\n    if (!isControlled) {\n      setCheckedState(nextIsChecked);\n    }\n\n    if (!isIndeterminate) {\n      onChange && onChange(value, nextIsChecked);\n      onChangeProp && onChangeProp(value, nextIsChecked);\n    }\n  };\n\n  return {\n    inputProps: {\n      checked: isChecked,\n      onPress: pressHandler,\n      disabled: isDisabled,\n      accessibilityLabel: accessibilityLabel,\n      accessibilityRole: 'checkbox',\n      accessible: true,\n      accessibilityHint: accessibilityHint,\n      accessibilityState: {\n        disabled: isDisabled,\n        checked: isChecked\n      }\n    }\n  };\n}","map":{"version":3,"sources":["useCheckbox.tsx"],"names":["isChecked","onChange","accessibilityHint","value","hasChildren","children","hasAccessibilityLabel","accessibilityLabel","console","isControlledByGroup","checkboxGroupValue","isControlledByProp","isCheckedProp","derivedIsChecked","React","defaultIsChecked","pressHandler","nextIsChecked","setCheckedState","onChangeProp","inputProps","checked","onPress","disabled","accessibilityRole","accessible","accessibilityState"],"mappings":";;;;;;;;;AAKA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,kBAAA;;;;;;;;AAEO,SAAA,WAAA,CAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAImB;AAAA,MACpB,aADoB,GACxB,KADwB,CAEtBA,SAFsB;AAAA,MACpB,KADoB,GACxB,KADwB,CACpB,KADoB;AAAA,MACpB,gBADoB,GACxB,KADwB,CACpB,gBADoB;AAAA,MACpB,YADoB,GACxB,KADwB,CAKtBC,QALsB;AAAA,MACpB,eADoB,GACxB,KADwB,CACpB,eADoB;AAAA,MACpB,UADoB,GACxB,KADwB,CACpB,UADoB;AAAA,MACpB,QADoB,GACxB,KADwB,CACpB,QADoB;AAAA,MACpB,kBADoB,GACxB,KADwB,CACpB,kBADoB;AAAA,MAUtBC,iBAVsB,GACxB,KADwB,CAUtBA,iBAVsB;AAAA,MAapB,kBAboB,GAaxB,KAbwB,CAalBC,KAbkB;AAAA,MAaSF,QAbT,GAaxB,KAbwB,CAaSA,QAbT;AAexB,MAAIG,WAAW,GAAGC,QAAQ,IAA1B,IAAA;AACA,MAAIC,qBAAqB,GAAGC,kBAAkB,IAA9C,IAAA;;AAEA,MAAI,CAAA,WAAA,IAAgB,CAApB,qBAAA,EAA4C;AAC1CC,IAAAA,OAAO,CAAPA,IAAAA,CAAAA,0FAAAA;AAGD;;AAED,MAAMC,mBAAmB,GAAGC,kBAAkB,KAA9C,SAAA;AACA,MAAMC,kBAAkB,GAAGC,aAAa,KAAxC,SAAA;AAEA,MAAA,gBAAA;;AAEA,MAAA,mBAAA,EAAyB;AAEvBC,IAAAA,gBAAgB,GAAGH,kBAAkB,CAAlBA,QAAAA,CAAnBG,KAAmBH,CAAnBG;AACD;;AAED,MAAA,kBAAA,EAAwB;AACtBA,IAAAA,gBAAgB,GAAhBA,aAAAA;AACD;;AApCuB,8BAsCgBC,MAAAA,WAAAA,CAAAA,QAAAA,CACtCC,gBAAgB,IADlB,KAAwCD,CAtChB;AAAA;AAAA,MAsClB,YAtCkB;AAAA,MAsClB,eAtCkB;;AAAA,cA0CU,CAAA,GAAA,MAAA,CAAA,mBAAA,EAAA,gBAAA,EAAlC,YAAkC,CA1CV;AAAA;AAAA,MA0ClB,YA1CkB;AAAA,MA0ClB,SA1CkB;;AA+CxB,MAAME,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,QAAIC,aAAa,GAAG,CAApB,SAAA;;AACA,QAAI,CAAJ,YAAA,EAAmB;AACjBC,MAAAA,eAAe,CAAfA,aAAe,CAAfA;AACD;;AAED,QAAI,CAAJ,eAAA,EAAsB;AACpBjB,MAAAA,QAAQ,IAAIA,QAAQ,CAAA,KAAA,EAApBA,aAAoB,CAApBA;AACAkB,MAAAA,YAAY,IAAIA,YAAY,CAAA,KAAA,EAA5BA,aAA4B,CAA5BA;AACD;AATH,GAAA;;AAYA,SAAO;AACLC,IAAAA,UAAU,EAAE;AACVC,MAAAA,OAAO,EADG,SAAA;AAEVC,MAAAA,OAAO,EAFG,YAAA;AAGVC,MAAAA,QAAQ,EAHE,UAAA;AAIVhB,MAAAA,kBAJU,EAIVA,kBAJU;AAKViB,MAAAA,iBAAiB,EALP,UAAA;AAMVC,MAAAA,UAAU,EANA,IAAA;AAOVvB,MAAAA,iBAPU,EAOVA,iBAPU;AAQVwB,MAAAA,kBAAkB,EAAE;AAClBH,QAAAA,QAAQ,EADU,UAAA;AAElBF,QAAAA,OAAO,EAAErB;AAFS;AARV;AADP,GAAP;AAeD","sourcesContent":["import type {\n  ICheckboxProps,\n  ICheckboxContext,\n  IUseCheckboxReturnType,\n} from './props';\nimport React from 'react';\nimport { useControllableProp } from '../../../hooks';\n\nexport function useCheckbox(\n  props: ICheckboxProps,\n  state: ICheckboxContext,\n  _ref?: any\n): IUseCheckboxReturnType {\n  let {\n    isChecked: isCheckedProp,\n    value,\n    defaultIsChecked,\n    onChange: onChangeProp,\n    isIndeterminate,\n    isDisabled,\n    children,\n    accessibilityLabel,\n    accessibilityHint,\n  } = props;\n\n  let { value: checkboxGroupValue, onChange } = state;\n\n  let hasChildren = children != null;\n  let hasAccessibilityLabel = accessibilityLabel != null;\n\n  if (!hasChildren && !hasAccessibilityLabel) {\n    console.warn(\n      'If you do not provide children, you must specify an accessibilityLabel for accessibility'\n    );\n  }\n\n  const isControlledByGroup = checkboxGroupValue !== undefined;\n  const isControlledByProp = isCheckedProp !== undefined;\n\n  let derivedIsChecked;\n\n  if (isControlledByGroup) {\n    // @ts-ignore - Already checking for undefined in isControlledByGroup\n    derivedIsChecked = checkboxGroupValue.includes(value);\n  }\n\n  if (isControlledByProp) {\n    derivedIsChecked = isCheckedProp;\n  }\n\n  const [checkedState, setCheckedState] = React.useState(\n    defaultIsChecked || false\n  );\n\n  const [isControlled, isChecked] = useControllableProp(\n    derivedIsChecked,\n    checkedState\n  );\n\n  const pressHandler = () => {\n    let nextIsChecked = !isChecked;\n    if (!isControlled) {\n      setCheckedState(nextIsChecked);\n    }\n\n    if (!isIndeterminate) {\n      onChange && onChange(value, nextIsChecked);\n      onChangeProp && onChangeProp(value, nextIsChecked);\n    }\n  };\n\n  return {\n    inputProps: {\n      checked: isChecked,\n      onPress: pressHandler,\n      disabled: isDisabled,\n      accessibilityLabel,\n      accessibilityRole: 'checkbox',\n      accessible: true,\n      accessibilityHint,\n      accessibilityState: {\n        disabled: isDisabled,\n        checked: isChecked,\n      },\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}