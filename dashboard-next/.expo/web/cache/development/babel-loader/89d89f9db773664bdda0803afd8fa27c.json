{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/vidhi/Sites/Projects/examples/test/dashboard-next/node_modules/react-native-gesture-handler/Swipeable.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler, TapGestureHandler, State } from \"./GestureHandler\";\nvar DRAG_TOSS = 0.05;\n\nvar Swipeable = function (_Component) {\n  _inherits(Swipeable, _Component);\n\n  var _super = _createSuper(Swipeable);\n\n  function Swipeable(_props) {\n    var _this;\n\n    _classCallCheck(this, Swipeable);\n\n    _this = _super.call(this, _props);\n\n    _defineProperty(_assertThisInitialized(_this), \"_onGestureEvent\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_transX\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_showLeftAction\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_leftActionTranslate\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_showRightAction\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_rightActionTranslate\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_updateAnimatedEvent\", function (props, state) {\n      var friction = props.friction,\n          overshootFriction = props.overshootFriction,\n          useNativeAnimations = props.useNativeAnimations;\n      var dragX = state.dragX,\n          rowTranslation = state.rowTranslation,\n          _state$leftWidth = state.leftWidth,\n          leftWidth = _state$leftWidth === void 0 ? 0 : _state$leftWidth,\n          _state$rowWidth = state.rowWidth,\n          rowWidth = _state$rowWidth === void 0 ? 0 : _state$rowWidth;\n      var _state$rightOffset = state.rightOffset,\n          rightOffset = _state$rightOffset === void 0 ? rowWidth : _state$rightOffset;\n      var rightWidth = Math.max(0, rowWidth - rightOffset);\n      var _props$overshootLeft = props.overshootLeft,\n          overshootLeft = _props$overshootLeft === void 0 ? leftWidth > 0 : _props$overshootLeft,\n          _props$overshootRight = props.overshootRight,\n          overshootRight = _props$overshootRight === void 0 ? rightWidth > 0 : _props$overshootRight;\n      var transX = Animated.add(rowTranslation, dragX.interpolate({\n        inputRange: [0, friction],\n        outputRange: [0, 1]\n      })).interpolate({\n        inputRange: [-rightWidth - (overshootRight ? 1 : overshootFriction), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 : overshootFriction)],\n        outputRange: [-rightWidth - (overshootRight || overshootFriction > 1 ? 1 : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft || overshootFriction > 1 ? 1 : 0)]\n      });\n      _this._transX = transX;\n      _this._showLeftAction = leftWidth > 0 ? transX.interpolate({\n        inputRange: [-1, 0, leftWidth],\n        outputRange: [0, 0, 1]\n      }) : new Animated.Value(0);\n      _this._leftActionTranslate = _this._showLeftAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n      _this._showRightAction = rightWidth > 0 ? transX.interpolate({\n        inputRange: [-rightWidth, 0, 1],\n        outputRange: [1, 0, 0]\n      }) : new Animated.Value(0);\n      _this._rightActionTranslate = _this._showRightAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onTapHandlerStateChange\", function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this.close();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onHandlerStateChange\", function (_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this._handleRelease(nativeEvent);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleRelease\", function (nativeEvent) {\n      var velocityX = nativeEvent.velocityX,\n          dragX = nativeEvent.translationX;\n      var _this$state = _this.state,\n          _this$state$leftWidth = _this$state.leftWidth,\n          leftWidth = _this$state$leftWidth === void 0 ? 0 : _this$state$leftWidth,\n          _this$state$rowWidth = _this$state.rowWidth,\n          rowWidth = _this$state$rowWidth === void 0 ? 0 : _this$state$rowWidth,\n          rowState = _this$state.rowState;\n      var _this$state$rightOffs = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs === void 0 ? rowWidth : _this$state$rightOffs;\n      var rightWidth = rowWidth - rightOffset;\n      var _this$props = _this.props,\n          friction = _this$props.friction,\n          _this$props$leftThres = _this$props.leftThreshold,\n          leftThreshold = _this$props$leftThres === void 0 ? leftWidth / 2 : _this$props$leftThres,\n          _this$props$rightThre = _this$props.rightThreshold,\n          rightThreshold = _this$props$rightThre === void 0 ? rightWidth / 2 : _this$props$rightThre;\n      var startOffsetX = _this._currentOffset() + dragX / friction;\n      var translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n      var toValue = 0;\n\n      if (rowState === 0) {\n        if (translationX > leftThreshold) {\n          toValue = leftWidth;\n        } else if (translationX < -rightThreshold) {\n          toValue = -rightWidth;\n        }\n      } else if (rowState === 1) {\n        if (translationX > -leftThreshold) {\n          toValue = leftWidth;\n        }\n      } else {\n        if (translationX < rightThreshold) {\n          toValue = -rightWidth;\n        }\n      }\n\n      _this._animateRow(startOffsetX, toValue, velocityX / friction);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_animateRow\", function (fromValue, toValue, velocityX) {\n      var _this$state2 = _this.state,\n          dragX = _this$state2.dragX,\n          rowTranslation = _this$state2.rowTranslation;\n      dragX.setValue(0);\n      rowTranslation.setValue(fromValue);\n\n      _this.setState({\n        rowState: Math.sign(toValue)\n      });\n\n      Animated.spring(rowTranslation, _objectSpread({\n        restSpeedThreshold: 1.7,\n        restDisplacementThreshold: 0.4,\n        velocity: velocityX,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations\n      }, _this.props.animationOptions)).start(function (_ref3) {\n        var finished = _ref3.finished;\n\n        if (finished) {\n          if (toValue > 0 && _this.props.onSwipeableLeftOpen) {\n            _this.props.onSwipeableLeftOpen();\n          } else if (toValue < 0 && _this.props.onSwipeableRightOpen) {\n            _this.props.onSwipeableRightOpen();\n          }\n\n          if (toValue === 0) {\n            _this.props.onSwipeableClose && _this.props.onSwipeableClose();\n          } else {\n            _this.props.onSwipeableOpen && _this.props.onSwipeableOpen();\n          }\n        }\n      });\n\n      if (toValue > 0 && _this.props.onSwipeableLeftWillOpen) {\n        _this.props.onSwipeableLeftWillOpen();\n      } else if (toValue < 0 && _this.props.onSwipeableRightWillOpen) {\n        _this.props.onSwipeableRightWillOpen();\n      }\n\n      if (toValue === 0) {\n        _this.props.onSwipeableWillClose && _this.props.onSwipeableWillClose();\n      } else {\n        _this.props.onSwipeableWillOpen && _this.props.onSwipeableWillOpen();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onRowLayout\", function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n\n      _this.setState({\n        rowWidth: nativeEvent.layout.width\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_currentOffset\", function () {\n      var _this$state3 = _this.state,\n          _this$state3$leftWidt = _this$state3.leftWidth,\n          leftWidth = _this$state3$leftWidt === void 0 ? 0 : _this$state3$leftWidt,\n          _this$state3$rowWidth = _this$state3.rowWidth,\n          rowWidth = _this$state3$rowWidth === void 0 ? 0 : _this$state3$rowWidth,\n          rowState = _this$state3.rowState;\n      var _this$state$rightOffs2 = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs2 === void 0 ? rowWidth : _this$state$rightOffs2;\n      var rightWidth = rowWidth - rightOffset;\n\n      if (rowState === 1) {\n        return leftWidth;\n      } else if (rowState === -1) {\n        return -rightWidth;\n      }\n\n      return 0;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"close\", function () {\n      _this._animateRow(_this._currentOffset(), 0);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"openLeft\", function () {\n      var _this$state$leftWidth2 = _this.state.leftWidth,\n          leftWidth = _this$state$leftWidth2 === void 0 ? 0 : _this$state$leftWidth2;\n\n      _this._animateRow(_this._currentOffset(), leftWidth);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"openRight\", function () {\n      var _this$state$rowWidth2 = _this.state.rowWidth,\n          rowWidth = _this$state$rowWidth2 === void 0 ? 0 : _this$state$rowWidth2;\n      var _this$state$rightOffs3 = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs3 === void 0 ? rowWidth : _this$state$rightOffs3;\n      var rightWidth = rowWidth - rightOffset;\n\n      _this._animateRow(_this._currentOffset(), -rightWidth);\n    });\n\n    var _dragX = new Animated.Value(0);\n\n    _this.state = {\n      dragX: _dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined\n    };\n\n    _this._updateAnimatedEvent(_props, _this.state);\n\n    _this._onGestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: _dragX\n      }\n    }], {\n      useNativeDriver: _props.useNativeAnimations\n    });\n    return _this;\n  }\n\n  _createClass(Swipeable, [{\n    key: \"UNSAFE_componentWillUpdate\",\n    value: function UNSAFE_componentWillUpdate(props, state) {\n      if (this.props.friction !== props.friction || this.props.overshootLeft !== props.overshootLeft || this.props.overshootRight !== props.overshootRight || this.props.overshootFriction !== props.overshootFriction || this.state.leftWidth !== state.leftWidth || this.state.rightOffset !== state.rightOffset || this.state.rowWidth !== state.rowWidth) {\n        this._updateAnimatedEvent(props, state);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this,\n          _jsx,\n          _jsx2,\n          _jsx3,\n          _jsx4,\n          _jsx5,\n          _jsx6,\n          _jsx7,\n          _extends2;\n\n      var rowState = this.state.rowState;\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          renderLeftActions = _this$props2.renderLeftActions,\n          renderRightActions = _this$props2.renderRightActions;\n\n      var left = renderLeftActions && __jsx(Animated.View, (_jsx2 = {\n        style: [styles.leftActions, {\n          transform: [{\n            translateX: this._leftActionTranslate\n          }]\n        }],\n        __self: this\n      }, _defineProperty(_jsx2, \"__self\", this), _defineProperty(_jsx2, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 7\n      }), _jsx2), renderLeftActions(this._showLeftAction, this._transX), __jsx(View, (_jsx = {\n        onLayout: function onLayout(_ref5) {\n          var nativeEvent = _ref5.nativeEvent;\n          return _this2.setState({\n            leftWidth: nativeEvent.layout.x\n          });\n        },\n        __self: this\n      }, _defineProperty(_jsx, \"__self\", this), _defineProperty(_jsx, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }), _jsx)));\n\n      var right = renderRightActions && __jsx(Animated.View, (_jsx4 = {\n        style: [styles.rightActions, {\n          transform: [{\n            translateX: this._rightActionTranslate\n          }]\n        }],\n        __self: this\n      }, _defineProperty(_jsx4, \"__self\", this), _defineProperty(_jsx4, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 7\n      }), _jsx4), renderRightActions(this._showRightAction, this._transX), __jsx(View, (_jsx3 = {\n        onLayout: function onLayout(_ref6) {\n          var nativeEvent = _ref6.nativeEvent;\n          return _this2.setState({\n            rightOffset: nativeEvent.layout.x\n          });\n        },\n        __self: this\n      }, _defineProperty(_jsx3, \"__self\", this), _defineProperty(_jsx3, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }), _jsx3)));\n\n      return __jsx(PanGestureHandler, _extends({\n        activeOffsetX: [-10, 10]\n      }, this.props, (_extends2 = {\n        onGestureEvent: this._onGestureEvent,\n        onHandlerStateChange: this._onHandlerStateChange,\n        __self: this\n      }, _defineProperty(_extends2, \"__self\", this), _defineProperty(_extends2, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 7\n      }), _extends2)), __jsx(Animated.View, (_jsx7 = {\n        onLayout: this._onRowLayout,\n        style: [styles.container, this.props.containerStyle],\n        __self: this\n      }, _defineProperty(_jsx7, \"__self\", this), _defineProperty(_jsx7, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }), _jsx7), left, right, __jsx(TapGestureHandler, (_jsx6 = {\n        enabled: rowState !== 0,\n        onHandlerStateChange: this._onTapHandlerStateChange,\n        __self: this\n      }, _defineProperty(_jsx6, \"__self\", this), _defineProperty(_jsx6, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }), _jsx6), __jsx(Animated.View, (_jsx5 = {\n        pointerEvents: rowState === 0 ? 'auto' : 'box-only',\n        style: [{\n          transform: [{\n            translateX: this._transX\n          }]\n        }, this.props.childrenContainerStyle],\n        __self: this\n      }, _defineProperty(_jsx5, \"__self\", this), _defineProperty(_jsx5, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 13\n      }), _jsx5), children))));\n    }\n  }]);\n\n  return Swipeable;\n}(Component);\n\n_defineProperty(Swipeable, \"defaultProps\", {\n  friction: 1,\n  overshootFriction: 1,\n  useNativeAnimations: true\n});\n\nexport { Swipeable as default };\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  leftActions: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row'\n  }),\n  rightActions: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse'\n  })\n});","map":{"version":3,"sources":["/Users/vidhi/Sites/Projects/examples/test/dashboard-next/node_modules/react-native-gesture-handler/Swipeable.js"],"names":["React","Component","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","Swipeable","props","state","friction","overshootFriction","useNativeAnimations","dragX","rowTranslation","leftWidth","rowWidth","rightOffset","rightWidth","Math","max","overshootLeft","overshootRight","transX","Animated","add","interpolate","inputRange","outputRange","_transX","_showLeftAction","Value","_leftActionTranslate","Number","MIN_VALUE","extrapolate","_showRightAction","_rightActionTranslate","nativeEvent","oldState","ACTIVE","close","_handleRelease","velocityX","translationX","rowState","leftThreshold","rightThreshold","startOffsetX","_currentOffset","toValue","_animateRow","fromValue","setValue","setState","sign","spring","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","useNativeDriver","animationOptions","start","finished","onSwipeableLeftOpen","onSwipeableRightOpen","onSwipeableClose","onSwipeableOpen","onSwipeableLeftWillOpen","onSwipeableRightWillOpen","onSwipeableWillClose","onSwipeableWillOpen","layout","width","undefined","_updateAnimatedEvent","_onGestureEvent","event","children","renderLeftActions","renderRightActions","left","styles","leftActions","transform","translateX","x","right","rightActions","_onHandlerStateChange","_onRowLayout","container","containerStyle","_onTapHandlerStateChange","childrenContainerStyle","StyleSheet","create","overflow","absoluteFillObject","flexDirection","I18nManager","isRTL"],"mappings":"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","sourcesContent":["// @flow\n\n// Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us\n// to move faster and fix possible issues quicker\n\nimport React, { Component } from 'react';\nimport { Animated, StyleSheet, View, I18nManager } from 'react-native';\n\nimport { PanGestureHandler, TapGestureHandler, State } from './GestureHandler';\n\nconst DRAG_TOSS = 0.05;\n\nexport type PropType = {\n  children: any,\n  friction: number,\n  leftThreshold?: number,\n  rightThreshold?: number,\n  overshootLeft?: boolean,\n  overshootRight?: boolean,\n  overshootFriction: number,\n  onSwipeableLeftOpen?: Function,\n  onSwipeableRightOpen?: Function,\n  onSwipeableOpen?: Function,\n  onSwipeableClose?: Function,\n  onSwipeableLeftWillOpen?: Function,\n  onSwipeableRightWillOpen?: Function,\n  onSwipeableWillOpen?: Function,\n  onSwipeableWillClose?: Function,\n  renderLeftActions?: (\n    progressAnimatedValue: any,\n    dragAnimatedValue: any\n  ) => any,\n  renderRightActions?: (\n    progressAnimatedValue: any,\n    dragAnimatedValue: any\n  ) => any,\n  useNativeAnimations: boolean,\n  animationOptions?: Object,\n  containerStyle?: Object,\n  childrenContainerStyle?: Object,\n};\ntype StateType = {\n  dragX: Animated.Value,\n  rowTranslation: Animated.Value,\n  rowState: number,\n  leftWidth: number | typeof undefined,\n  rightOffset: number | typeof undefined,\n  rowWidth: number | typeof undefined,\n};\n\nexport default class Swipeable extends Component<PropType, StateType> {\n  static defaultProps = {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: true,\n  };\n  _onGestureEvent: ?Animated.Event;\n  _transX: ?Animated.Interpolation;\n  _showLeftAction: ?Animated.Interpolation | ?Animated.Value;\n  _leftActionTranslate: ?Animated.Interpolation;\n  _showRightAction: ?Animated.Interpolation | ?Animated.Value;\n  _rightActionTranslate: ?Animated.Interpolation;\n\n  constructor(props: PropType) {\n    super(props);\n    const dragX = new Animated.Value(0);\n    this.state = {\n      dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined,\n    };\n    this._updateAnimatedEvent(props, this.state);\n\n    this._onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragX } }],\n      { useNativeDriver: props.useNativeAnimations }\n    );\n  }\n\n  UNSAFE_componentWillUpdate(props: PropType, state: StateType) {\n    if (\n      this.props.friction !== props.friction ||\n      this.props.overshootLeft !== props.overshootLeft ||\n      this.props.overshootRight !== props.overshootRight ||\n      this.props.overshootFriction !== props.overshootFriction ||\n      this.state.leftWidth !== state.leftWidth ||\n      this.state.rightOffset !== state.rightOffset ||\n      this.state.rowWidth !== state.rowWidth\n    ) {\n      this._updateAnimatedEvent(props, state);\n    }\n  }\n\n  _updateAnimatedEvent = (props: PropType, state: StateType) => {\n    const { friction, overshootFriction, useNativeAnimations } = props;\n    const { dragX, rowTranslation, leftWidth = 0, rowWidth = 0 } = state;\n    const { rightOffset = rowWidth } = state;\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\n\n    const {\n      overshootLeft = leftWidth > 0,\n      overshootRight = rightWidth > 0,\n    } = props;\n\n    const transX = Animated.add(\n      rowTranslation,\n      dragX.interpolate({\n        inputRange: [0, friction],\n        outputRange: [0, 1],\n      })\n    ).interpolate({\n      inputRange: [\n        -rightWidth - (overshootRight ? 1 : overshootFriction),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft ? 1 : overshootFriction),\n      ],\n      outputRange: [\n        -rightWidth - (overshootRight || overshootFriction > 1 ? 1 : 0),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft || overshootFriction > 1 ? 1 : 0),\n      ],\n    });\n    this._transX = transX;\n    this._showLeftAction =\n      leftWidth > 0\n        ? transX.interpolate({\n            inputRange: [-1, 0, leftWidth],\n            outputRange: [0, 0, 1],\n          })\n        : new Animated.Value(0);\n    this._leftActionTranslate = this._showLeftAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n    this._showRightAction =\n      rightWidth > 0\n        ? transX.interpolate({\n            inputRange: [-rightWidth, 0, 1],\n            outputRange: [1, 0, 0],\n          })\n        : new Animated.Value(0);\n    this._rightActionTranslate = this._showRightAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n  };\n\n  _onTapHandlerStateChange = ({ nativeEvent }) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.close();\n    }\n  };\n\n  _onHandlerStateChange = ({ nativeEvent }) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this._handleRelease(nativeEvent);\n    }\n  };\n\n  _handleRelease = nativeEvent => {\n    const { velocityX, translationX: dragX } = nativeEvent;\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    const {\n      friction,\n      leftThreshold = leftWidth / 2,\n      rightThreshold = rightWidth / 2,\n    } = this.props;\n\n    const startOffsetX = this._currentOffset() + dragX / friction;\n    const translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n\n    let toValue = 0;\n    if (rowState === 0) {\n      if (translationX > leftThreshold) {\n        toValue = leftWidth;\n      } else if (translationX < -rightThreshold) {\n        toValue = -rightWidth;\n      }\n    } else if (rowState === 1) {\n      // swiped to left\n      if (translationX > -leftThreshold) {\n        toValue = leftWidth;\n      }\n    } else {\n      // swiped to right\n      if (translationX < rightThreshold) {\n        toValue = -rightWidth;\n      }\n    }\n\n    this._animateRow(startOffsetX, toValue, velocityX / friction);\n  };\n\n  _animateRow = (fromValue, toValue, velocityX) => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(fromValue);\n\n    this.setState({ rowState: Math.sign(toValue) });\n    Animated.spring(rowTranslation, {\n      restSpeedThreshold: 1.7,\n      restDisplacementThreshold: 0.4,\n      velocity: velocityX,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations,\n      ...this.props.animationOptions,\n    }).start(({ finished }) => {\n      if (finished) {\n        if (toValue > 0 && this.props.onSwipeableLeftOpen) {\n          this.props.onSwipeableLeftOpen();\n        } else if (toValue < 0 && this.props.onSwipeableRightOpen) {\n          this.props.onSwipeableRightOpen();\n        }\n\n        if (toValue === 0) {\n          this.props.onSwipeableClose && this.props.onSwipeableClose();\n        } else {\n          this.props.onSwipeableOpen && this.props.onSwipeableOpen();\n        }\n      }\n    });\n    if (toValue > 0 && this.props.onSwipeableLeftWillOpen) {\n      this.props.onSwipeableLeftWillOpen();\n    } else if (toValue < 0 && this.props.onSwipeableRightWillOpen) {\n      this.props.onSwipeableRightWillOpen();\n    }\n\n    if (toValue === 0) {\n      this.props.onSwipeableWillClose && this.props.onSwipeableWillClose();\n    } else {\n      this.props.onSwipeableWillOpen && this.props.onSwipeableWillOpen();\n    }\n  };\n\n  _onRowLayout = ({ nativeEvent }) => {\n    this.setState({ rowWidth: nativeEvent.layout.width });\n  };\n\n  _currentOffset = () => {\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    if (rowState === 1) {\n      return leftWidth;\n    } else if (rowState === -1) {\n      return -rightWidth;\n    }\n    return 0;\n  };\n\n  close = () => {\n    this._animateRow(this._currentOffset(), 0);\n  };\n\n  openLeft = () => {\n    const { leftWidth = 0 } = this.state;\n    this._animateRow(this._currentOffset(), leftWidth);\n  };\n\n  openRight = () => {\n    const { rowWidth = 0 } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    this._animateRow(this._currentOffset(), -rightWidth);\n  };\n\n  render() {\n    const { rowState } = this.state;\n    const { children, renderLeftActions, renderRightActions } = this.props;\n\n    const left = renderLeftActions && (\n      <Animated.View\n        style={[\n          styles.leftActions,\n          { transform: [{ translateX: this._leftActionTranslate }] },\n        ]}>\n        {renderLeftActions(this._showLeftAction, this._transX)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ leftWidth: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    const right = renderRightActions && (\n      <Animated.View\n        style={[\n          styles.rightActions,\n          { transform: [{ translateX: this._rightActionTranslate }] },\n        ]}>\n        {renderRightActions(this._showRightAction, this._transX)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ rightOffset: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-10, 10]}\n        {...this.props}\n        onGestureEvent={this._onGestureEvent}\n        onHandlerStateChange={this._onHandlerStateChange}>\n        <Animated.View\n          onLayout={this._onRowLayout}\n          style={[styles.container, this.props.containerStyle]}>\n          {left}\n          {right}\n          <TapGestureHandler\n            enabled={rowState !== 0}\n            onHandlerStateChange={this._onTapHandlerStateChange}>\n            <Animated.View\n              pointerEvents={rowState === 0 ? 'auto' : 'box-only'}\n              style={[\n                {\n                  transform: [{ translateX: this._transX }],\n                },\n                this.props.childrenContainerStyle,\n              ]}>\n              {children}\n            </Animated.View>\n          </TapGestureHandler>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  leftActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL? 'row-reverse': 'row',\n  },\n  rightActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}