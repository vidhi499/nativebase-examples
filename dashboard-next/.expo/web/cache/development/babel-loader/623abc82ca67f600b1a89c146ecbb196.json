{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _Text = _interopRequireDefault(require(\"../Text\"));\n\nvar _Item = _interopRequireDefault(require(\"./Item\"));\n\nvar _core = require(\"../../../core\");\n\nvar _Button = _interopRequireDefault(require(\"../Button\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction Select(_ref) {\n  var onValueChange = _ref.onValueChange,\n      children = _ref.children,\n      itemStyle = _ref.itemStyle,\n      selectedValue = _ref.selectedValue,\n      placeholder = _ref.placeholder,\n      selectedItemBg = _ref.selectedItemBg,\n      isDisabled = _ref.isDisabled,\n      dropdownIcon = _ref.dropdownIcon,\n      dropdownOpenIcon = _ref.dropdownOpenIcon,\n      dropdownCloseIcon = _ref.dropdownCloseIcon,\n      width = _ref.width,\n      props = _objectWithoutProperties(_ref, [\"onValueChange\", \"children\", \"itemStyle\", \"selectedValue\", \"placeholder\", \"selectedItemBg\", \"isDisabled\", \"dropdownIcon\", \"dropdownOpenIcon\", \"dropdownCloseIcon\", \"width\"]);\n\n  var triggerRef = _react[\"default\"].useRef();\n\n  var _react$default$useSta = _react[\"default\"].useState(false),\n      _react$default$useSta2 = _slicedToArray(_react$default$useSta, 2),\n      isOpen = _react$default$useSta2[0],\n      toggle = _react$default$useSta2[1];\n\n  var itemsList = _react[\"default\"].Children.map(children, function (child) {\n    return {\n      label: child.props.label,\n      value: child.props.value\n    };\n  });\n\n  var _ref2 = (0, _core.usePopover)(),\n      setPopover = _ref2.setPopover,\n      closePopover = _ref2.closePopover;\n\n  var closeMenu = function closeMenu() {\n    closePopover();\n    toggle(false);\n  };\n\n  var openMenu = function openMenu() {\n    if (!isDisabled) {\n      setPopover(_react[\"default\"].createElement(_reactNative.ScrollView, null, children), {\n        triggerRef: triggerRef,\n        animationDuration: 200,\n        onClose: closeMenu,\n        placeOverTriggerElement: false,\n        parentComponentConfig: {\n          open: isOpen,\n          closeMenu: closeMenu,\n          closeOnSelect: true,\n          selectedValue: selectedValue,\n          selectedItemBg: selectedItemBg,\n          onValueChange: onValueChange,\n          itemsList: itemsList,\n          itemStyle: itemStyle,\n          width: width\n        }\n      });\n      toggle(true);\n    }\n  };\n\n  var selectedItemArray = itemsList.filter(function (item) {\n    return item.value === selectedValue;\n  });\n  var selectedItem = selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;\n  var icon = !dropdownOpenIcon && !dropdownCloseIcon && dropdownIcon ? dropdownIcon : isOpen ? dropdownOpenIcon ? dropdownOpenIcon : null : dropdownCloseIcon ? dropdownCloseIcon : null;\n  return _react[\"default\"].createElement(_Button[\"default\"], _extends({\n    onPress: openMenu,\n    pl: 2,\n    pr: 0,\n    width: width,\n    ref: triggerRef\n  }, props, {\n    justifyContent: \"space-between\"\n  }), _react[\"default\"].createElement(_Text[\"default\"], {\n    opacity: selectedItem ? undefined : 0.5\n  }, selectedItem ? selectedItem.label : placeholder), icon);\n}\n\nSelect.Item = _Item[\"default\"];\nvar _default = Select;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["index.tsx"],"names":["props","triggerRef","React","itemsList","child","label","value","closePopover","closeMenu","toggle","openMenu","setPopover","animationDuration","onClose","placeOverTriggerElement","parentComponentConfig","open","closeOnSelect","selectedValue","selectedItemBg","onValueChange","itemStyle","width","selectedItemArray","item","selectedItem","icon","isOpen","dropdownOpenIcon","dropdownCloseIcon","Select","SelectItem"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Text from '../Text';\nimport SelectItem from './Item';\nimport type { ISelectProps, ISelectItemProps } from './props';\nimport { usePopover } from '../../../core';\nimport Button from '../Button';\nimport { ScrollView } from 'react-native';\nfunction Select({\n  onValueChange,\n  children,\n  itemStyle,\n  selectedValue,\n  placeholder,\n  selectedItemBg,\n  isDisabled,\n  dropdownIcon,\n  dropdownOpenIcon,\n  dropdownCloseIcon,\n  width,\n  ...props\n}: ISelectProps) {\n  let triggerRef = React.useRef();\n  let [isOpen, toggle] = React.useState<boolean>(false);\n  let itemsList: Array<{ label: string; value: string }> = React.Children.map(\n    children,\n    (child: any) => {\n      return { label: child.props.label, value: child.props.value };\n    }\n  );\n  const { setPopover, closePopover } = usePopover();\n  const closeMenu = () => {\n    closePopover();\n    toggle(false);\n  };\n  const openMenu = () => {\n    if (!isDisabled) {\n      setPopover(<ScrollView>{children}</ScrollView>, {\n        triggerRef,\n        animationDuration: 200,\n        onClose: closeMenu,\n        placeOverTriggerElement: false,\n        parentComponentConfig: {\n          open: isOpen,\n          closeMenu,\n          closeOnSelect: true,\n          selectedValue,\n          selectedItemBg,\n          onValueChange,\n          itemsList,\n          itemStyle,\n          width,\n        },\n      });\n      toggle(true);\n    }\n  };\n  const selectedItemArray = itemsList.filter(\n    (item: any) => item.value === selectedValue\n  );\n  const selectedItem =\n    selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;\n  let icon =\n    !dropdownOpenIcon && !dropdownCloseIcon && dropdownIcon\n      ? dropdownIcon\n      : isOpen\n      ? dropdownOpenIcon\n        ? dropdownOpenIcon\n        : null\n      : dropdownCloseIcon\n      ? dropdownCloseIcon\n      : null;\n  return (\n    <Button\n      onPress={openMenu}\n      pl={2}\n      pr={0}\n      width={width}\n      ref={triggerRef}\n      {...props}\n      justifyContent=\"space-between\"\n    >\n      <Text opacity={selectedItem ? undefined : 0.5}>\n        {selectedItem ? selectedItem.label : placeholder}\n      </Text>\n      {icon}\n    </Button>\n  );\n}\n\nSelect.Item = SelectItem;\n\nexport default Select;\nexport type { ISelectProps, ISelectItemProps };\n"]},"metadata":{},"sourceType":"script"}